#![allow(overflowing_literals)]
pub mod r#windows {
    pub mod r#data {
        pub mod r#text {
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct r#TextSegment {
                pub r#start_position: u32,
                pub r#length: u32,
            }
            unsafe impl ::winrt::RuntimeType for r#TextSegment {
                type Abi = Self;
                fn signature() -> String {
                    "struct(Windows.Data.Text.TextSegment;u4;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
        }
        pub mod r#xml {
            pub mod r#dom {
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlAttribute {
                    ptr: ::winrt::ComPtr<r#IXmlAttribute>,
                }
                impl r#IXmlAttribute {
                    pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#specified(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#specified)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#value)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_value)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlAttribute {
                    type VTable = abi_IXmlAttribute;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            2887010980,
                            46321,
                            19894,
                            [178, 6, 138, 34, 195, 8, 219, 10],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlAttribute {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlAttribute {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#name: extern "system" fn(
                        *const *const abi_IXmlAttribute,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#specified: extern "system" fn(
                        *const *const abi_IXmlAttribute,
                        *mut bool,
                    ) -> ::winrt::ErrorCode,
                    pub r#value: extern "system" fn(
                        *const *const abi_IXmlAttribute,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#set_value: extern "system" fn(
                        *const *const abi_IXmlAttribute,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlAttribute {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{ac144aa4-b4f1-4db6-b206-8a22c308db0a}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlAttribute {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlAttribute> for r#IXmlNode {
                    fn from(value: r#IXmlAttribute) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlAttribute> for r#IXmlNode {
                    fn from(value: &r#IXmlAttribute) -> r#IXmlNode {
                        <r#IXmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlAttribute> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlAttribute) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlAttribute> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlAttribute) -> r#IXmlNodeSelector {
                        <r#IXmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlAttribute> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlAttribute) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlAttribute> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlAttribute) -> r#IXmlNodeSerializer {
                        <r#IXmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlAttribute> for ::winrt::Object {
                    fn from(value: r#IXmlAttribute) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlAttribute> for ::winrt::Object {
                    fn from(value: &r#IXmlAttribute) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlCDataSection {
                    ptr: ::winrt::ComPtr<r#IXmlCDataSection>,
                }
                impl r#IXmlCDataSection {
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                    pub fn r#split_text(&self, r#offset: u32) -> ::winrt::Result<r#IXmlText> {
                        <r#IXmlText as ::std::convert::From<&Self>>::from(self)
                            .r#split_text(r#offset)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlCDataSection {
                    type VTable = abi_IXmlCDataSection;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1292153967,
                            51389,
                            17844,
                            [136, 153, 4, 0, 215, 194, 198, 15],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlCDataSection {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlCDataSection {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlCDataSection {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{4d04b46f-c8bd-45b4-8899-0400d7c2c60f}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlCDataSection {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for r#IXmlCharacterData {
                    fn from(value: r#IXmlCDataSection) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for r#IXmlCharacterData {
                    fn from(value: &r#IXmlCDataSection) -> r#IXmlCharacterData {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for r#IXmlNode {
                    fn from(value: r#IXmlCDataSection) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for r#IXmlNode {
                    fn from(value: &r#IXmlCDataSection) -> r#IXmlNode {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlCDataSection) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlCDataSection) -> r#IXmlNodeSelector {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlCDataSection) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlCDataSection) -> r#IXmlNodeSerializer {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for r#IXmlText {
                    fn from(value: r#IXmlCDataSection) -> r#IXmlText {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for r#IXmlText {
                    fn from(value: &r#IXmlCDataSection) -> r#IXmlText {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCDataSection> for ::winrt::Object {
                    fn from(value: r#IXmlCDataSection) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlCDataSection> for ::winrt::Object {
                    fn from(value: &r#IXmlCDataSection) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlCharacterData {
                    ptr: ::winrt::ComPtr<r#IXmlCharacterData>,
                }
                impl r#IXmlCharacterData {
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#data)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_data)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#length)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#substring_data)(
                                this,
                                r#offset,
                                r#count,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#append_data)(this, r#data.into().abi()).ok() }
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#insert_data)(this, r#offset, r#data.into().abi()).ok()
                        }
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#delete_data)(this, r#offset, r#count).ok() }
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#replace_data)(
                                this,
                                r#offset,
                                r#count,
                                r#data.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlCharacterData {
                    type VTable = abi_IXmlCharacterData;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            321798827,
                            20022,
                            19958,
                            [177, 200, 12, 230, 47, 216, 139, 38],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlCharacterData {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlCharacterData {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#set_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#length: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        *mut u32,
                    ) -> ::winrt::ErrorCode,
                    pub r#substring_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        u32,
                        u32,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#append_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#insert_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        u32,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#delete_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        u32,
                        u32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#replace_data: extern "system" fn(
                        *const *const abi_IXmlCharacterData,
                        u32,
                        u32,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlCharacterData {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{132e42ab-4e36-4df6-b1c8-0ce62fd88b26}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlCharacterData {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlCharacterData> for r#IXmlNode {
                    fn from(value: r#IXmlCharacterData) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCharacterData> for r#IXmlNode {
                    fn from(value: &r#IXmlCharacterData) -> r#IXmlNode {
                        <r#IXmlCharacterData as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCharacterData> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlCharacterData) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCharacterData> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlCharacterData) -> r#IXmlNodeSelector {
                        <r#IXmlCharacterData as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCharacterData> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlCharacterData) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlCharacterData> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlCharacterData) -> r#IXmlNodeSerializer {
                        <r#IXmlCharacterData as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlCharacterData> for ::winrt::Object {
                    fn from(value: r#IXmlCharacterData) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlCharacterData> for ::winrt::Object {
                    fn from(value: &r#IXmlCharacterData) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlComment {
                    ptr: ::winrt::ComPtr<r#IXmlComment>,
                }
                impl r#IXmlComment {
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlComment {
                    type VTable = abi_IXmlComment;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            3164894421,
                            46623,
                            17937,
                            [156, 172, 46, 146, 227, 71, 109, 71],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlComment {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlComment {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlComment {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{bca474d5-b61f-4611-9cac-2e92e3476d47}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlComment {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlComment> for r#IXmlCharacterData {
                    fn from(value: r#IXmlComment) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlComment> for r#IXmlCharacterData {
                    fn from(value: &r#IXmlComment) -> r#IXmlCharacterData {
                        <r#IXmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlComment> for r#IXmlNode {
                    fn from(value: r#IXmlComment) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlComment> for r#IXmlNode {
                    fn from(value: &r#IXmlComment) -> r#IXmlNode {
                        <r#IXmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlComment> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlComment) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlComment> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlComment) -> r#IXmlNodeSelector {
                        <r#IXmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlComment> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlComment) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlComment> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlComment) -> r#IXmlNodeSerializer {
                        <r#IXmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlComment> for ::winrt::Object {
                    fn from(value: r#IXmlComment) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlComment> for ::winrt::Object {
                    fn from(value: &r#IXmlComment) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocument {
                    ptr: ::winrt::ComPtr<r#IXmlDocument>,
                }
                impl r#IXmlDocument {
                    pub fn r#doctype(&self) -> ::winrt::Result<r#XmlDocumentType> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDocumentType = ::std::mem::zeroed();
                            ((*(*(this))).r#doctype)(
                                this,
                                <r#XmlDocumentType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#implementation(&self) -> ::winrt::Result<r#XmlDomImplementation> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDomImplementation = ::std::mem::zeroed();
                            ((*(*(this))).r#implementation)(
                                this,
                                <r#XmlDomImplementation as ::winrt::RuntimeType>::set_abi(
                                    &mut __ok,
                                ),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#document_element(&self) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#document_element)(
                                this,
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_element<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#create_element)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_document_fragment(
                        &self,
                    ) -> ::winrt::Result<r#XmlDocumentFragment> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDocumentFragment = ::std::mem::zeroed();
                            ((*(*(this))).r#create_document_fragment)(
                                this,
                                <r#XmlDocumentFragment as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_text_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlText> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlText = ::std::mem::zeroed();
                            ((*(*(this))).r#create_text_node)(
                                this,
                                r#data.into().abi(),
                                <r#XmlText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_comment<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlComment> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlComment = ::std::mem::zeroed();
                            ((*(*(this))).r#create_comment)(
                                this,
                                r#data.into().abi(),
                                <r#XmlComment as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_processing_instruction<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#target: __0,
                        r#data: __1,
                    ) -> ::winrt::Result<r#XmlProcessingInstruction> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlProcessingInstruction = ::std::mem::zeroed();
                            ((*(*(this))).r#create_processing_instruction)(
                                this,
                                r#target.into().abi(),
                                r#data.into().abi(),
                                <r#XmlProcessingInstruction as ::winrt::RuntimeType>::set_abi(
                                    &mut __ok,
                                ),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#create_attribute)(
                                this,
                                r#name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_entity_reference<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#XmlEntityReference> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlEntityReference = ::std::mem::zeroed();
                            ((*(*(this))).r#create_entity_reference)(
                                this,
                                r#name.into().abi(),
                                <r#XmlEntityReference as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_elements_by_tag_name<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#get_elements_by_tag_name)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_cdata_section<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlCDataSection> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlCDataSection = ::std::mem::zeroed();
                            ((*(*(this))).r#create_cdata_section)(
                                this,
                                r#data.into().abi(),
                                <r#XmlCDataSection as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#document_uri(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#document_uri)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#create_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_element_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#create_element_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_element_by_id<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#element_id: __0,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#get_element_by_id)(
                                this,
                                r#element_id.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#import_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                        r#deep: bool,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#import_node)(
                                this,
                                r#node.into().abi(),
                                r#deep,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocument {
                    type VTable = abi_IXmlDocument;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            4159939846,
                            7815,
                            17110,
                            [188, 251, 184, 200, 9, 250, 84, 148],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocument {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocument {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#doctype: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        *mut <r#XmlDocumentType as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#implementation: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        *mut <r#XmlDomImplementation as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#document_element: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        *mut <r#XmlElement as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_element: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlElement as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_document_fragment: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        *mut <r#XmlDocumentFragment as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_text_node: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlText as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_comment: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlComment as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_processing_instruction: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlProcessingInstruction as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_attribute: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_entity_reference: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlEntityReference as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_elements_by_tag_name: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlNodeList as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_cdata_section: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlCDataSection as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#document_uri: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_attribute_ns: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#create_element_ns: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlElement as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_element_by_id: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlElement as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#import_node: extern "system" fn(
                        *const *const abi_IXmlDocument,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        bool,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocument {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{f7f3a506-1e87-42d6-bcfb-b8c809fa5494}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocument {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocument> for r#IXmlNode {
                    fn from(value: r#IXmlDocument) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocument> for r#IXmlNode {
                    fn from(value: &r#IXmlDocument) -> r#IXmlNode {
                        <r#IXmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocument> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlDocument) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocument> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlDocument) -> r#IXmlNodeSelector {
                        <r#IXmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocument> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlDocument) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocument> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlDocument) -> r#IXmlNodeSerializer {
                        <r#IXmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocument> for ::winrt::Object {
                    fn from(value: r#IXmlDocument) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocument> for ::winrt::Object {
                    fn from(value: &r#IXmlDocument) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocumentFragment {
                    ptr: ::winrt::ComPtr<r#IXmlDocumentFragment>,
                }
                impl r#IXmlDocumentFragment {
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocumentFragment {
                    type VTable = abi_IXmlDocumentFragment;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            3807013526,
                            3105,
                            17573,
                            [139, 201, 158, 74, 38, 39, 8, 236],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocumentFragment {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocumentFragment {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocumentFragment {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{e2ea6a96-0c21-44a5-8bc9-9e4a262708ec}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocumentFragment {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentFragment> for r#IXmlNode {
                    fn from(value: r#IXmlDocumentFragment) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentFragment> for r#IXmlNode {
                    fn from(value: &r#IXmlDocumentFragment) -> r#IXmlNode {
                        <r#IXmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentFragment> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlDocumentFragment) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentFragment> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlDocumentFragment) -> r#IXmlNodeSelector {
                        <r#IXmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentFragment> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlDocumentFragment) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentFragment> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlDocumentFragment) -> r#IXmlNodeSerializer {
                        <r#IXmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentFragment> for ::winrt::Object {
                    fn from(value: r#IXmlDocumentFragment) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentFragment> for ::winrt::Object {
                    fn from(value: &r#IXmlDocumentFragment) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocumentIO {
                    ptr: ::winrt::ComPtr<r#IXmlDocumentIO>,
                }
                impl r#IXmlDocumentIO {
                    pub fn r#load_xml<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xml: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#load_xml)(this, r#xml.into().abi()).ok() }
                    }
                    pub fn r#load_xml_with_settings<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#xml: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#load_xml_with_settings)(
                                this,
                                r#xml.into().abi(),
                                r#load_settings.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#save_to_file_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                    >(
                        &self,
                        r#file: __0,
                    ) -> ::winrt::Result<super::super::super::r#foundation::r#IAsyncAction>
                    {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: super::super::super::r#foundation::r#IAsyncAction =
                                ::std::mem::zeroed();
                            ( ( * ( * ( this ) ) ) . r#save_to_file_async ) ( this , r#file . into ( ) . abi ( ) , < super :: super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocumentIO {
                    type VTable = abi_IXmlDocumentIO;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1825630030,
                            61029,
                            17545,
                            [158, 191, 202, 67, 232, 123, 166, 55],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocumentIO {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocumentIO where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#load_xml : extern "system" fn ( * const * const abi_IXmlDocumentIO , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_xml_with_settings : extern "system" fn ( * const * const abi_IXmlDocumentIO , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#XmlLoadSettings as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#save_to_file_async : extern "system" fn ( * const * const abi_IXmlDocumentIO , < super :: super :: super :: r#storage :: r#IStorageFile as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocumentIO {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{6cd0e74e-ee65-4489-9ebf-ca43e87ba637}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocumentIO {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentIO> for ::winrt::Object {
                    fn from(value: r#IXmlDocumentIO) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentIO> for ::winrt::Object {
                    fn from(value: &r#IXmlDocumentIO) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocumentIO2 {
                    ptr: ::winrt::ComPtr<r#IXmlDocumentIO2>,
                }
                impl r#IXmlDocumentIO2 {
                    pub fn r#load_xml_from_buffer<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<
                                'a,
                                super::super::super::r#storage::r#streams::r#IBuffer,
                            >,
                        >,
                    >(
                        &self,
                        r#buffer: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#load_xml_from_buffer)(this, r#buffer.into().abi()).ok()
                        }
                    }
                    pub fn r#load_xml_from_buffer_with_settings<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<
                                'a,
                                super::super::super::r#storage::r#streams::r#IBuffer,
                            >,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#buffer: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#load_xml_from_buffer_with_settings)(
                                this,
                                r#buffer.into().abi(),
                                r#load_settings.into().abi(),
                            )
                            .ok()
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocumentIO2 {
                    type VTable = abi_IXmlDocumentIO2;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1560495713,
                            31704,
                            19157,
                            [158, 191, 129, 230, 52, 114, 99, 177],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocumentIO2 {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocumentIO2 where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#load_xml_from_buffer : extern "system" fn ( * const * const abi_IXmlDocumentIO2 , < super :: super :: super :: r#storage :: r#streams :: r#IBuffer as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_xml_from_buffer_with_settings : extern "system" fn ( * const * const abi_IXmlDocumentIO2 , < super :: super :: super :: r#storage :: r#streams :: r#IBuffer as :: winrt :: RuntimeType > :: Abi , < r#XmlLoadSettings as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocumentIO2 {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{5d034661-7bd8-4ad5-9ebf-81e6347263b1}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocumentIO2 {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentIO2> for ::winrt::Object {
                    fn from(value: r#IXmlDocumentIO2) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentIO2> for ::winrt::Object {
                    fn from(value: &r#IXmlDocumentIO2) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocumentStatics {
                    ptr: ::winrt::ComPtr<r#IXmlDocumentStatics>,
                }
                impl r#IXmlDocumentStatics {
                    pub fn r#load_from_uri_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#foundation::r#Uri>,
                        >,
                    >(
                        &self,
                        r#uri: __0,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: super::super::super::r#foundation::r#IAsyncOperation<
                                r#XmlDocument,
                            > = ::std::mem::zeroed();
                            ( ( * ( * ( this ) ) ) . r#load_from_uri_async ) ( this , r#uri . into ( ) . abi ( ) , < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                        }
                    }
                    pub fn r#load_from_uri_with_settings_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#foundation::r#Uri>,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#uri: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: super::super::super::r#foundation::r#IAsyncOperation<
                                r#XmlDocument,
                            > = ::std::mem::zeroed();
                            ( ( * ( * ( this ) ) ) . r#load_from_uri_with_settings_async ) ( this , r#uri . into ( ) . abi ( ) , r#load_settings . into ( ) . abi ( ) , < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                        }
                    }
                    pub fn r#load_from_file_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                    >(
                        &self,
                        r#file: __0,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: super::super::super::r#foundation::r#IAsyncOperation<
                                r#XmlDocument,
                            > = ::std::mem::zeroed();
                            ( ( * ( * ( this ) ) ) . r#load_from_file_async ) ( this , r#file . into ( ) . abi ( ) , < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                        }
                    }
                    pub fn r#load_from_file_with_settings_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#file: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: super::super::super::r#foundation::r#IAsyncOperation<
                                r#XmlDocument,
                            > = ::std::mem::zeroed();
                            ( ( * ( * ( this ) ) ) . r#load_from_file_with_settings_async ) ( this , r#file . into ( ) . abi ( ) , r#load_settings . into ( ) . abi ( ) , < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocumentStatics {
                    type VTable = abi_IXmlDocumentStatics;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1430508116,
                            55127,
                            19321,
                            [149, 57, 35, 43, 24, 245, 11, 241],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocumentStatics {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocumentStatics where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#load_from_uri_async : extern "system" fn ( * const * const abi_IXmlDocumentStatics , < super :: super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_uri_with_settings_async : extern "system" fn ( * const * const abi_IXmlDocumentStatics , < super :: super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , < r#XmlLoadSettings as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_file_async : extern "system" fn ( * const * const abi_IXmlDocumentStatics , < super :: super :: super :: r#storage :: r#IStorageFile as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_file_with_settings_async : extern "system" fn ( * const * const abi_IXmlDocumentStatics , < super :: super :: super :: r#storage :: r#IStorageFile as :: winrt :: RuntimeType > :: Abi , < r#XmlLoadSettings as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: super :: r#foundation :: r#IAsyncOperation :: < r#XmlDocument > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocumentStatics {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{5543d254-d757-4b79-9539-232b18f50bf1}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocumentStatics {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentStatics> for ::winrt::Object {
                    fn from(value: r#IXmlDocumentStatics) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentStatics> for ::winrt::Object {
                    fn from(value: &r#IXmlDocumentStatics) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDocumentType {
                    ptr: ::winrt::ComPtr<r#IXmlDocumentType>,
                }
                impl r#IXmlDocumentType {
                    pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#entities(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNamedNodeMap = ::std::mem::zeroed();
                            ((*(*(this))).r#entities)(
                                this,
                                <r#XmlNamedNodeMap as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#notations(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNamedNodeMap = ::std::mem::zeroed();
                            ((*(*(this))).r#notations)(
                                this,
                                <r#XmlNamedNodeMap as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDocumentType {
                    type VTable = abi_IXmlDocumentType;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            4147389477,
                            38785,
                            18788,
                            [142, 148, 155, 28, 109, 252, 155, 199],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDocumentType {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDocumentType {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#name: extern "system" fn(
                        *const *const abi_IXmlDocumentType,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#entities: extern "system" fn(
                        *const *const abi_IXmlDocumentType,
                        *mut <r#XmlNamedNodeMap as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#notations: extern "system" fn(
                        *const *const abi_IXmlDocumentType,
                        *mut <r#XmlNamedNodeMap as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlDocumentType {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{f7342425-9781-4964-8e94-9b1c6dfc9bc7}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDocumentType {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentType> for r#IXmlNode {
                    fn from(value: r#IXmlDocumentType) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentType> for r#IXmlNode {
                    fn from(value: &r#IXmlDocumentType) -> r#IXmlNode {
                        <r#IXmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentType> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlDocumentType) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentType> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlDocumentType) -> r#IXmlNodeSelector {
                        <r#IXmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentType> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlDocumentType) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentType> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlDocumentType) -> r#IXmlNodeSerializer {
                        <r#IXmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlDocumentType> for ::winrt::Object {
                    fn from(value: r#IXmlDocumentType) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDocumentType> for ::winrt::Object {
                    fn from(value: &r#IXmlDocumentType) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlDomImplementation {
                    ptr: ::winrt::ComPtr<r#IXmlDomImplementation>,
                }
                impl r#IXmlDomImplementation {
                    pub fn r#has_feature<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#feature: __0,
                        r#version: __1,
                    ) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#has_feature)(
                                this,
                                r#feature.into().abi(),
                                r#version.into().abi(),
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlDomImplementation {
                    type VTable = abi_IXmlDomImplementation;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1843757362,
                            61725,
                            20411,
                            [140, 198, 88, 60, 186, 147, 17, 47],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlDomImplementation {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlDomImplementation {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#has_feature: extern "system" fn(
                        *const *const abi_IXmlDomImplementation,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlDomImplementation {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{6de58132-f11d-4fbb-8cc6-583cba93112f}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlDomImplementation {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlDomImplementation> for ::winrt::Object {
                    fn from(value: r#IXmlDomImplementation) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlDomImplementation> for ::winrt::Object {
                    fn from(value: &r#IXmlDomImplementation) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlElement {
                    ptr: ::winrt::ComPtr<r#IXmlElement>,
                }
                impl r#IXmlElement {
                    pub fn r#tag_name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#tag_name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute)(
                                this,
                                r#attribute_name.into().abi(),
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                        r#attribute_value: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_attribute)(
                                this,
                                r#attribute_name.into().abi(),
                                r#attribute_value.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#remove_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#remove_attribute)(this, r#attribute_name.into().abi())
                                .ok()
                        }
                    }
                    pub fn r#get_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_node)(
                                this,
                                r#attribute_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#new_attribute: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#set_attribute_node)(
                                this,
                                r#new_attribute.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#attribute_node: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_attribute_node)(
                                this,
                                r#attribute_node.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_elements_by_tag_name<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#get_elements_by_tag_name)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                        r#value: __2,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                r#value.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#get_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#remove_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#set_attribute_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#new_attribute: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#set_attribute_node_ns)(
                                this,
                                r#new_attribute.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_attribute_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_node_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlElement {
                    type VTable = abi_IXmlElement;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            771459615,
                            27408,
                            20216,
                            [159, 131, 239, 204, 232, 250, 236, 55],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlElement {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlElement {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#tag_name: extern "system" fn(
                        *const *const abi_IXmlElement,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#get_attribute: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_attribute: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_attribute: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_attribute_node: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_attribute_node: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_attribute_node: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_elements_by_tag_name: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlNodeList as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_attribute_ns: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_attribute_ns: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_attribute_ns: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_attribute_node_ns: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_attribute_node_ns: extern "system" fn(
                        *const *const abi_IXmlElement,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlAttribute as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlElement {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{2dfb8a1f-6b10-4ef8-9f83-efcce8faec37}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlElement {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlElement> for r#IXmlNode {
                    fn from(value: r#IXmlElement) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlElement> for r#IXmlNode {
                    fn from(value: &r#IXmlElement) -> r#IXmlNode {
                        <r#IXmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlElement> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlElement) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlElement> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlElement) -> r#IXmlNodeSelector {
                        <r#IXmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlElement> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlElement) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlElement> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlElement) -> r#IXmlNodeSerializer {
                        <r#IXmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlElement> for ::winrt::Object {
                    fn from(value: r#IXmlElement) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlElement> for ::winrt::Object {
                    fn from(value: &r#IXmlElement) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlEntityReference {
                    ptr: ::winrt::ComPtr<r#IXmlEntityReference>,
                }
                impl r#IXmlEntityReference {
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlEntityReference {
                    type VTable = abi_IXmlEntityReference;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            774850492,
                            50128,
                            19663,
                            [187, 134, 10, 184, 195, 106, 97, 207],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlEntityReference {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlEntityReference {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlEntityReference {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{2e2f47bc-c3d0-4ccf-bb86-0ab8c36a61cf}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlEntityReference {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlEntityReference> for r#IXmlNode {
                    fn from(value: r#IXmlEntityReference) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlEntityReference> for r#IXmlNode {
                    fn from(value: &r#IXmlEntityReference) -> r#IXmlNode {
                        <r#IXmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlEntityReference> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlEntityReference) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlEntityReference> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlEntityReference) -> r#IXmlNodeSelector {
                        <r#IXmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlEntityReference> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlEntityReference) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlEntityReference> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlEntityReference) -> r#IXmlNodeSerializer {
                        <r#IXmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlEntityReference> for ::winrt::Object {
                    fn from(value: r#IXmlEntityReference) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlEntityReference> for ::winrt::Object {
                    fn from(value: &r#IXmlEntityReference) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlLoadSettings {
                    ptr: ::winrt::ComPtr<r#IXmlLoadSettings>,
                }
                impl r#IXmlLoadSettings {
                    pub fn r#max_element_depth(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#max_element_depth)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_max_element_depth(&self, r#value: u32) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_max_element_depth)(this, r#value).ok() }
                    }
                    pub fn r#prohibit_dtd(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#prohibit_dtd)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_prohibit_dtd(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_prohibit_dtd)(this, r#value).ok() }
                    }
                    pub fn r#resolve_externals(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#resolve_externals)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_resolve_externals(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_resolve_externals)(this, r#value).ok() }
                    }
                    pub fn r#validate_on_parse(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#validate_on_parse)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_validate_on_parse(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_validate_on_parse)(this, r#value).ok() }
                    }
                    pub fn r#element_content_white_space(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#element_content_white_space)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_element_content_white_space(
                        &self,
                        r#value: bool,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_element_content_white_space)(this, r#value).ok()
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlLoadSettings {
                    type VTable = abi_IXmlLoadSettings;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1487538088,
                            65238,
                            18167,
                            [180, 197, 251, 27, 167, 33, 8, 214],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlLoadSettings {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlLoadSettings {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#max_element_depth: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        *mut u32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_max_element_depth: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        u32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#prohibit_dtd: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_prohibit_dtd: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#resolve_externals: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_resolve_externals: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#validate_on_parse: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_validate_on_parse: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#element_content_white_space: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_element_content_white_space: extern "system" fn(
                        *const *const abi_IXmlLoadSettings,
                        bool,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlLoadSettings {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{58aa07a8-fed6-46f7-b4c5-fb1ba72108d6}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlLoadSettings {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlLoadSettings> for ::winrt::Object {
                    fn from(value: r#IXmlLoadSettings) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlLoadSettings> for ::winrt::Object {
                    fn from(value: &r#IXmlLoadSettings) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlNamedNodeMap {
                    ptr: ::winrt::ComPtr<r#IXmlNamedNodeMap>,
                }
                impl r#IXmlNamedNodeMap {
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#length)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#item(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#item)(
                                this,
                                r#index,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#get_named_item)(
                                this,
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#set_named_item)(
                                this,
                                r#node.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_named_item)(
                                this,
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#name: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#get_named_item_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#name: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_named_item_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#set_named_item_ns)(
                                this,
                                r#node.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#first(
                        &self,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#collections::r#IIterator<r#IXmlNode>,
                    > {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IIterable :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#first ( )
                    }
                    pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_at ( r#index , )
                    }
                    pub fn r#size(&self) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#size ( )
                    }
                    pub fn r#index_of<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#value: __0,
                        r#index: &mut u32,
                    ) -> ::winrt::Result<bool> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#index_of ( r#value , r#index , )
                    }
                    pub fn r#get_many(
                        &self,
                        r#start_index: u32,
                        r#items: &mut [r#IXmlNode],
                    ) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_many ( r#start_index , r#items , )
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlNamedNodeMap {
                    type VTable = abi_IXmlNamedNodeMap;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            3014041264,
                            43696,
                            19330,
                            [166, 250, 177, 69, 63, 124, 2, 27],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlNamedNodeMap {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlNamedNodeMap {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#length: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        *mut u32,
                    ) -> ::winrt::ErrorCode,
                    pub r#item: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        u32,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#get_named_item: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_named_item: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_named_item: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_named_item_ns: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_named_item_ns: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#set_named_item_ns: extern "system" fn(
                        *const *const abi_IXmlNamedNodeMap,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlNamedNodeMap {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{b3a69eb0-aab0-4b82-a6fa-b1453f7c021b}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlNamedNodeMap {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: r#IXmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: &r#IXmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        <r#IXmlNamedNodeMap as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: r#IXmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: &r#IXmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        <r#IXmlNamedNodeMap as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNamedNodeMap> for ::winrt::Object {
                    fn from(value: r#IXmlNamedNodeMap) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlNamedNodeMap> for ::winrt::Object {
                    fn from(value: &r#IXmlNamedNodeMap) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::iter::IntoIterator for r#IXmlNamedNodeMap {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                impl<'a> ::std::iter::IntoIterator for &'a r#IXmlNamedNodeMap {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlNode {
                    ptr: ::winrt::ComPtr<r#IXmlNode>,
                }
                impl r#IXmlNode {
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                            ((*(*(this))).r#node_value)(
                                this,
                                <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_node_value)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#NodeType = ::std::mem::zeroed();
                            ((*(*(this))).r#node_type)(
                                this,
                                <r#NodeType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#node_name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#parent_node)(
                                this,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#child_nodes)(
                                this,
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#first_child)(
                                this,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#last_child)(
                                this,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#previous_sibling)(
                                this,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#next_sibling)(
                                this,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNamedNodeMap = ::std::mem::zeroed();
                            ((*(*(this))).r#attributes)(
                                this,
                                <r#XmlNamedNodeMap as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#has_child_nodes)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDocument = ::std::mem::zeroed();
                            ((*(*(this))).r#owner_document)(
                                this,
                                <r#XmlDocument as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#insert_before)(
                                this,
                                r#new_child.into().abi(),
                                r#reference_child.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#replace_child)(
                                this,
                                r#new_child.into().abi(),
                                r#reference_child.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_child)(
                                this,
                                r#child_node.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#append_child)(
                                this,
                                r#new_child.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#clone_node)(
                                this,
                                r#deep,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                            ((*(*(this))).r#namespace_uri)(
                                this,
                                <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                            ((*(*(this))).r#local_name)(
                                this,
                                <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                            ((*(*(this))).r#prefix)(
                                this,
                                <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#normalize)(this).ok() }
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_prefix)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlNode {
                    type VTable = abi_IXmlNode;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            477371737,
                            8482,
                            18389,
                            [168, 86, 131, 243, 212, 33, 72, 117],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlNode {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlNode {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#node_value: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#set_node_value: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#node_type: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#NodeType as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#node_name: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#parent_node: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#child_nodes: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#XmlNodeList as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#first_child: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#last_child: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#previous_sibling: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#next_sibling: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#attributes: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#XmlNamedNodeMap as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#has_child_nodes: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut bool,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#owner_document: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <r#XmlDocument as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#insert_before: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#replace_child: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#remove_child: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#append_child: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#clone_node: extern "system" fn(
                        *const *const abi_IXmlNode,
                        bool,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#namespace_uri: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#local_name: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#prefix: extern "system" fn(
                        *const *const abi_IXmlNode,
                        *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#normalize:
                        extern "system" fn(*const *const abi_IXmlNode) -> ::winrt::ErrorCode,
                    pub r#set_prefix: extern "system" fn(
                        *const *const abi_IXmlNode,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlNode {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{1c741d59-2122-47d5-a856-83f3d4214875}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlNode {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlNode> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlNode) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNode> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlNode) -> r#IXmlNodeSelector {
                        <r#IXmlNode as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNode> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlNode) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNode> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlNode) -> r#IXmlNodeSerializer {
                        <r#IXmlNode as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNode> for ::winrt::Object {
                    fn from(value: r#IXmlNode) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlNode> for ::winrt::Object {
                    fn from(value: &r#IXmlNode) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlNodeList {
                    ptr: ::winrt::ComPtr<r#IXmlNodeList>,
                }
                impl r#IXmlNodeList {
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#length)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#item(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#item)(
                                this,
                                r#index,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#first(
                        &self,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#collections::r#IIterator<r#IXmlNode>,
                    > {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IIterable :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#first ( )
                    }
                    pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_at ( r#index , )
                    }
                    pub fn r#size(&self) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#size ( )
                    }
                    pub fn r#index_of<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#value: __0,
                        r#index: &mut u32,
                    ) -> ::winrt::Result<bool> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#index_of ( r#value , r#index , )
                    }
                    pub fn r#get_many(
                        &self,
                        r#start_index: u32,
                        r#items: &mut [r#IXmlNode],
                    ) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_many ( r#start_index , r#items , )
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlNodeList {
                    type VTable = abi_IXmlNodeList;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            2355146103,
                            33700,
                            20161,
                            [156, 84, 123, 164, 41, 225, 61, 166],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlNodeList {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlNodeList {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#length: extern "system" fn(
                        *const *const abi_IXmlNodeList,
                        *mut u32,
                    ) -> ::winrt::ErrorCode,
                    pub r#item: extern "system" fn(
                        *const *const abi_IXmlNodeList,
                        u32,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlNodeList {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{8c60ad77-83a4-4ec1-9c54-7ba429e13da6}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlNodeList {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: r#IXmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: &r#IXmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        <r#IXmlNodeList as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: r#IXmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: &r#IXmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        <r#IXmlNodeList as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlNodeList> for ::winrt::Object {
                    fn from(value: r#IXmlNodeList) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlNodeList> for ::winrt::Object {
                    fn from(value: &r#IXmlNodeList) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::iter::IntoIterator for r#IXmlNodeList {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                impl<'a> ::std::iter::IntoIterator for &'a r#IXmlNodeList {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlNodeSelector {
                    ptr: ::winrt::ComPtr<r#IXmlNodeSelector>,
                }
                impl r#IXmlNodeSelector {
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#select_single_node)(
                                this,
                                r#xpath.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#select_nodes)(
                                this,
                                r#xpath.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#select_single_node_ns)(
                                this,
                                r#xpath.into().abi(),
                                r#namespaces.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#select_nodes_ns)(
                                this,
                                r#xpath.into().abi(),
                                r#namespaces.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlNodeSelector {
                    type VTable = abi_IXmlNodeSelector;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1675344523,
                            53467,
                            20449,
                            [183, 69, 249, 67, 58, 253, 194, 91],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlNodeSelector {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlNodeSelector {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#select_single_node: extern "system" fn(
                        *const *const abi_IXmlNodeSelector,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#select_nodes: extern "system" fn(
                        *const *const abi_IXmlNodeSelector,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlNodeList as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#select_single_node_ns: extern "system" fn(
                        *const *const abi_IXmlNodeSelector,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        *mut <r#IXmlNode as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#select_nodes_ns: extern "system" fn(
                        *const *const abi_IXmlNodeSelector,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                        <::winrt::Object as ::winrt::RuntimeType>::Abi,
                        *mut <r#XmlNodeList as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlNodeSelector {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{63dbba8b-d0db-4fe1-b745-f9433afdc25b}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlNodeSelector {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlNodeSelector> for ::winrt::Object {
                    fn from(value: r#IXmlNodeSelector) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlNodeSelector> for ::winrt::Object {
                    fn from(value: &r#IXmlNodeSelector) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlNodeSerializer {
                    ptr: ::winrt::ComPtr<r#IXmlNodeSerializer>,
                }
                impl r#IXmlNodeSerializer {
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#get_xml)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#inner_text)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_inner_text)(this, r#value.into().abi()).ok() }
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlNodeSerializer {
                    type VTable = abi_IXmlNodeSerializer;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            1556460418,
                            59101,
                            18833,
                            [171, 239, 6, 216, 210, 231, 189, 12],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlNodeSerializer {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlNodeSerializer {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#get_xml: extern "system" fn(
                        *const *const abi_IXmlNodeSerializer,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#inner_text: extern "system" fn(
                        *const *const abi_IXmlNodeSerializer,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#set_inner_text: extern "system" fn(
                        *const *const abi_IXmlNodeSerializer,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlNodeSerializer {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{5cc5b382-e6dd-4991-abef-06d8d2e7bd0c}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlNodeSerializer {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlNodeSerializer> for ::winrt::Object {
                    fn from(value: r#IXmlNodeSerializer) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlNodeSerializer> for ::winrt::Object {
                    fn from(value: &r#IXmlNodeSerializer) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlProcessingInstruction {
                    ptr: ::winrt::ComPtr<r#IXmlProcessingInstruction>,
                }
                impl r#IXmlProcessingInstruction {
                    pub fn r#target(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#target)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#data)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_data)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlProcessingInstruction {
                    type VTable = abi_IXmlProcessingInstruction;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            654834974,
                            7826,
                            20174,
                            [182, 244, 38, 240, 105, 7, 141, 220],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlProcessingInstruction {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlProcessingInstruction {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#target: extern "system" fn(
                        *const *const abi_IXmlProcessingInstruction,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#data: extern "system" fn(
                        *const *const abi_IXmlProcessingInstruction,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                    pub r#set_data: extern "system" fn(
                        *const *const abi_IXmlProcessingInstruction,
                        <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlProcessingInstruction {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{2707fd1e-1e92-4ece-b6f4-26f069078ddc}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlProcessingInstruction {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlProcessingInstruction> for r#IXmlNode {
                    fn from(value: r#IXmlProcessingInstruction) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlProcessingInstruction> for r#IXmlNode {
                    fn from(value: &r#IXmlProcessingInstruction) -> r#IXmlNode {
                        <r#IXmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlProcessingInstruction> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlProcessingInstruction) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlProcessingInstruction> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlProcessingInstruction) -> r#IXmlNodeSelector {
                        <r#IXmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlProcessingInstruction> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlProcessingInstruction) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlProcessingInstruction> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlProcessingInstruction) -> r#IXmlNodeSerializer {
                        <r#IXmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlProcessingInstruction> for ::winrt::Object {
                    fn from(value: r#IXmlProcessingInstruction) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlProcessingInstruction> for ::winrt::Object {
                    fn from(value: &r#IXmlProcessingInstruction) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, PartialEq)]
                pub struct r#IXmlText {
                    ptr: ::winrt::ComPtr<r#IXmlText>,
                }
                impl r#IXmlText {
                    pub fn r#split_text(&self, r#offset: u32) -> ::winrt::Result<r#IXmlText> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlText = ::std::mem::zeroed();
                            ((*(*(this))).r#split_text)(
                                this,
                                r#offset,
                                <r#IXmlText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                unsafe impl ::winrt::ComInterface for r#IXmlText {
                    type VTable = abi_IXmlText;
                    fn iid() -> ::winrt::Guid {
                        ::winrt::Guid::from_values(
                            4180780235,
                            12429,
                            18272,
                            [161, 213, 67, 182, 116, 80, 172, 126],
                        )
                    }
                }
                impl ::std::clone::Clone for r#IXmlText {
                    fn clone(&self) -> Self {
                        Self {
                            ptr: self.ptr.clone(),
                        }
                    }
                }
                #[repr(C)]
                pub struct abi_IXmlText {
                    pub unknown_query_interface: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::IUnknown>,
                        &::winrt::Guid,
                        *mut ::winrt::RawPtr,
                    )
                        -> ::winrt::ErrorCode,
                    pub unknown_add_ref:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub unknown_release:
                        extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                    pub inspectable_iids: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut u32,
                        *mut *mut ::winrt::Guid,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_type_name: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    )
                        -> ::winrt::ErrorCode,
                    pub inspectable_trust_level: extern "system" fn(
                        ::winrt::RawComPtr<::winrt::Object>,
                        *mut i32,
                    )
                        -> ::winrt::ErrorCode,
                    pub r#split_text: extern "system" fn(
                        *const *const abi_IXmlText,
                        u32,
                        *mut <r#IXmlText as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
                }
                unsafe impl ::winrt::RuntimeType for r#IXmlText {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "{f931a4cb-308d-4760-a1d5-43b67450ac7e}".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#IXmlText {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#IXmlText> for r#IXmlCharacterData {
                    fn from(value: r#IXmlText) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlText> for r#IXmlCharacterData {
                    fn from(value: &r#IXmlText) -> r#IXmlCharacterData {
                        <r#IXmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlText> for r#IXmlNode {
                    fn from(value: r#IXmlText) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlText> for r#IXmlNode {
                    fn from(value: &r#IXmlText) -> r#IXmlNode {
                        <r#IXmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlText> for r#IXmlNodeSelector {
                    fn from(value: r#IXmlText) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlText> for r#IXmlNodeSelector {
                    fn from(value: &r#IXmlText) -> r#IXmlNodeSelector {
                        <r#IXmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlText> for r#IXmlNodeSerializer {
                    fn from(value: r#IXmlText) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#IXmlText> for r#IXmlNodeSerializer {
                    fn from(value: &r#IXmlText) -> r#IXmlNodeSerializer {
                        <r#IXmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#IXmlText> for ::winrt::Object {
                    fn from(value: r#IXmlText) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#IXmlText> for ::winrt::Object {
                    fn from(value: &r#IXmlText) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
                pub struct r#NodeType {
                    value: i32,
                }
                impl r#NodeType {
                    #![allow(non_upper_case_globals)]
                    pub const r#Invalid: Self = Self { value: 0i32 };
                    pub const r#ElementNode: Self = Self { value: 1i32 };
                    pub const r#AttributeNode: Self = Self { value: 2i32 };
                    pub const r#TextNode: Self = Self { value: 3i32 };
                    pub const r#DataSectionNode: Self = Self { value: 4i32 };
                    pub const r#EntityReferenceNode: Self = Self { value: 5i32 };
                    pub const r#EntityNode: Self = Self { value: 6i32 };
                    pub const r#ProcessingInstructionNode: Self = Self { value: 7i32 };
                    pub const r#CommentNode: Self = Self { value: 8i32 };
                    pub const r#DocumentNode: Self = Self { value: 9i32 };
                    pub const r#DocumentTypeNode: Self = Self { value: 10i32 };
                    pub const r#DocumentFragmentNode: Self = Self { value: 11i32 };
                    pub const r#NotationNode: Self = Self { value: 12i32 };
                }
                unsafe impl ::winrt::RuntimeType for r#NodeType {
                    type Abi = i32;
                    fn signature() -> String {
                        "enum(Windows.Data.Xml.Dom.NodeType;i4)".to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        self.value
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        &mut self.value
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlAttribute {
                    ptr: ::winrt::ComPtr<r#XmlAttribute>,
                }
                impl r#XmlAttribute {
                    pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#specified(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#specified)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#value)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_value)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlAttribute {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlAttribute";
                }
                unsafe impl ::winrt::ComInterface for r#XmlAttribute {
                    type VTable = abi_IXmlAttribute;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlAttribute as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlAttribute {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlAttribute;{ac144aa4-b4f1-4db6-b206-8a22c308db0a})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlAttribute {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlAttribute> for r#IXmlAttribute {
                    fn from(value: r#XmlAttribute) -> r#IXmlAttribute {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlAttribute> for r#IXmlAttribute {
                    fn from(value: &r#XmlAttribute) -> r#IXmlAttribute {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlAttribute> for r#IXmlNode {
                    fn from(value: r#XmlAttribute) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlAttribute> for r#IXmlNode {
                    fn from(value: &r#XmlAttribute) -> r#IXmlNode {
                        <r#XmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlAttribute> for r#IXmlNodeSelector {
                    fn from(value: r#XmlAttribute) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlAttribute> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlAttribute) -> r#IXmlNodeSelector {
                        <r#XmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlAttribute> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlAttribute) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlAttribute> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlAttribute) -> r#IXmlNodeSerializer {
                        <r#XmlAttribute as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlAttribute> for ::winrt::Object {
                    fn from(value: r#XmlAttribute) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlAttribute> for ::winrt::Object {
                    fn from(value: &r#XmlAttribute) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlCDataSection {
                    ptr: ::winrt::ComPtr<r#XmlCDataSection>,
                }
                impl r#XmlCDataSection {
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                    pub fn r#split_text(&self, r#offset: u32) -> ::winrt::Result<r#IXmlText> {
                        <r#IXmlText as ::std::convert::From<&Self>>::from(self)
                            .r#split_text(r#offset)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlCDataSection {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlCDataSection";
                }
                unsafe impl ::winrt::ComInterface for r#XmlCDataSection {
                    type VTable = abi_IXmlCDataSection;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlCDataSection as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlCDataSection {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlCDataSection;{4d04b46f-c8bd-45b4-8899-0400d7c2c60f})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlCDataSection {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlCDataSection {
                    fn from(value: r#XmlCDataSection) -> r#IXmlCDataSection {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlCDataSection {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlCDataSection {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlCharacterData {
                    fn from(value: r#XmlCDataSection) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlCharacterData {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlCharacterData {
                        <r#XmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlNode {
                    fn from(value: r#XmlCDataSection) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlNode {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlNode {
                        <r#XmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlNodeSelector {
                    fn from(value: r#XmlCDataSection) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlNodeSelector {
                        <r#XmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlCDataSection) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlNodeSerializer {
                        <r#XmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for r#IXmlText {
                    fn from(value: r#XmlCDataSection) -> r#IXmlText {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for r#IXmlText {
                    fn from(value: &r#XmlCDataSection) -> r#IXmlText {
                        <r#XmlCDataSection as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlCDataSection> for ::winrt::Object {
                    fn from(value: r#XmlCDataSection) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlCDataSection> for ::winrt::Object {
                    fn from(value: &r#XmlCDataSection) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlComment {
                    ptr: ::winrt::ComPtr<r#XmlComment>,
                }
                impl r#XmlComment {
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlComment {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlComment";
                }
                unsafe impl ::winrt::ComInterface for r#XmlComment {
                    type VTable = abi_IXmlComment;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlComment as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlComment {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlComment;{bca474d5-b61f-4611-9cac-2e92e3476d47})"
                            .to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlComment {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlComment> for r#IXmlComment {
                    fn from(value: r#XmlComment) -> r#IXmlComment {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for r#IXmlComment {
                    fn from(value: &r#XmlComment) -> r#IXmlComment {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlComment> for r#IXmlCharacterData {
                    fn from(value: r#XmlComment) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for r#IXmlCharacterData {
                    fn from(value: &r#XmlComment) -> r#IXmlCharacterData {
                        <r#XmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlComment> for r#IXmlNode {
                    fn from(value: r#XmlComment) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for r#IXmlNode {
                    fn from(value: &r#XmlComment) -> r#IXmlNode {
                        <r#XmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlComment> for r#IXmlNodeSelector {
                    fn from(value: r#XmlComment) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlComment) -> r#IXmlNodeSelector {
                        <r#XmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlComment> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlComment) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlComment) -> r#IXmlNodeSerializer {
                        <r#XmlComment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlComment> for ::winrt::Object {
                    fn from(value: r#XmlComment) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlComment> for ::winrt::Object {
                    fn from(value: &r#XmlComment) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlDocument {
                    ptr: ::winrt::ComPtr<r#XmlDocument>,
                }
                impl r#XmlDocument {
                    pub fn new() -> ::winrt::Result<Self> {
                        ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                            .activate_instance::<Self>()
                    }
                    pub fn r#doctype(&self) -> ::winrt::Result<r#XmlDocumentType> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDocumentType = ::std::mem::zeroed();
                            ((*(*(this))).r#doctype)(
                                this,
                                <r#XmlDocumentType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#implementation(&self) -> ::winrt::Result<r#XmlDomImplementation> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDomImplementation = ::std::mem::zeroed();
                            ((*(*(this))).r#implementation)(
                                this,
                                <r#XmlDomImplementation as ::winrt::RuntimeType>::set_abi(
                                    &mut __ok,
                                ),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#document_element(&self) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#document_element)(
                                this,
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_element<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#create_element)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_document_fragment(
                        &self,
                    ) -> ::winrt::Result<r#XmlDocumentFragment> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlDocumentFragment = ::std::mem::zeroed();
                            ((*(*(this))).r#create_document_fragment)(
                                this,
                                <r#XmlDocumentFragment as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_text_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlText> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlText = ::std::mem::zeroed();
                            ((*(*(this))).r#create_text_node)(
                                this,
                                r#data.into().abi(),
                                <r#XmlText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_comment<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlComment> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlComment = ::std::mem::zeroed();
                            ((*(*(this))).r#create_comment)(
                                this,
                                r#data.into().abi(),
                                <r#XmlComment as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_processing_instruction<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#target: __0,
                        r#data: __1,
                    ) -> ::winrt::Result<r#XmlProcessingInstruction> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlProcessingInstruction = ::std::mem::zeroed();
                            ((*(*(this))).r#create_processing_instruction)(
                                this,
                                r#target.into().abi(),
                                r#data.into().abi(),
                                <r#XmlProcessingInstruction as ::winrt::RuntimeType>::set_abi(
                                    &mut __ok,
                                ),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#create_attribute)(
                                this,
                                r#name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_entity_reference<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#XmlEntityReference> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlEntityReference = ::std::mem::zeroed();
                            ((*(*(this))).r#create_entity_reference)(
                                this,
                                r#name.into().abi(),
                                <r#XmlEntityReference as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_elements_by_tag_name<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#get_elements_by_tag_name)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_cdata_section<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<r#XmlCDataSection> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlCDataSection = ::std::mem::zeroed();
                            ((*(*(this))).r#create_cdata_section)(
                                this,
                                r#data.into().abi(),
                                <r#XmlCDataSection as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#document_uri(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#document_uri)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#create_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#create_element_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#create_element_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_element_by_id<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#element_id: __0,
                    ) -> ::winrt::Result<r#XmlElement> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlElement = ::std::mem::zeroed();
                            ((*(*(this))).r#get_element_by_id)(
                                this,
                                r#element_id.into().abi(),
                                <r#XmlElement as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#import_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                        r#deep: bool,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#import_node)(
                                this,
                                r#node.into().abi(),
                                r#deep,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#load_xml<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xml: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlDocumentIO as ::std::convert::From<&Self>>::from(self)
                            .r#load_xml(r#xml)
                    }
                    pub fn r#load_xml_with_settings<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#xml: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlDocumentIO as ::std::convert::From<&Self>>::from(self)
                            .r#load_xml_with_settings(r#xml, r#load_settings)
                    }
                    pub fn r#save_to_file_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                    >(
                        &self,
                        r#file: __0,
                    ) -> ::winrt::Result<super::super::super::r#foundation::r#IAsyncAction>
                    {
                        <r#IXmlDocumentIO as ::std::convert::From<&Self>>::from(self)
                            .r#save_to_file_async(r#file)
                    }
                    pub fn r#load_xml_from_buffer<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<
                                'a,
                                super::super::super::r#storage::r#streams::r#IBuffer,
                            >,
                        >,
                    >(
                        &self,
                        r#buffer: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlDocumentIO2 as ::std::convert::From<&Self>>::from(self)
                            .r#load_xml_from_buffer(r#buffer)
                    }
                    pub fn r#load_xml_from_buffer_with_settings<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<
                                'a,
                                super::super::super::r#storage::r#streams::r#IBuffer,
                            >,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        &self,
                        r#buffer: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlDocumentIO2 as ::std::convert::From<&Self>>::from(self)
                            .r#load_xml_from_buffer_with_settings(r#buffer, r#load_settings)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                    pub fn r#load_from_uri_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#foundation::r#Uri>,
                        >,
                    >(
                        r#uri: __0,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        ::winrt::factory::<Self, r#IXmlDocumentStatics>()?
                            .r#load_from_uri_async(r#uri)
                    }
                    pub fn r#load_from_uri_with_settings_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#foundation::r#Uri>,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        r#uri: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        ::winrt::factory::<Self, r#IXmlDocumentStatics>()?
                            .r#load_from_uri_with_settings_async(r#uri, r#load_settings)
                    }
                    pub fn r#load_from_file_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                    >(
                        r#file: __0,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        ::winrt::factory::<Self, r#IXmlDocumentStatics>()?
                            .r#load_from_file_async(r#file)
                    }
                    pub fn r#load_from_file_with_settings_async<
                        'a,
                        __0: ::std::convert::Into<
                            ::winrt::Param<'a, super::super::super::r#storage::r#IStorageFile>,
                        >,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#XmlLoadSettings>>,
                    >(
                        r#file: __0,
                        r#load_settings: __1,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#IAsyncOperation<r#XmlDocument>,
                    > {
                        ::winrt::factory::<Self, r#IXmlDocumentStatics>()?
                            .r#load_from_file_with_settings_async(r#file, r#load_settings)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlDocument {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlDocument";
                }
                unsafe impl ::winrt::ComInterface for r#XmlDocument {
                    type VTable = abi_IXmlDocument;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlDocument as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlDocument {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlDocument;{f7f3a506-1e87-42d6-bcfb-b8c809fa5494})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlDocument {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlDocument {
                    fn from(value: r#XmlDocument) -> r#IXmlDocument {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlDocument {
                    fn from(value: &r#XmlDocument) -> r#IXmlDocument {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlDocumentIO {
                    fn from(value: r#XmlDocument) -> r#IXmlDocumentIO {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlDocumentIO {
                    fn from(value: &r#XmlDocument) -> r#IXmlDocumentIO {
                        <r#XmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlDocumentIO2 {
                    fn from(value: r#XmlDocument) -> r#IXmlDocumentIO2 {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlDocumentIO2 {
                    fn from(value: &r#XmlDocument) -> r#IXmlDocumentIO2 {
                        <r#XmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlNode {
                    fn from(value: r#XmlDocument) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlNode {
                    fn from(value: &r#XmlDocument) -> r#IXmlNode {
                        <r#XmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlNodeSelector {
                    fn from(value: r#XmlDocument) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlDocument) -> r#IXmlNodeSelector {
                        <r#XmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlDocument) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlDocument) -> r#IXmlNodeSerializer {
                        <r#XmlDocument as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocument> for ::winrt::Object {
                    fn from(value: r#XmlDocument) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocument> for ::winrt::Object {
                    fn from(value: &r#XmlDocument) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlDocumentFragment {
                    ptr: ::winrt::ComPtr<r#XmlDocumentFragment>,
                }
                impl r#XmlDocumentFragment {
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlDocumentFragment {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlDocumentFragment";
                }
                unsafe impl ::winrt::ComInterface for r#XmlDocumentFragment {
                    type VTable = abi_IXmlDocumentFragment;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlDocumentFragment as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlDocumentFragment {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlDocumentFragment;{e2ea6a96-0c21-44a5-8bc9-9e4a262708ec})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlDocumentFragment {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlDocumentFragment> for r#IXmlDocumentFragment {
                    fn from(value: r#XmlDocumentFragment) -> r#IXmlDocumentFragment {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentFragment> for r#IXmlDocumentFragment {
                    fn from(value: &r#XmlDocumentFragment) -> r#IXmlDocumentFragment {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlDocumentFragment> for r#IXmlNode {
                    fn from(value: r#XmlDocumentFragment) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentFragment> for r#IXmlNode {
                    fn from(value: &r#XmlDocumentFragment) -> r#IXmlNode {
                        <r#XmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentFragment> for r#IXmlNodeSelector {
                    fn from(value: r#XmlDocumentFragment) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentFragment> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlDocumentFragment) -> r#IXmlNodeSelector {
                        <r#XmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentFragment> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlDocumentFragment) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentFragment> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlDocumentFragment) -> r#IXmlNodeSerializer {
                        <r#XmlDocumentFragment as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentFragment> for ::winrt::Object {
                    fn from(value: r#XmlDocumentFragment) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentFragment> for ::winrt::Object {
                    fn from(value: &r#XmlDocumentFragment) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlDocumentType {
                    ptr: ::winrt::ComPtr<r#XmlDocumentType>,
                }
                impl r#XmlDocumentType {
                    pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#entities(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNamedNodeMap = ::std::mem::zeroed();
                            ((*(*(this))).r#entities)(
                                this,
                                <r#XmlNamedNodeMap as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#notations(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNamedNodeMap = ::std::mem::zeroed();
                            ((*(*(this))).r#notations)(
                                this,
                                <r#XmlNamedNodeMap as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlDocumentType {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlDocumentType";
                }
                unsafe impl ::winrt::ComInterface for r#XmlDocumentType {
                    type VTable = abi_IXmlDocumentType;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlDocumentType as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlDocumentType {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlDocumentType;{f7342425-9781-4964-8e94-9b1c6dfc9bc7})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlDocumentType {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlDocumentType> for r#IXmlDocumentType {
                    fn from(value: r#XmlDocumentType) -> r#IXmlDocumentType {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentType> for r#IXmlDocumentType {
                    fn from(value: &r#XmlDocumentType) -> r#IXmlDocumentType {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlDocumentType> for r#IXmlNode {
                    fn from(value: r#XmlDocumentType) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentType> for r#IXmlNode {
                    fn from(value: &r#XmlDocumentType) -> r#IXmlNode {
                        <r#XmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentType> for r#IXmlNodeSelector {
                    fn from(value: r#XmlDocumentType) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentType> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlDocumentType) -> r#IXmlNodeSelector {
                        <r#XmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentType> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlDocumentType) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentType> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlDocumentType) -> r#IXmlNodeSerializer {
                        <r#XmlDocumentType as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlDocumentType> for ::winrt::Object {
                    fn from(value: r#XmlDocumentType) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDocumentType> for ::winrt::Object {
                    fn from(value: &r#XmlDocumentType) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlDomImplementation {
                    ptr: ::winrt::ComPtr<r#XmlDomImplementation>,
                }
                impl r#XmlDomImplementation {
                    pub fn r#has_feature<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#feature: __0,
                        r#version: __1,
                    ) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#has_feature)(
                                this,
                                r#feature.into().abi(),
                                r#version.into().abi(),
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                }
                impl ::winrt::RuntimeName for r#XmlDomImplementation {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlDomImplementation";
                }
                unsafe impl ::winrt::ComInterface for r#XmlDomImplementation {
                    type VTable = abi_IXmlDomImplementation;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlDomImplementation as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlDomImplementation {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlDomImplementation;{6de58132-f11d-4fbb-8cc6-583cba93112f})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlDomImplementation {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlDomImplementation> for r#IXmlDomImplementation {
                    fn from(value: r#XmlDomImplementation) -> r#IXmlDomImplementation {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDomImplementation> for r#IXmlDomImplementation {
                    fn from(value: &r#XmlDomImplementation) -> r#IXmlDomImplementation {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlDomImplementation> for ::winrt::Object {
                    fn from(value: r#XmlDomImplementation) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlDomImplementation> for ::winrt::Object {
                    fn from(value: &r#XmlDomImplementation) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlElement {
                    ptr: ::winrt::ComPtr<r#XmlElement>,
                }
                impl r#XmlElement {
                    pub fn r#tag_name(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#tag_name)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute)(
                                this,
                                r#attribute_name.into().abi(),
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                        r#attribute_value: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_attribute)(
                                this,
                                r#attribute_name.into().abi(),
                                r#attribute_value.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#remove_attribute<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#remove_attribute)(this, r#attribute_name.into().abi())
                                .ok()
                        }
                    }
                    pub fn r#get_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#attribute_name: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_node)(
                                this,
                                r#attribute_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#new_attribute: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#set_attribute_node)(
                                this,
                                r#new_attribute.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_attribute_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#attribute_node: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_attribute_node)(
                                this,
                                r#attribute_node.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_elements_by_tag_name<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#tag_name: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlNodeList = ::std::mem::zeroed();
                            ((*(*(this))).r#get_elements_by_tag_name)(
                                this,
                                r#tag_name.into().abi(),
                                <r#XmlNodeList as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#qualified_name: __1,
                        r#value: __2,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#qualified_name.into().abi(),
                                r#value.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#get_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_attribute_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#remove_attribute_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn r#set_attribute_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#XmlAttribute>>,
                    >(
                        &self,
                        r#new_attribute: __0,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#set_attribute_node_ns)(
                                this,
                                r#new_attribute.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_attribute_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#local_name: __1,
                    ) -> ::winrt::Result<r#XmlAttribute> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#XmlAttribute = ::std::mem::zeroed();
                            ((*(*(this))).r#get_attribute_node_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#local_name.into().abi(),
                                <r#XmlAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlElement {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlElement";
                }
                unsafe impl ::winrt::ComInterface for r#XmlElement {
                    type VTable = abi_IXmlElement;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlElement as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlElement {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlElement;{2dfb8a1f-6b10-4ef8-9f83-efcce8faec37})"
                            .to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlElement {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlElement> for r#IXmlElement {
                    fn from(value: r#XmlElement) -> r#IXmlElement {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlElement> for r#IXmlElement {
                    fn from(value: &r#XmlElement) -> r#IXmlElement {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlElement> for r#IXmlNode {
                    fn from(value: r#XmlElement) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlElement> for r#IXmlNode {
                    fn from(value: &r#XmlElement) -> r#IXmlNode {
                        <r#XmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlElement> for r#IXmlNodeSelector {
                    fn from(value: r#XmlElement) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlElement> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlElement) -> r#IXmlNodeSelector {
                        <r#XmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlElement> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlElement) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlElement> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlElement) -> r#IXmlNodeSerializer {
                        <r#XmlElement as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlElement> for ::winrt::Object {
                    fn from(value: r#XmlElement) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlElement> for ::winrt::Object {
                    fn from(value: &r#XmlElement) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlEntityReference {
                    ptr: ::winrt::ComPtr<r#XmlEntityReference>,
                }
                impl r#XmlEntityReference {
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlEntityReference {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlEntityReference";
                }
                unsafe impl ::winrt::ComInterface for r#XmlEntityReference {
                    type VTable = abi_IXmlEntityReference;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlEntityReference as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlEntityReference {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlEntityReference;{2e2f47bc-c3d0-4ccf-bb86-0ab8c36a61cf})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlEntityReference {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlEntityReference> for r#IXmlEntityReference {
                    fn from(value: r#XmlEntityReference) -> r#IXmlEntityReference {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlEntityReference> for r#IXmlEntityReference {
                    fn from(value: &r#XmlEntityReference) -> r#IXmlEntityReference {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlEntityReference> for r#IXmlNode {
                    fn from(value: r#XmlEntityReference) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlEntityReference> for r#IXmlNode {
                    fn from(value: &r#XmlEntityReference) -> r#IXmlNode {
                        <r#XmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlEntityReference> for r#IXmlNodeSelector {
                    fn from(value: r#XmlEntityReference) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlEntityReference> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlEntityReference) -> r#IXmlNodeSelector {
                        <r#XmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlEntityReference> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlEntityReference) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlEntityReference> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlEntityReference) -> r#IXmlNodeSerializer {
                        <r#XmlEntityReference as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlEntityReference> for ::winrt::Object {
                    fn from(value: r#XmlEntityReference) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlEntityReference> for ::winrt::Object {
                    fn from(value: &r#XmlEntityReference) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlLoadSettings {
                    ptr: ::winrt::ComPtr<r#XmlLoadSettings>,
                }
                impl r#XmlLoadSettings {
                    pub fn new() -> ::winrt::Result<Self> {
                        ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                            .activate_instance::<Self>()
                    }
                    pub fn r#max_element_depth(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#max_element_depth)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_max_element_depth(&self, r#value: u32) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_max_element_depth)(this, r#value).ok() }
                    }
                    pub fn r#prohibit_dtd(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#prohibit_dtd)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_prohibit_dtd(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_prohibit_dtd)(this, r#value).ok() }
                    }
                    pub fn r#resolve_externals(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#resolve_externals)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_resolve_externals(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_resolve_externals)(this, r#value).ok() }
                    }
                    pub fn r#validate_on_parse(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#validate_on_parse)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_validate_on_parse(&self, r#value: bool) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_validate_on_parse)(this, r#value).ok() }
                    }
                    pub fn r#element_content_white_space(&self) -> ::winrt::Result<bool> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: bool = ::std::mem::zeroed();
                            ((*(*(this))).r#element_content_white_space)(
                                this,
                                <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_element_content_white_space(
                        &self,
                        r#value: bool,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            ((*(*(this))).r#set_element_content_white_space)(this, r#value).ok()
                        }
                    }
                }
                impl ::winrt::RuntimeName for r#XmlLoadSettings {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlLoadSettings";
                }
                unsafe impl ::winrt::ComInterface for r#XmlLoadSettings {
                    type VTable = abi_IXmlLoadSettings;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlLoadSettings as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlLoadSettings {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlLoadSettings;{58aa07a8-fed6-46f7-b4c5-fb1ba72108d6})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlLoadSettings {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlLoadSettings> for r#IXmlLoadSettings {
                    fn from(value: r#XmlLoadSettings) -> r#IXmlLoadSettings {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlLoadSettings> for r#IXmlLoadSettings {
                    fn from(value: &r#XmlLoadSettings) -> r#IXmlLoadSettings {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlLoadSettings> for ::winrt::Object {
                    fn from(value: r#XmlLoadSettings) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlLoadSettings> for ::winrt::Object {
                    fn from(value: &r#XmlLoadSettings) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlNamedNodeMap {
                    ptr: ::winrt::ComPtr<r#XmlNamedNodeMap>,
                }
                impl r#XmlNamedNodeMap {
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#length)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#item(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#item)(
                                this,
                                r#index,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#get_named_item)(
                                this,
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#set_named_item)(
                                this,
                                r#node.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_named_item<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#name: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_named_item)(
                                this,
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#get_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#name: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#get_named_item_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#remove_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#namespace_uri: __0,
                        r#name: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#remove_named_item_ns)(
                                this,
                                r#namespace_uri.into().abi(),
                                r#name.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_named_item_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#set_named_item_ns)(
                                this,
                                r#node.into().abi(),
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#first(
                        &self,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#collections::r#IIterator<r#IXmlNode>,
                    > {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IIterable :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#first ( )
                    }
                    pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_at ( r#index , )
                    }
                    pub fn r#size(&self) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#size ( )
                    }
                    pub fn r#index_of<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#value: __0,
                        r#index: &mut u32,
                    ) -> ::winrt::Result<bool> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#index_of ( r#value , r#index , )
                    }
                    pub fn r#get_many(
                        &self,
                        r#start_index: u32,
                        r#items: &mut [r#IXmlNode],
                    ) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_many ( r#start_index , r#items , )
                    }
                }
                impl ::winrt::RuntimeName for r#XmlNamedNodeMap {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlNamedNodeMap";
                }
                unsafe impl ::winrt::ComInterface for r#XmlNamedNodeMap {
                    type VTable = abi_IXmlNamedNodeMap;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlNamedNodeMap as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlNamedNodeMap {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlNamedNodeMap;{b3a69eb0-aab0-4b82-a6fa-b1453f7c021b})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlNamedNodeMap {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlNamedNodeMap> for r#IXmlNamedNodeMap {
                    fn from(value: r#XmlNamedNodeMap) -> r#IXmlNamedNodeMap {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlNamedNodeMap> for r#IXmlNamedNodeMap {
                    fn from(value: &r#XmlNamedNodeMap) -> r#IXmlNamedNodeMap {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: r#XmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: &r#XmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        <r#XmlNamedNodeMap as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: r#XmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlNamedNodeMap>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: &r#XmlNamedNodeMap,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        <r#XmlNamedNodeMap as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlNamedNodeMap> for ::winrt::Object {
                    fn from(value: r#XmlNamedNodeMap) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlNamedNodeMap> for ::winrt::Object {
                    fn from(value: &r#XmlNamedNodeMap) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::iter::IntoIterator for r#XmlNamedNodeMap {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                impl<'a> ::std::iter::IntoIterator for &'a r#XmlNamedNodeMap {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlNodeList {
                    ptr: ::winrt::ComPtr<r#XmlNodeList>,
                }
                impl r#XmlNodeList {
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: u32 = ::std::mem::zeroed();
                            ((*(*(this))).r#length)(
                                this,
                                <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#item(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlNode = ::std::mem::zeroed();
                            ((*(*(this))).r#item)(
                                this,
                                r#index,
                                <r#IXmlNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#first(
                        &self,
                    ) -> ::winrt::Result<
                        super::super::super::r#foundation::r#collections::r#IIterator<r#IXmlNode>,
                    > {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IIterable :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#first ( )
                    }
                    pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IXmlNode> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_at ( r#index , )
                    }
                    pub fn r#size(&self) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#size ( )
                    }
                    pub fn r#index_of<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#value: __0,
                        r#index: &mut u32,
                    ) -> ::winrt::Result<bool> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#index_of ( r#value , r#index , )
                    }
                    pub fn r#get_many(
                        &self,
                        r#start_index: u32,
                        r#items: &mut [r#IXmlNode],
                    ) -> ::winrt::Result<u32> {
                        < super :: super :: super :: r#foundation :: r#collections :: r#IVectorView :: < r#IXmlNode > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_many ( r#start_index , r#items , )
                    }
                }
                impl ::winrt::RuntimeName for r#XmlNodeList {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlNodeList";
                }
                unsafe impl ::winrt::ComInterface for r#XmlNodeList {
                    type VTable = abi_IXmlNodeList;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlNodeList as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlNodeList {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlNodeList;{8c60ad77-83a4-4ec1-9c54-7ba429e13da6})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlNodeList {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlNodeList> for r#IXmlNodeList {
                    fn from(value: r#XmlNodeList) -> r#IXmlNodeList {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlNodeList> for r#IXmlNodeList {
                    fn from(value: &r#XmlNodeList) -> r#IXmlNodeList {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: r#XmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                {
                    fn from(
                        value: &r#XmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IIterable<r#IXmlNode>
                    {
                        <r#XmlNodeList as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: r#XmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlNodeList>
                    for super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                {
                    fn from(
                        value: &r#XmlNodeList,
                    ) -> super::super::super::r#foundation::r#collections::r#IVectorView<r#IXmlNode>
                    {
                        <r#XmlNodeList as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlNodeList> for ::winrt::Object {
                    fn from(value: r#XmlNodeList) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlNodeList> for ::winrt::Object {
                    fn from(value: &r#XmlNodeList) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::iter::IntoIterator for r#XmlNodeList {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                impl<'a> ::std::iter::IntoIterator for &'a r#XmlNodeList {
                    type Item = r#IXmlNode;
                    type IntoIter =
                        super::super::super::r#foundation::r#collections::VectorViewIterator<
                            Self::Item,
                        >;
                    fn into_iter(self) -> Self::IntoIter {
                        super::super::super::r#foundation::r#collections::VectorViewIterator::new(
                            self.into(),
                        )
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlProcessingInstruction {
                    ptr: ::winrt::ComPtr<r#XmlProcessingInstruction>,
                }
                impl r#XmlProcessingInstruction {
                    pub fn r#target(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#target)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                            ((*(*(this))).r#data)(
                                this,
                                <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe { ((*(*(this))).r#set_data)(this, r#value.into().abi()).ok() }
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlProcessingInstruction {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlProcessingInstruction";
                }
                unsafe impl ::winrt::ComInterface for r#XmlProcessingInstruction {
                    type VTable = abi_IXmlProcessingInstruction;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlProcessingInstruction as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlProcessingInstruction {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlProcessingInstruction;{2707fd1e-1e92-4ece-b6f4-26f069078ddc})" . to_owned ( )
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlProcessingInstruction {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlProcessingInstruction> for r#IXmlProcessingInstruction {
                    fn from(value: r#XmlProcessingInstruction) -> r#IXmlProcessingInstruction {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlProcessingInstruction> for r#IXmlProcessingInstruction {
                    fn from(value: &r#XmlProcessingInstruction) -> r#IXmlProcessingInstruction {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlProcessingInstruction> for r#IXmlNode {
                    fn from(value: r#XmlProcessingInstruction) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlProcessingInstruction> for r#IXmlNode {
                    fn from(value: &r#XmlProcessingInstruction) -> r#IXmlNode {
                        <r#XmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlProcessingInstruction> for r#IXmlNodeSelector {
                    fn from(value: r#XmlProcessingInstruction) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlProcessingInstruction> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlProcessingInstruction) -> r#IXmlNodeSelector {
                        <r#XmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlProcessingInstruction> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlProcessingInstruction) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlProcessingInstruction> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlProcessingInstruction) -> r#IXmlNodeSerializer {
                        <r#XmlProcessingInstruction as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlProcessingInstruction> for ::winrt::Object {
                    fn from(value: r#XmlProcessingInstruction) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlProcessingInstruction> for ::winrt::Object {
                    fn from(value: &r#XmlProcessingInstruction) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                #[repr(transparent)]
                #[derive(Default, Clone, PartialEq)]
                pub struct r#XmlText {
                    ptr: ::winrt::ComPtr<r#XmlText>,
                }
                impl r#XmlText {
                    pub fn r#split_text(&self, r#offset: u32) -> ::winrt::Result<r#IXmlText> {
                        let this =
                            <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                        if this.is_null() {
                            panic!("The `this` pointer was null when calling method");
                        }
                        unsafe {
                            let mut __ok: r#IXmlText = ::std::mem::zeroed();
                            ((*(*(this))).r#split_text)(
                                this,
                                r#offset,
                                <r#IXmlText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                            )
                            .and_then(|| __ok)
                        }
                    }
                    pub fn r#data(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#data()
                    }
                    pub fn r#set_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#set_data(r#value)
                    }
                    pub fn r#length(&self) -> ::winrt::Result<u32> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self).r#length()
                    }
                    pub fn r#substring_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#substring_data(r#offset, r#count)
                    }
                    pub fn r#append_data<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#data: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#append_data(r#data)
                    }
                    pub fn r#insert_data<
                        'a,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#data: __1,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#insert_data(r#offset, r#data)
                    }
                    pub fn r#delete_data(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#delete_data(r#offset, r#count)
                    }
                    pub fn r#replace_data<
                        'a,
                        __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#offset: u32,
                        r#count: u32,
                        r#data: __2,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlCharacterData as ::std::convert::From<&Self>>::from(self)
                            .r#replace_data(r#offset, r#count, r#data)
                    }
                    pub fn r#node_value(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                    }
                    pub fn r#set_node_value<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_node_value(r#value)
                    }
                    pub fn r#node_type(&self) -> ::winrt::Result<r#NodeType> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_type()
                    }
                    pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                    }
                    pub fn r#parent_node(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#parent_node()
                    }
                    pub fn r#child_nodes(&self) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#child_nodes()
                    }
                    pub fn r#first_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#first_child()
                    }
                    pub fn r#last_child(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#last_child()
                    }
                    pub fn r#previous_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#previous_sibling()
                    }
                    pub fn r#next_sibling(&self) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#next_sibling()
                    }
                    pub fn r#attributes(&self) -> ::winrt::Result<r#XmlNamedNodeMap> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#attributes()
                    }
                    pub fn r#has_child_nodes(&self) -> ::winrt::Result<bool> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#has_child_nodes()
                    }
                    pub fn r#owner_document(&self) -> ::winrt::Result<r#XmlDocument> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#owner_document()
                    }
                    pub fn r#insert_before<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#insert_before(r#new_child, r#reference_child)
                    }
                    pub fn r#replace_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                        r#reference_child: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#replace_child(r#new_child, r#reference_child)
                    }
                    pub fn r#remove_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#child_node: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#remove_child(r#child_node)
                    }
                    pub fn r#append_child<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, r#IXmlNode>>,
                    >(
                        &self,
                        r#new_child: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#append_child(r#new_child)
                    }
                    pub fn r#clone_node(&self, r#deep: bool) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#clone_node(r#deep)
                    }
                    pub fn r#namespace_uri(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#namespace_uri()
                    }
                    pub fn r#local_name(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#local_name()
                    }
                    pub fn r#prefix(&self) -> ::winrt::Result<::winrt::Object> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#prefix()
                    }
                    pub fn r#normalize(&self) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self).r#normalize()
                    }
                    pub fn r#set_prefix<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNode as ::std::convert::From<&Self>>::from(self)
                            .r#set_prefix(r#value)
                    }
                    pub fn r#select_single_node<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node(r#xpath)
                    }
                    pub fn r#select_nodes<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#xpath: __0,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes(r#xpath)
                    }
                    pub fn r#select_single_node_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#IXmlNode> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_single_node_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#select_nodes_ns<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                        __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                    >(
                        &self,
                        r#xpath: __0,
                        r#namespaces: __1,
                    ) -> ::winrt::Result<r#XmlNodeList> {
                        <r#IXmlNodeSelector as ::std::convert::From<&Self>>::from(self)
                            .r#select_nodes_ns(r#xpath, r#namespaces)
                    }
                    pub fn r#get_xml(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#get_xml()
                    }
                    pub fn r#inner_text(&self) -> ::winrt::Result<::winrt::HString> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#inner_text()
                    }
                    pub fn r#set_inner_text<
                        'a,
                        __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    >(
                        &self,
                        r#value: __0,
                    ) -> ::winrt::Result<()> {
                        <r#IXmlNodeSerializer as ::std::convert::From<&Self>>::from(self)
                            .r#set_inner_text(r#value)
                    }
                }
                impl ::winrt::RuntimeName for r#XmlText {
                    const NAME: &'static str = "Windows.Data.Xml.Dom.XmlText";
                }
                unsafe impl ::winrt::ComInterface for r#XmlText {
                    type VTable = abi_IXmlText;
                    fn iid() -> ::winrt::Guid {
                        <r#IXmlText as ::winrt::ComInterface>::iid()
                    }
                }
                unsafe impl ::winrt::RuntimeType for r#XmlText {
                    type Abi = ::winrt::RawComPtr<Self>;
                    fn signature() -> String {
                        "rc(Windows.Data.Xml.Dom.XmlText;{f931a4cb-308d-4760-a1d5-43b67450ac7e})"
                            .to_owned()
                    }
                    fn abi(&self) -> Self::Abi {
                        <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                    }
                    fn set_abi(&mut self) -> *mut Self::Abi {
                        self.ptr.set_abi()
                    }
                }
                impl ::std::fmt::Debug for r#XmlText {
                    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                        write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                    }
                }
                impl ::std::convert::From<r#XmlText> for r#IXmlText {
                    fn from(value: r#XmlText) -> r#IXmlText {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlText> for r#IXmlText {
                    fn from(value: &r#XmlText) -> r#IXmlText {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
                impl ::std::convert::From<r#XmlText> for r#IXmlCharacterData {
                    fn from(value: r#XmlText) -> r#IXmlCharacterData {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlText> for r#IXmlCharacterData {
                    fn from(value: &r#XmlText) -> r#IXmlCharacterData {
                        <r#XmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlText> for r#IXmlNode {
                    fn from(value: r#XmlText) -> r#IXmlNode {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlText> for r#IXmlNode {
                    fn from(value: &r#XmlText) -> r#IXmlNode {
                        <r#XmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlText> for r#IXmlNodeSelector {
                    fn from(value: r#XmlText) -> r#IXmlNodeSelector {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlText> for r#IXmlNodeSelector {
                    fn from(value: &r#XmlText) -> r#IXmlNodeSelector {
                        <r#XmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlText> for r#IXmlNodeSerializer {
                    fn from(value: r#XmlText) -> r#IXmlNodeSerializer {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&r#XmlText> for r#IXmlNodeSerializer {
                    fn from(value: &r#XmlText) -> r#IXmlNodeSerializer {
                        <r#XmlText as ::winrt::ComInterface>::query(value)
                    }
                }
                impl ::std::convert::From<r#XmlText> for ::winrt::Object {
                    fn from(value: r#XmlText) -> ::winrt::Object {
                        unsafe { ::std::mem::transmute(value) }
                    }
                }
                impl ::std::convert::From<&r#XmlText> for ::winrt::Object {
                    fn from(value: &r#XmlText) -> ::winrt::Object {
                        ::std::convert::From::from(::std::clone::Clone::clone(value))
                    }
                }
            }
        }
    }
    pub mod r#foundation {
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncActionCompletedHandler {
            ptr: ::winrt::ComPtr<r#AsyncActionCompletedHandler>,
        }
        impl r#AsyncActionCompletedHandler {
            pub fn r#invoke<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#IAsyncAction>>>(
                &self,
                r#async_info: __0,
                r#async_status: r#AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        ::winrt::RuntimeType::abi(&r#async_status),
                    )
                    .ok()
                }
            }
            pub fn new<F: FnMut(&r#IAsyncAction, r#AsyncStatus) -> ::winrt::Result<()>>(
                invoke: F,
            ) -> Self {
                impl_AsyncActionCompletedHandler::<F>::new(invoke)
            }
        }
        unsafe impl ::winrt::ComInterface for r#AsyncActionCompletedHandler {
            type VTable = abi_AsyncActionCompletedHandler;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2767019137,
                    30409,
                    16573,
                    [139, 230, 177, 217, 15, 178, 10, 231],
                )
            }
        }
        impl ::std::clone::Clone for r#AsyncActionCompletedHandler {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncActionCompletedHandler {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncActionCompletedHandler,
                <r#IAsyncAction as ::winrt::RuntimeType>::Abi,
                <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#AsyncActionCompletedHandler {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "delegate({a4ed5c81-76c9-40bd-8be6-b1d90fb20ae7})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#AsyncActionCompletedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncActionCompletedHandler<
            F: FnMut(&r#IAsyncAction, r#AsyncStatus) -> ::winrt::Result<()>,
        > {
            vtable: *const abi_AsyncActionCompletedHandler,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<F: FnMut(&r#IAsyncAction, r#AsyncStatus) -> ::winrt::Result<()>>
            impl_AsyncActionCompletedHandler<F>
        {
            const VTABLE: abi_AsyncActionCompletedHandler = abi_AsyncActionCompletedHandler {
                unknown_query_interface:
                    impl_AsyncActionCompletedHandler::<F>::unknown_query_interface,
                unknown_add_ref: impl_AsyncActionCompletedHandler::<F>::unknown_add_ref,
                unknown_release: impl_AsyncActionCompletedHandler::<F>::unknown_release,
                invoke: impl_AsyncActionCompletedHandler::<F>::invoke,
            };
            pub fn new(invoke: F) -> r#AsyncActionCompletedHandler {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncActionCompletedHandler = std::mem::zeroed();
                    *<r#AsyncActionCompletedHandler as ::winrt::RuntimeType>::set_abi(
                        &mut result,
                    ) = ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                        as *const *const abi_AsyncActionCompletedHandler;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == &<r#AsyncActionCompletedHandler as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncActionCompletedHandler,
                r#async_info: <r#IAsyncAction as ::winrt::RuntimeType>::Abi,
                r#async_status: <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        *::winrt::RuntimeType::from_abi(&r#async_status),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncActionProgressHandler<r#TProgress>
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#AsyncActionProgressHandler<r#TProgress>>,
            __0: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> r#AsyncActionProgressHandler<r#TProgress> {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IAsyncActionWithProgress<r#TProgress>>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#TProgress>>,
            >(
                &self,
                r#async_info: __0,
                r#progress_info: __1,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        r#progress_info.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                    &r#IAsyncActionWithProgress<r#TProgress>,
                    &r#TProgress,
                ) -> ::winrt::Result<()>,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncActionProgressHandler::<r#TProgress, F>::new(invoke)
            }
        }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for r#AsyncActionProgressHandler<r#TProgress>
        {
            type VTable = abi_AsyncActionProgressHandler<r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for r#AsyncActionProgressHandler<r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncActionProgressHandler<r#TProgress>
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncActionProgressHandler<r#TProgress>,
                <r#IAsyncActionWithProgress<r#TProgress> as ::winrt::RuntimeType>::Abi,
                <r#TProgress as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TProgress>,
        }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for r#AsyncActionProgressHandler<r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{6d844858-0cff-4590-ae89-95a5a5c8b4b8}",
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::fmt::Debug
            for r#AsyncActionProgressHandler<r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncActionProgressHandler<
            r#TProgress,
            F: FnMut(&r#IAsyncActionWithProgress<r#TProgress>, &r#TProgress) -> ::winrt::Result<()>,
        >
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncActionProgressHandler<r#TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                    &r#IAsyncActionWithProgress<r#TProgress>,
                    &r#TProgress,
                ) -> ::winrt::Result<()>,
            > impl_AsyncActionProgressHandler<r#TProgress, F>
        {
            const VTABLE: abi_AsyncActionProgressHandler<r#TProgress> =
                abi_AsyncActionProgressHandler::<r#TProgress> {
                    unknown_query_interface:
                        impl_AsyncActionProgressHandler::<r#TProgress, F>::unknown_query_interface,
                    unknown_add_ref:
                        impl_AsyncActionProgressHandler::<r#TProgress, F>::unknown_add_ref,
                    unknown_release:
                        impl_AsyncActionProgressHandler::<r#TProgress, F>::unknown_release,
                    invoke: impl_AsyncActionProgressHandler::<r#TProgress, F>::invoke,
                    __0: ::std::marker::PhantomData::<r#TProgress>,
                };
            pub fn new(invoke: F) -> r#AsyncActionProgressHandler<r#TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncActionProgressHandler<r#TProgress> = std::mem::zeroed();
                    *<r#AsyncActionProgressHandler<r#TProgress> as ::winrt::RuntimeType>::set_abi(
                        &mut result,
                    ) = ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                        as *const *const abi_AsyncActionProgressHandler<r#TProgress>;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#AsyncActionProgressHandler :: < r#TProgress > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncActionProgressHandler<r#TProgress>,
                r#async_info : < r#IAsyncActionWithProgress :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi,
                r#progress_info: <r#TProgress as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        ::winrt::RuntimeType::from_abi(&r#progress_info),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#AsyncActionWithProgressCompletedHandler<r#TProgress>>,
            __0: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static>
            r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IAsyncActionWithProgress<r#TProgress>>>,
            >(
                &self,
                r#async_info: __0,
                r#async_status: r#AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        ::winrt::RuntimeType::abi(&r#async_status),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                    &r#IAsyncActionWithProgress<r#TProgress>,
                    r#AsyncStatus,
                ) -> ::winrt::Result<()>,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncActionWithProgressCompletedHandler::<r#TProgress, F>::new(invoke)
            }
        }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        {
            type VTable = abi_AsyncActionWithProgressCompletedHandler<r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncActionWithProgressCompletedHandler<r#TProgress>
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncActionWithProgressCompletedHandler<r#TProgress>,
                <r#IAsyncActionWithProgress<r#TProgress> as ::winrt::RuntimeType>::Abi,
                <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TProgress>,
        }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{9c029f91-cc84-44fd-ac26-0a6c4e555281}",
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::fmt::Debug
            for r#AsyncActionWithProgressCompletedHandler<r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncActionWithProgressCompletedHandler<
            r#TProgress,
            F: FnMut(&r#IAsyncActionWithProgress<r#TProgress>, r#AsyncStatus) -> ::winrt::Result<()>,
        >
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncActionWithProgressCompletedHandler<r#TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                    &r#IAsyncActionWithProgress<r#TProgress>,
                    r#AsyncStatus,
                ) -> ::winrt::Result<()>,
            > impl_AsyncActionWithProgressCompletedHandler<r#TProgress, F>
        {
            const VTABLE : abi_AsyncActionWithProgressCompletedHandler < r#TProgress > = abi_AsyncActionWithProgressCompletedHandler :: < r#TProgress > { unknown_query_interface : impl_AsyncActionWithProgressCompletedHandler :: < r#TProgress , F > :: unknown_query_interface , unknown_add_ref : impl_AsyncActionWithProgressCompletedHandler :: < r#TProgress , F > :: unknown_add_ref , unknown_release : impl_AsyncActionWithProgressCompletedHandler :: < r#TProgress , F > :: unknown_release , invoke : impl_AsyncActionWithProgressCompletedHandler :: < r#TProgress , F > :: invoke , __0 : :: std :: marker :: PhantomData :: < r#TProgress > , } ;
            pub fn new(invoke: F) -> r#AsyncActionWithProgressCompletedHandler<r#TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncActionWithProgressCompletedHandler<r#TProgress> =
                        std::mem::zeroed();
                    * < r#AsyncActionWithProgressCompletedHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut result ) = :: std :: boxed :: Box :: into_raw ( :: std :: boxed :: Box :: new ( value ) ) as * const * const abi_AsyncActionWithProgressCompletedHandler < r#TProgress > ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#AsyncActionWithProgressCompletedHandler :: < r#TProgress > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncActionWithProgressCompletedHandler<r#TProgress>,
                r#async_info : < r#IAsyncActionWithProgress :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi,
                r#async_status: <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        *::winrt::RuntimeType::from_abi(&r#async_status),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncOperationCompletedHandler<r#TResult>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#AsyncOperationCompletedHandler<r#TResult>>,
            __0: ::std::marker::PhantomData<r#TResult>,
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> r#AsyncOperationCompletedHandler<r#TResult> {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IAsyncOperation<r#TResult>>>,
            >(
                &self,
                r#async_info: __0,
                r#async_status: r#AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        ::winrt::RuntimeType::abi(&r#async_status),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(&r#IAsyncOperation<r#TResult>, r#AsyncStatus) -> ::winrt::Result<()>,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationCompletedHandler::<r#TResult, F>::new(invoke)
            }
        }
        unsafe impl<r#TResult: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for r#AsyncOperationCompletedHandler<r#TResult>
        {
            type VTable = abi_AsyncOperationCompletedHandler<r#TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for r#AsyncOperationCompletedHandler<r#TResult>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncOperationCompletedHandler<r#TResult>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncOperationCompletedHandler<r#TResult>,
                <r#IAsyncOperation<r#TResult> as ::winrt::RuntimeType>::Abi,
                <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TResult>,
        }
        unsafe impl<r#TResult: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for r#AsyncOperationCompletedHandler<r#TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{fcdcf02c-e5d8-4478-915a-4d90b74b83a5}",
                    <r#TResult as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> ::std::fmt::Debug
            for r#AsyncOperationCompletedHandler<r#TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationCompletedHandler<
            r#TResult,
            F: FnMut(&r#IAsyncOperation<r#TResult>, r#AsyncStatus) -> ::winrt::Result<()>,
        >
        where
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationCompletedHandler<r#TResult>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                F: FnMut(&r#IAsyncOperation<r#TResult>, r#AsyncStatus) -> ::winrt::Result<()>,
            > impl_AsyncOperationCompletedHandler<r#TResult, F>
        {
            const VTABLE: abi_AsyncOperationCompletedHandler<r#TResult> =
                abi_AsyncOperationCompletedHandler::<r#TResult> {
                    unknown_query_interface:
                        impl_AsyncOperationCompletedHandler::<r#TResult, F>::unknown_query_interface,
                    unknown_add_ref:
                        impl_AsyncOperationCompletedHandler::<r#TResult, F>::unknown_add_ref,
                    unknown_release:
                        impl_AsyncOperationCompletedHandler::<r#TResult, F>::unknown_release,
                    invoke: impl_AsyncOperationCompletedHandler::<r#TResult, F>::invoke,
                    __0: ::std::marker::PhantomData::<r#TResult>,
                };
            pub fn new(invoke: F) -> r#AsyncOperationCompletedHandler<r#TResult> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncOperationCompletedHandler<r#TResult> =
                        std::mem::zeroed();
                    * < r#AsyncOperationCompletedHandler :: < r#TResult > as :: winrt :: RuntimeType > :: set_abi ( & mut result ) = :: std :: boxed :: Box :: into_raw ( :: std :: boxed :: Box :: new ( value ) ) as * const * const abi_AsyncOperationCompletedHandler < r#TResult > ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#AsyncOperationCompletedHandler :: < r#TResult > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncOperationCompletedHandler<r#TResult>,
                r#async_info: <r#IAsyncOperation<r#TResult> as ::winrt::RuntimeType>::Abi,
                r#async_status: <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        *::winrt::RuntimeType::from_abi(&r#async_status),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#AsyncOperationProgressHandler<r#TResult, r#TProgress>>,
            __0: ::std::marker::PhantomData<r#TResult>,
            __1: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<'a, r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>,
                >,
                __1: ::std::convert::Into<::winrt::Param<'a, r#TProgress>>,
            >(
                &self,
                r#async_info: __0,
                r#progress_info: __1,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        r#progress_info.into().abi(),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                    &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                    &r#TProgress,
                ) -> ::winrt::Result<()>,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationProgressHandler::<r#TResult, r#TProgress, F>::new(invoke)
            }
        }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface for r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        {
            type VTable = abi_AsyncOperationProgressHandler<r#TResult, r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone for r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TResult>,
                    __1: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncOperationProgressHandler<r#TResult, r#TProgress>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncOperationProgressHandler<r#TResult, r#TProgress>,
                <r#IAsyncOperationWithProgress<r#TResult, r#TProgress> as ::winrt::RuntimeType>::Abi,
                <r#TProgress as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TResult>,
            __1: ::std::marker::PhantomData<r#TProgress>,
        }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType for r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{55690902-0aab-421a-8778-f8ce5026d758}",
                    <r#TResult as ::winrt::RuntimeType>::signature(),
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for r#AsyncOperationProgressHandler<r#TResult, r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationProgressHandler<
            r#TResult,
            r#TProgress,
            F: FnMut(
                &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                &r#TProgress,
            ) -> ::winrt::Result<()>,
        >
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationProgressHandler<r#TResult, r#TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                    &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                    &r#TProgress,
                ) -> ::winrt::Result<()>,
            > impl_AsyncOperationProgressHandler<r#TResult, r#TProgress, F>
        {
            const VTABLE : abi_AsyncOperationProgressHandler < r#TResult , r#TProgress > = abi_AsyncOperationProgressHandler :: < r#TResult , r#TProgress > { unknown_query_interface : impl_AsyncOperationProgressHandler :: < r#TResult , r#TProgress , F > :: unknown_query_interface , unknown_add_ref : impl_AsyncOperationProgressHandler :: < r#TResult , r#TProgress , F > :: unknown_add_ref , unknown_release : impl_AsyncOperationProgressHandler :: < r#TResult , r#TProgress , F > :: unknown_release , invoke : impl_AsyncOperationProgressHandler :: < r#TResult , r#TProgress , F > :: invoke , __0 : :: std :: marker :: PhantomData :: < r#TResult > , __1 : :: std :: marker :: PhantomData :: < r#TProgress > , } ;
            pub fn new(invoke: F) -> r#AsyncOperationProgressHandler<r#TResult, r#TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncOperationProgressHandler<r#TResult, r#TProgress> =
                        std::mem::zeroed();
                    * < r#AsyncOperationProgressHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut result ) = :: std :: boxed :: Box :: into_raw ( :: std :: boxed :: Box :: new ( value ) ) as * const * const abi_AsyncOperationProgressHandler < r#TResult , r#TProgress > ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#AsyncOperationProgressHandler :: < r#TResult , r#TProgress > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncOperationProgressHandler<r#TResult, r#TProgress>,
                r#async_info : < r#IAsyncOperationWithProgress :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi,
                r#progress_info: <r#TProgress as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        ::winrt::RuntimeType::from_abi(&r#progress_info),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<
                r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>,
            >,
            __0: ::std::marker::PhantomData<r#TResult>,
            __1: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<'a, r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>,
                >,
            >(
                &self,
                r#async_info: __0,
                r#async_status: r#AsyncStatus,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(
                        this,
                        r#async_info.into().abi(),
                        ::winrt::RuntimeType::abi(&r#async_status),
                    )
                    .ok()
                }
            }
            pub fn new<
                F: FnMut(
                    &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                    r#AsyncStatus,
                ) -> ::winrt::Result<()>,
            >(
                invoke: F,
            ) -> Self {
                impl_AsyncOperationWithProgressCompletedHandler::<r#TResult, r#TProgress, F>::new(
                    invoke,
                )
            }
        }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface
            for r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        {
            type VTable = abi_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone
            for r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TResult>,
                    __1: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>,
                <r#IAsyncOperationWithProgress<r#TResult, r#TProgress> as ::winrt::RuntimeType>::Abi,
                <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TResult>,
            __1: ::std::marker::PhantomData<r#TProgress>,
        }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType
            for r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{e85df41d-6aa7-46e3-a8e2-f009d840c627}",
                    <r#TResult as ::winrt::RuntimeType>::signature(),
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug
            for r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_AsyncOperationWithProgressCompletedHandler<
            r#TResult,
            r#TProgress,
            F: FnMut(
                &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                r#AsyncStatus,
            ) -> ::winrt::Result<()>,
        >
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
                F: FnMut(
                    &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
                    r#AsyncStatus,
                ) -> ::winrt::Result<()>,
            > impl_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress, F>
        {
            const VTABLE: abi_AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress> =
                abi_AsyncOperationWithProgressCompletedHandler::<r#TResult, r#TProgress> {
                    unknown_query_interface: impl_AsyncOperationWithProgressCompletedHandler::<
                        r#TResult,
                        r#TProgress,
                        F,
                    >::unknown_query_interface,
                    unknown_add_ref: impl_AsyncOperationWithProgressCompletedHandler::<
                        r#TResult,
                        r#TProgress,
                        F,
                    >::unknown_add_ref,
                    unknown_release: impl_AsyncOperationWithProgressCompletedHandler::<
                        r#TResult,
                        r#TProgress,
                        F,
                    >::unknown_release,
                    invoke: impl_AsyncOperationWithProgressCompletedHandler::<
                        r#TResult,
                        r#TProgress,
                        F,
                    >::invoke,
                    __0: ::std::marker::PhantomData::<r#TResult>,
                    __1: ::std::marker::PhantomData::<r#TProgress>,
                };
            pub fn new(
                invoke: F,
            ) -> r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#AsyncOperationWithProgressCompletedHandler<
                        r#TResult,
                        r#TProgress,
                    > = std::mem::zeroed();
                    * < r#AsyncOperationWithProgressCompletedHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut result ) = :: std :: boxed :: Box :: into_raw ( :: std :: boxed :: Box :: new ( value ) ) as * const * const abi_AsyncOperationWithProgressCompletedHandler < r#TResult , r#TProgress > ;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#AsyncOperationWithProgressCompletedHandler :: < r#TResult , r#TProgress > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_AsyncOperationWithProgressCompletedHandler<
                    r#TResult,
                    r#TProgress,
                >,
                r#async_info : < r#IAsyncOperationWithProgress :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi,
                r#async_status: <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#async_info),
                        *::winrt::RuntimeType::from_abi(&r#async_status),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#AsyncStatus {
            value: i32,
        }
        impl r#AsyncStatus {
            #![allow(non_upper_case_globals)]
            pub const r#Canceled: Self = Self { value: 2i32 };
            pub const r#Completed: Self = Self { value: 1i32 };
            pub const r#Error: Self = Self { value: 3i32 };
            pub const r#Started: Self = Self { value: 0i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#AsyncStatus {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Foundation.AsyncStatus;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#DateTime {
            pub r#universal_time: i64,
        }
        unsafe impl ::winrt::RuntimeType for r#DateTime {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.DateTime;i8)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#Deferral {
            ptr: ::winrt::ComPtr<r#Deferral>,
        }
        impl r#Deferral {
            pub fn r#complete(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#complete)(this).ok() }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IClosable as ::std::convert::From<&Self>>::from(self).r#close()
            }
            pub fn r#create<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#DeferralCompletedHandler>>,
            >(
                r#handler: __0,
            ) -> ::winrt::Result<r#Deferral> {
                ::winrt::factory::<Self, r#IDeferralFactory>()?.r#create(r#handler)
            }
        }
        impl ::winrt::RuntimeName for r#Deferral {
            const NAME: &'static str = "Windows.Foundation.Deferral";
        }
        unsafe impl ::winrt::ComInterface for r#Deferral {
            type VTable = abi_IDeferral;
            fn iid() -> ::winrt::Guid {
                <r#IDeferral as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#Deferral {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Foundation.Deferral;{d6269732-3b7f-46a7-b40b-4fdca2a2c693})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#Deferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#Deferral> for r#IDeferral {
            fn from(value: r#Deferral) -> r#IDeferral {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#Deferral> for r#IDeferral {
            fn from(value: &r#Deferral) -> r#IDeferral {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#Deferral> for r#IClosable {
            fn from(value: r#Deferral) -> r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#Deferral> for r#IClosable {
            fn from(value: &r#Deferral) -> r#IClosable {
                <r#Deferral as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#Deferral> for ::winrt::Object {
            fn from(value: r#Deferral) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#Deferral> for ::winrt::Object {
            fn from(value: &r#Deferral) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#DeferralCompletedHandler {
            ptr: ::winrt::ComPtr<r#DeferralCompletedHandler>,
        }
        impl r#DeferralCompletedHandler {
            pub fn r#invoke(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#invoke)(this).ok() }
            }
            pub fn new<F: FnMut() -> ::winrt::Result<()>>(invoke: F) -> Self {
                impl_DeferralCompletedHandler::<F>::new(invoke)
            }
        }
        unsafe impl ::winrt::ComInterface for r#DeferralCompletedHandler {
            type VTable = abi_DeferralCompletedHandler;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3979518834,
                    62408,
                    20394,
                    [156, 251, 71, 1, 72, 218, 56, 136],
                )
            }
        }
        impl ::std::clone::Clone for r#DeferralCompletedHandler {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_DeferralCompletedHandler {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_DeferralCompletedHandler,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#DeferralCompletedHandler {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "delegate({ed32a372-f3c8-4faa-9cfb-470148da3888})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#DeferralCompletedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_DeferralCompletedHandler<F: FnMut() -> ::winrt::Result<()>> {
            vtable: *const abi_DeferralCompletedHandler,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<F: FnMut() -> ::winrt::Result<()>> impl_DeferralCompletedHandler<F> {
            const VTABLE: abi_DeferralCompletedHandler = abi_DeferralCompletedHandler {
                unknown_query_interface:
                    impl_DeferralCompletedHandler::<F>::unknown_query_interface,
                unknown_add_ref: impl_DeferralCompletedHandler::<F>::unknown_add_ref,
                unknown_release: impl_DeferralCompletedHandler::<F>::unknown_release,
                invoke: impl_DeferralCompletedHandler::<F>::invoke,
            };
            pub fn new(invoke: F) -> r#DeferralCompletedHandler {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#DeferralCompletedHandler = std::mem::zeroed();
                    *<r#DeferralCompletedHandler as ::winrt::RuntimeType>::set_abi(&mut result) =
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                            as *const *const abi_DeferralCompletedHandler;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == &<r#DeferralCompletedHandler as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_DeferralCompletedHandler,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)().into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#EventHandler<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#EventHandler<r#T>>,
            __0: ::std::marker::PhantomData<r#T>,
        }
        impl<r#T: ::winrt::RuntimeType + 'static> r#EventHandler<r#T> {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#T>>,
            >(
                &self,
                r#sender: __0,
                r#args: __1,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(this, r#sender.into().abi(), r#args.into().abi()).ok()
                }
            }
            pub fn new<F: FnMut(&::winrt::Object, &r#T) -> ::winrt::Result<()>>(invoke: F) -> Self {
                impl_EventHandler::<r#T, F>::new(invoke)
            }
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#EventHandler<r#T> {
            type VTable = abi_EventHandler<r#T>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#EventHandler<r#T> {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#T>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_EventHandler<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_EventHandler<r#T>,
                <::winrt::Object as ::winrt::RuntimeType>::Abi,
                <r#T as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#T>,
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#EventHandler<r#T> {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{9de1c535-6ae1-11e0-84e1-18a905bcc53f}",
                    <r#T as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#EventHandler<r#T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_EventHandler<r#T, F: FnMut(&::winrt::Object, &r#T) -> ::winrt::Result<()>>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_EventHandler<r#T>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#T: ::winrt::RuntimeType + 'static,
                F: FnMut(&::winrt::Object, &r#T) -> ::winrt::Result<()>,
            > impl_EventHandler<r#T, F>
        {
            const VTABLE: abi_EventHandler<r#T> = abi_EventHandler::<r#T> {
                unknown_query_interface: impl_EventHandler::<r#T, F>::unknown_query_interface,
                unknown_add_ref: impl_EventHandler::<r#T, F>::unknown_add_ref,
                unknown_release: impl_EventHandler::<r#T, F>::unknown_release,
                invoke: impl_EventHandler::<r#T, F>::invoke,
                __0: ::std::marker::PhantomData::<r#T>,
            };
            pub fn new(invoke: F) -> r#EventHandler<r#T> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#EventHandler<r#T> = std::mem::zeroed();
                    *<r#EventHandler<r#T> as ::winrt::RuntimeType>::set_abi(&mut result) =
                        ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                            as *const *const abi_EventHandler<r#T>;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == &<r#EventHandler<r#T> as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_EventHandler<r#T>,
                r#sender: <::winrt::Object as ::winrt::RuntimeType>::Abi,
                r#args: <r#T as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#sender),
                        ::winrt::RuntimeType::from_abi(&r#args),
                    )
                    .into()
                }
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#EventRegistrationToken {
            pub r#value: i64,
        }
        unsafe impl ::winrt::RuntimeType for r#EventRegistrationToken {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.EventRegistrationToken;i8)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        pub struct r#GuidHelper {}
        impl r#GuidHelper {
            pub fn r#create_new_guid() -> ::winrt::Result<::winrt::Guid> {
                ::winrt::factory::<Self, r#IGuidHelperStatics>()?.r#create_new_guid()
            }
            pub fn r#empty() -> ::winrt::Result<::winrt::Guid> {
                ::winrt::factory::<Self, r#IGuidHelperStatics>()?.r#empty()
            }
            pub fn r#equals<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
            >(
                r#target: __0,
                r#value: __1,
            ) -> ::winrt::Result<bool> {
                ::winrt::factory::<Self, r#IGuidHelperStatics>()?.r#equals(r#target, r#value)
            }
        }
        impl ::winrt::RuntimeName for r#GuidHelper {
            const NAME: &'static str = "Windows.Foundation.GuidHelper";
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#HResult {
            pub r#value: i32,
        }
        unsafe impl ::winrt::RuntimeType for r#HResult {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.HResult;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IAsyncAction {
            ptr: ::winrt::ComPtr<r#IAsyncAction>,
        }
        impl r#IAsyncAction {
            pub fn r#set_completed<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#AsyncActionCompletedHandler>>,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_completed)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#completed(&self) -> ::winrt::Result<r#AsyncActionCompletedHandler> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncActionCompletedHandler = ::std::mem::zeroed();
                    ((*(*(this))).r#completed)(
                        this,
                        <r#AsyncActionCompletedHandler as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_results(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#get_results)(this).ok() }
            }
            pub fn r#id(&self) -> ::winrt::Result<u32> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#id()
            }
            pub fn r#status(&self) -> ::winrt::Result<r#AsyncStatus> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#status()
            }
            pub fn r#error_code(&self) -> ::winrt::Result<r#HResult> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#error_code()
            }
            pub fn r#cancel(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#cancel()
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IAsyncAction {
            type VTable = abi_IAsyncAction;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1516535814,
                    33850,
                    19881,
                    [134, 91, 157, 38, 229, 223, 173, 123],
                )
            }
        }
        impl ::std::clone::Clone for r#IAsyncAction {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncAction {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#set_completed: extern "system" fn(
                *const *const abi_IAsyncAction,
                <r#AsyncActionCompletedHandler as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#completed: extern "system" fn(
                *const *const abi_IAsyncAction,
                *mut <r#AsyncActionCompletedHandler as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_results:
                extern "system" fn(*const *const abi_IAsyncAction) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IAsyncAction {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{5a648006-843a-4da9-865b-9d26e5dfad7b}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IAsyncAction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IAsyncAction> for r#IAsyncInfo {
            fn from(value: r#IAsyncAction) -> r#IAsyncInfo {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IAsyncAction> for r#IAsyncInfo {
            fn from(value: &r#IAsyncAction) -> r#IAsyncInfo {
                <r#IAsyncAction as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IAsyncAction> for ::winrt::Object {
            fn from(value: r#IAsyncAction) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IAsyncAction> for ::winrt::Object {
            fn from(value: &r#IAsyncAction) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IAsyncActionWithProgress<r#TProgress>
        where
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#IAsyncActionWithProgress<r#TProgress>>,
            __0: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> r#IAsyncActionWithProgress<r#TProgress> {
            pub fn r#set_progress<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#AsyncActionProgressHandler<r#TProgress>>>,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_progress)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#progress(&self) -> ::winrt::Result<r#AsyncActionProgressHandler<r#TProgress>> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncActionProgressHandler<r#TProgress> = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#progress ) ( this , < r#AsyncActionProgressHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#set_completed<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<'a, r#AsyncActionWithProgressCompletedHandler<r#TProgress>>,
                >,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_completed)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#completed(
                &self,
            ) -> ::winrt::Result<r#AsyncActionWithProgressCompletedHandler<r#TProgress>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncActionWithProgressCompletedHandler<r#TProgress> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#completed ) ( this , < r#AsyncActionWithProgressCompletedHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_results(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#get_results)(this).ok() }
            }
            pub fn r#id(&self) -> ::winrt::Result<u32> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#id()
            }
            pub fn r#status(&self) -> ::winrt::Result<r#AsyncStatus> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#status()
            }
            pub fn r#error_code(&self) -> ::winrt::Result<r#HResult> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#error_code()
            }
            pub fn r#cancel(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#cancel()
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for r#IAsyncActionWithProgress<r#TProgress>
        {
            type VTable = abi_IAsyncActionWithProgress<r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for r#IAsyncActionWithProgress<r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncActionWithProgress < r#TProgress > where r#TProgress : :: winrt :: RuntimeType + 'static , { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#set_progress : extern "system" fn ( * const * const abi_IAsyncActionWithProgress :: < r#TProgress > , < r#AsyncActionProgressHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#progress : extern "system" fn ( * const * const abi_IAsyncActionWithProgress :: < r#TProgress > , * mut < r#AsyncActionProgressHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_completed : extern "system" fn ( * const * const abi_IAsyncActionWithProgress :: < r#TProgress > , < r#AsyncActionWithProgressCompletedHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#completed : extern "system" fn ( * const * const abi_IAsyncActionWithProgress :: < r#TProgress > , * mut < r#AsyncActionWithProgressCompletedHandler :: < r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_results : extern "system" fn ( * const * const abi_IAsyncActionWithProgress :: < r#TProgress > , ) -> :: winrt :: ErrorCode , __0 : :: std :: marker :: PhantomData :: < r#TProgress > , }
        unsafe impl<r#TProgress: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for r#IAsyncActionWithProgress<r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{1f6db258-e803-48a1-9546-eb7353398884}",
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static> ::std::fmt::Debug
            for r#IAsyncActionWithProgress<r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static>
            ::std::convert::From<r#IAsyncActionWithProgress<r#TProgress>> for r#IAsyncInfo
        {
            fn from(value: r#IAsyncActionWithProgress<r#TProgress>) -> r#IAsyncInfo {
                ::std::convert::From::from(&value)
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&r#IAsyncActionWithProgress<r#TProgress>> for r#IAsyncInfo
        {
            fn from(value: &r#IAsyncActionWithProgress<r#TProgress>) -> r#IAsyncInfo {
                <r#IAsyncActionWithProgress<r#TProgress> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static>
            ::std::convert::From<r#IAsyncActionWithProgress<r#TProgress>> for ::winrt::Object
        {
            fn from(value: r#IAsyncActionWithProgress<r#TProgress>) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<r#TProgress: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&r#IAsyncActionWithProgress<r#TProgress>> for ::winrt::Object
        {
            fn from(value: &r#IAsyncActionWithProgress<r#TProgress>) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IAsyncInfo {
            ptr: ::winrt::ComPtr<r#IAsyncInfo>,
        }
        impl r#IAsyncInfo {
            pub fn r#id(&self) -> ::winrt::Result<u32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u32 = ::std::mem::zeroed();
                    ((*(*(this))).r#id)(this, <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok))
                        .and_then(|| __ok)
                }
            }
            pub fn r#status(&self) -> ::winrt::Result<r#AsyncStatus> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncStatus = ::std::mem::zeroed();
                    ((*(*(this))).r#status)(
                        this,
                        <r#AsyncStatus as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#error_code(&self) -> ::winrt::Result<r#HResult> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#HResult = ::std::mem::zeroed();
                    ((*(*(this))).r#error_code)(
                        this,
                        <r#HResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#cancel(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#cancel)(this).ok() }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#close)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IAsyncInfo {
            type VTable = abi_IAsyncInfo;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(54, 0, 0, [192, 0, 0, 0, 0, 0, 0, 70])
            }
        }
        impl ::std::clone::Clone for r#IAsyncInfo {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncInfo {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#id:
                extern "system" fn(*const *const abi_IAsyncInfo, *mut u32) -> ::winrt::ErrorCode,
            pub r#status: extern "system" fn(
                *const *const abi_IAsyncInfo,
                *mut <r#AsyncStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#error_code: extern "system" fn(
                *const *const abi_IAsyncInfo,
                *mut <r#HResult as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#cancel: extern "system" fn(*const *const abi_IAsyncInfo) -> ::winrt::ErrorCode,
            pub r#close: extern "system" fn(*const *const abi_IAsyncInfo) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IAsyncInfo {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{00000036-0000-0000-c000-000000000046}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IAsyncInfo {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IAsyncInfo> for ::winrt::Object {
            fn from(value: r#IAsyncInfo) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IAsyncInfo> for ::winrt::Object {
            fn from(value: &r#IAsyncInfo) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
            r#TProgress: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>,
            __0: ::std::marker::PhantomData<r#TResult>,
            __1: ::std::marker::PhantomData<r#TProgress>,
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        {
            pub fn r#set_progress<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<'a, r#AsyncOperationProgressHandler<r#TResult, r#TProgress>>,
                >,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_progress)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#progress(
                &self,
            ) -> ::winrt::Result<r#AsyncOperationProgressHandler<r#TResult, r#TProgress>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncOperationProgressHandler<r#TResult, r#TProgress> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#progress ) ( this , < r#AsyncOperationProgressHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#set_completed<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>,
                    >,
                >,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_completed)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#completed(
                &self,
            ) -> ::winrt::Result<r#AsyncOperationWithProgressCompletedHandler<r#TResult, r#TProgress>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncOperationWithProgressCompletedHandler<
                        r#TResult,
                        r#TProgress,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#completed ) ( this , < r#AsyncOperationWithProgressCompletedHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_results(&self) -> ::winrt::Result<r#TResult> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#TResult = ::std::mem::zeroed();
                    ((*(*(this))).r#get_results)(
                        this,
                        <r#TResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#id(&self) -> ::winrt::Result<u32> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#id()
            }
            pub fn r#status(&self) -> ::winrt::Result<r#AsyncStatus> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#status()
            }
            pub fn r#error_code(&self) -> ::winrt::Result<r#HResult> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#error_code()
            }
            pub fn r#cancel(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#cancel()
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface for r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        {
            type VTable = abi_IAsyncOperationWithProgress<r#TResult, r#TProgress>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone for r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TResult>,
                    __1: ::std::marker::PhantomData::<r#TProgress>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncOperationWithProgress < r#TResult , r#TProgress > where r#TResult : :: winrt :: RuntimeType + 'static , r#TProgress : :: winrt :: RuntimeType + 'static , { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#set_progress : extern "system" fn ( * const * const abi_IAsyncOperationWithProgress :: < r#TResult , r#TProgress > , < r#AsyncOperationProgressHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#progress : extern "system" fn ( * const * const abi_IAsyncOperationWithProgress :: < r#TResult , r#TProgress > , * mut < r#AsyncOperationProgressHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_completed : extern "system" fn ( * const * const abi_IAsyncOperationWithProgress :: < r#TResult , r#TProgress > , < r#AsyncOperationWithProgressCompletedHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#completed : extern "system" fn ( * const * const abi_IAsyncOperationWithProgress :: < r#TResult , r#TProgress > , * mut < r#AsyncOperationWithProgressCompletedHandler :: < r#TResult , r#TProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_results : extern "system" fn ( * const * const abi_IAsyncOperationWithProgress :: < r#TResult , r#TProgress > , * mut < r#TResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , __0 : :: std :: marker :: PhantomData :: < r#TResult > , __1 : :: std :: marker :: PhantomData :: < r#TProgress > , }
        unsafe impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType for r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{b5d036d7-e297-498f-ba60-0289e76e23dd}",
                    <r#TResult as ::winrt::RuntimeType>::signature(),
                    <r#TProgress as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for r#IAsyncOperationWithProgress<r#TResult, r#TProgress>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>
            for r#IAsyncInfo
        {
            fn from(value: r#IAsyncOperationWithProgress<r#TResult, r#TProgress>) -> r#IAsyncInfo {
                ::std::convert::From::from(&value)
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<&r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>
            for r#IAsyncInfo
        {
            fn from(value: &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>) -> r#IAsyncInfo {
                < r#IAsyncOperationWithProgress :: < r#TResult , r#TProgress > as :: winrt :: ComInterface > :: query ( value )
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>
            for ::winrt::Object
        {
            fn from(
                value: r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
            ) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<
                r#TResult: ::winrt::RuntimeType + 'static,
                r#TProgress: ::winrt::RuntimeType + 'static,
            > ::std::convert::From<&r#IAsyncOperationWithProgress<r#TResult, r#TProgress>>
            for ::winrt::Object
        {
            fn from(
                value: &r#IAsyncOperationWithProgress<r#TResult, r#TProgress>,
            ) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IAsyncOperation<r#TResult>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#IAsyncOperation<r#TResult>>,
            __0: ::std::marker::PhantomData<r#TResult>,
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> r#IAsyncOperation<r#TResult> {
            pub fn r#set_completed<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<'a, r#AsyncOperationCompletedHandler<r#TResult>>,
                >,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#set_completed)(this, r#handler.into().abi()).ok() }
            }
            pub fn r#completed(
                &self,
            ) -> ::winrt::Result<r#AsyncOperationCompletedHandler<r#TResult>> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#AsyncOperationCompletedHandler<r#TResult> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#completed ) ( this , < r#AsyncOperationCompletedHandler :: < r#TResult > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_results(&self) -> ::winrt::Result<r#TResult> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#TResult = ::std::mem::zeroed();
                    ((*(*(this))).r#get_results)(
                        this,
                        <r#TResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#id(&self) -> ::winrt::Result<u32> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#id()
            }
            pub fn r#status(&self) -> ::winrt::Result<r#AsyncStatus> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#status()
            }
            pub fn r#error_code(&self) -> ::winrt::Result<r#HResult> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#error_code()
            }
            pub fn r#cancel(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#cancel()
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IAsyncInfo as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl<r#TResult: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
            for r#IAsyncOperation<r#TResult>
        {
            type VTable = abi_IAsyncOperation<r#TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> ::std::clone::Clone
            for r#IAsyncOperation<r#TResult>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IAsyncOperation<r#TResult>
        where
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#set_completed: extern "system" fn(
                *const *const abi_IAsyncOperation<r#TResult>,
                <r#AsyncOperationCompletedHandler<r#TResult> as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#completed: extern "system" fn(
                *const *const abi_IAsyncOperation<r#TResult>,
                *mut <r#AsyncOperationCompletedHandler<r#TResult> as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_results: extern "system" fn(
                *const *const abi_IAsyncOperation<r#TResult>,
                *mut <r#TResult as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TResult>,
        }
        unsafe impl<r#TResult: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
            for r#IAsyncOperation<r#TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{9fc2b0bb-e446-44e2-aa61-9cab8f636af2}",
                    <r#TResult as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IAsyncOperation<r#TResult> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<r#IAsyncOperation<r#TResult>> for r#IAsyncInfo
        {
            fn from(value: r#IAsyncOperation<r#TResult>) -> r#IAsyncInfo {
                ::std::convert::From::from(&value)
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&r#IAsyncOperation<r#TResult>> for r#IAsyncInfo
        {
            fn from(value: &r#IAsyncOperation<r#TResult>) -> r#IAsyncInfo {
                <r#IAsyncOperation<r#TResult> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<r#IAsyncOperation<r#TResult>> for ::winrt::Object
        {
            fn from(value: r#IAsyncOperation<r#TResult>) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<r#TResult: ::winrt::RuntimeType + 'static>
            ::std::convert::From<&r#IAsyncOperation<r#TResult>> for ::winrt::Object
        {
            fn from(value: &r#IAsyncOperation<r#TResult>) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IClosable {
            ptr: ::winrt::ComPtr<r#IClosable>,
        }
        impl r#IClosable {
            pub fn r#close(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#close)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IClosable {
            type VTable = abi_IClosable;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    819308585,
                    32676,
                    16422,
                    [131, 187, 215, 91, 174, 78, 169, 158],
                )
            }
        }
        impl ::std::clone::Clone for r#IClosable {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IClosable {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#close: extern "system" fn(*const *const abi_IClosable) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IClosable {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{30d5a829-7fa4-4026-83bb-d75bae4ea99e}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IClosable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IClosable> for ::winrt::Object {
            fn from(value: r#IClosable) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IClosable> for ::winrt::Object {
            fn from(value: &r#IClosable) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IDeferral {
            ptr: ::winrt::ComPtr<r#IDeferral>,
        }
        impl r#IDeferral {
            pub fn r#complete(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#complete)(this).ok() }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IClosable as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IDeferral {
            type VTable = abi_IDeferral;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3592853298,
                    15231,
                    18087,
                    [180, 11, 79, 220, 162, 162, 198, 147],
                )
            }
        }
        impl ::std::clone::Clone for r#IDeferral {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IDeferral {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#complete: extern "system" fn(*const *const abi_IDeferral) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IDeferral {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{d6269732-3b7f-46a7-b40b-4fdca2a2c693}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IDeferral {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IDeferral> for r#IClosable {
            fn from(value: r#IDeferral) -> r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IDeferral> for r#IClosable {
            fn from(value: &r#IDeferral) -> r#IClosable {
                <r#IDeferral as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IDeferral> for ::winrt::Object {
            fn from(value: r#IDeferral) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IDeferral> for ::winrt::Object {
            fn from(value: &r#IDeferral) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IDeferralFactory {
            ptr: ::winrt::ComPtr<r#IDeferralFactory>,
        }
        impl r#IDeferralFactory {
            pub fn r#create<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#DeferralCompletedHandler>>,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<r#Deferral> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Deferral = ::std::mem::zeroed();
                    ((*(*(this))).r#create)(
                        this,
                        r#handler.into().abi(),
                        <r#Deferral as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IDeferralFactory {
            type VTable = abi_IDeferralFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1705110725,
                    16309,
                    18482,
                    [140, 169, 240, 97, 178, 129, 209, 58],
                )
            }
        }
        impl ::std::clone::Clone for r#IDeferralFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IDeferralFactory {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create: extern "system" fn(
                *const *const abi_IDeferralFactory,
                <r#DeferralCompletedHandler as ::winrt::RuntimeType>::Abi,
                *mut <r#Deferral as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IDeferralFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{65a1ecc5-3fb5-4832-8ca9-f061b281d13a}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IDeferralFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IDeferralFactory> for ::winrt::Object {
            fn from(value: r#IDeferralFactory) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IDeferralFactory> for ::winrt::Object {
            fn from(value: &r#IDeferralFactory) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IGetActivationFactory {
            ptr: ::winrt::ComPtr<r#IGetActivationFactory>,
        }
        impl r#IGetActivationFactory {
            pub fn r#get_activation_factory<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#activatable_class_id: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#get_activation_factory)(
                        this,
                        r#activatable_class_id.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IGetActivationFactory {
            type VTable = abi_IGetActivationFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1323011810,
                    38621,
                    18855,
                    [148, 247, 70, 7, 221, 171, 142, 60],
                )
            }
        }
        impl ::std::clone::Clone for r#IGetActivationFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IGetActivationFactory {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_activation_factory: extern "system" fn(
                *const *const abi_IGetActivationFactory,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IGetActivationFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{4edb8ee2-96dd-49a7-94f7-4607ddab8e3c}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IGetActivationFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IGetActivationFactory> for ::winrt::Object {
            fn from(value: r#IGetActivationFactory) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IGetActivationFactory> for ::winrt::Object {
            fn from(value: &r#IGetActivationFactory) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IGuidHelperStatics {
            ptr: ::winrt::ComPtr<r#IGuidHelperStatics>,
        }
        impl r#IGuidHelperStatics {
            pub fn r#create_new_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Guid = ::std::mem::zeroed();
                    ((*(*(this))).r#create_new_guid)(
                        this,
                        <::winrt::Guid as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#empty(&self) -> ::winrt::Result<::winrt::Guid> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Guid = ::std::mem::zeroed();
                    ((*(*(this))).r#empty)(
                        this,
                        <::winrt::Guid as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#equals<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
            >(
                &self,
                r#target: __0,
                r#value: __1,
            ) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#equals)(
                        this,
                        r#target.into().abi(),
                        r#value.into().abi(),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IGuidHelperStatics {
            type VTable = abi_IGuidHelperStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1506252395,
                    44626,
                    21123,
                    [173, 127, 161, 185, 233, 103, 138, 221],
                )
            }
        }
        impl ::std::clone::Clone for r#IGuidHelperStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IGuidHelperStatics {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create_new_guid: extern "system" fn(
                *const *const abi_IGuidHelperStatics,
                *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub r#empty: extern "system" fn(
                *const *const abi_IGuidHelperStatics,
                *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub r#equals: extern "system" fn(
                *const *const abi_IGuidHelperStatics,
                ::winrt::Guid,
                ::winrt::Guid,
                *mut bool,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IGuidHelperStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{59c7966b-ae52-5283-ad7f-a1b9e9678add}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IGuidHelperStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IGuidHelperStatics> for ::winrt::Object {
            fn from(value: r#IGuidHelperStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IGuidHelperStatics> for ::winrt::Object {
            fn from(value: &r#IGuidHelperStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IMemoryBuffer {
            ptr: ::winrt::ComPtr<r#IMemoryBuffer>,
        }
        impl r#IMemoryBuffer {
            pub fn r#create_reference(&self) -> ::winrt::Result<r#IMemoryBufferReference> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#IMemoryBufferReference = ::std::mem::zeroed();
                    ((*(*(this))).r#create_reference)(
                        this,
                        <r#IMemoryBufferReference as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IClosable as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IMemoryBuffer {
            type VTable = abi_IMemoryBuffer;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4223982890,
                    9307,
                    4580,
                    [175, 152, 104, 148, 35, 38, 12, 248],
                )
            }
        }
        impl ::std::clone::Clone for r#IMemoryBuffer {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IMemoryBuffer {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create_reference: extern "system" fn(
                *const *const abi_IMemoryBuffer,
                *mut <r#IMemoryBufferReference as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IMemoryBuffer {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{fbc4dd2a-245b-11e4-af98-689423260cf8}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IMemoryBuffer {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IMemoryBuffer> for r#IClosable {
            fn from(value: r#IMemoryBuffer) -> r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IMemoryBuffer> for r#IClosable {
            fn from(value: &r#IMemoryBuffer) -> r#IClosable {
                <r#IMemoryBuffer as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IMemoryBuffer> for ::winrt::Object {
            fn from(value: r#IMemoryBuffer) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IMemoryBuffer> for ::winrt::Object {
            fn from(value: &r#IMemoryBuffer) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IMemoryBufferFactory {
            ptr: ::winrt::ComPtr<r#IMemoryBufferFactory>,
        }
        impl r#IMemoryBufferFactory {
            pub fn r#create(&self, r#capacity: u32) -> ::winrt::Result<r#MemoryBuffer> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#MemoryBuffer = ::std::mem::zeroed();
                    ((*(*(this))).r#create)(
                        this,
                        r#capacity,
                        <r#MemoryBuffer as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IMemoryBufferFactory {
            type VTable = abi_IMemoryBufferFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4223982891,
                    9307,
                    4580,
                    [175, 152, 104, 148, 35, 38, 12, 248],
                )
            }
        }
        impl ::std::clone::Clone for r#IMemoryBufferFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IMemoryBufferFactory {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create: extern "system" fn(
                *const *const abi_IMemoryBufferFactory,
                u32,
                *mut <r#MemoryBuffer as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IMemoryBufferFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{fbc4dd2b-245b-11e4-af98-689423260cf8}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IMemoryBufferFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IMemoryBufferFactory> for ::winrt::Object {
            fn from(value: r#IMemoryBufferFactory) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IMemoryBufferFactory> for ::winrt::Object {
            fn from(value: &r#IMemoryBufferFactory) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IMemoryBufferReference {
            ptr: ::winrt::ComPtr<r#IMemoryBufferReference>,
        }
        impl r#IMemoryBufferReference {
            pub fn r#capacity(&self) -> ::winrt::Result<u32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u32 = ::std::mem::zeroed();
                    ((*(*(this))).r#capacity)(
                        this,
                        <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#closed<
                'a,
                __0: ::std::convert::Into<
                    ::winrt::Param<
                        'a,
                        r#TypedEventHandler<r#IMemoryBufferReference, ::winrt::Object>,
                    >,
                >,
            >(
                &self,
                r#handler: __0,
            ) -> ::winrt::Result<r#EventRegistrationToken> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#EventRegistrationToken = ::std::mem::zeroed();
                    ((*(*(this))).r#closed)(
                        this,
                        r#handler.into().abi(),
                        <r#EventRegistrationToken as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#remove_closed<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#EventRegistrationToken>>,
            >(
                &self,
                r#cookie: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#remove_closed)(this, r#cookie.into().abi()).ok() }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IClosable as ::std::convert::From<&Self>>::from(self).r#close()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IMemoryBufferReference {
            type VTable = abi_IMemoryBufferReference;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4223982889,
                    9307,
                    4580,
                    [175, 152, 104, 148, 35, 38, 12, 248],
                )
            }
        }
        impl ::std::clone::Clone for r#IMemoryBufferReference {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IMemoryBufferReference where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#capacity : extern "system" fn ( * const * const abi_IMemoryBufferReference , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#closed : extern "system" fn ( * const * const abi_IMemoryBufferReference , < r#TypedEventHandler :: < r#IMemoryBufferReference , :: winrt :: Object > as :: winrt :: RuntimeType > :: Abi , * mut < r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#remove_closed : extern "system" fn ( * const * const abi_IMemoryBufferReference , < r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IMemoryBufferReference {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{fbc4dd29-245b-11e4-af98-689423260cf8}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IMemoryBufferReference {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IMemoryBufferReference> for r#IClosable {
            fn from(value: r#IMemoryBufferReference) -> r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IMemoryBufferReference> for r#IClosable {
            fn from(value: &r#IMemoryBufferReference) -> r#IClosable {
                <r#IMemoryBufferReference as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IMemoryBufferReference> for ::winrt::Object {
            fn from(value: r#IMemoryBufferReference) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IMemoryBufferReference> for ::winrt::Object {
            fn from(value: &r#IMemoryBufferReference) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IPropertyValue {
            ptr: ::winrt::ComPtr<r#IPropertyValue>,
        }
        impl r#IPropertyValue {
            pub fn r#type(&self) -> ::winrt::Result<r#PropertyType> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#PropertyType = ::std::mem::zeroed();
                    ((*(*(this))).r#type)(
                        this,
                        <r#PropertyType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#is_numeric_scalar(&self) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_numeric_scalar)(
                        this,
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_uint8(&self) -> ::winrt::Result<u8> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u8 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_uint8)(
                        this,
                        <u8 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_int16(&self) -> ::winrt::Result<i16> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: i16 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_int16)(
                        this,
                        <i16 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_uint16(&self) -> ::winrt::Result<u16> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u16 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_uint16)(
                        this,
                        <u16 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_int32(&self) -> ::winrt::Result<i32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: i32 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_int32)(
                        this,
                        <i32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_uint32(&self) -> ::winrt::Result<u32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u32 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_uint32)(
                        this,
                        <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_int64(&self) -> ::winrt::Result<i64> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: i64 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_int64)(
                        this,
                        <i64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_uint64(&self) -> ::winrt::Result<u64> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u64 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_uint64)(
                        this,
                        <u64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_single(&self) -> ::winrt::Result<f32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: f32 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_single)(
                        this,
                        <f32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_double(&self) -> ::winrt::Result<f64> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: f64 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_double)(
                        this,
                        <f64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_char16(&self) -> ::winrt::Result<u16> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: u16 = ::std::mem::zeroed();
                    ((*(*(this))).r#get_char16)(
                        this,
                        <u16 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_boolean(&self) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#get_boolean)(
                        this,
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_string(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#get_string)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Guid = ::std::mem::zeroed();
                    ((*(*(this))).r#get_guid)(
                        this,
                        <::winrt::Guid as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_date_time(&self) -> ::winrt::Result<r#DateTime> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#DateTime = ::std::mem::zeroed();
                    ((*(*(this))).r#get_date_time)(
                        this,
                        <r#DateTime as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_time_span(&self) -> ::winrt::Result<r#TimeSpan> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#TimeSpan = ::std::mem::zeroed();
                    ((*(*(this))).r#get_time_span)(
                        this,
                        <r#TimeSpan as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_point(&self) -> ::winrt::Result<r#Point> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Point = ::std::mem::zeroed();
                    ((*(*(this))).r#get_point)(
                        this,
                        <r#Point as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_size(&self) -> ::winrt::Result<r#Size> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Size = ::std::mem::zeroed();
                    ((*(*(this))).r#get_size)(
                        this,
                        <r#Size as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_rect(&self) -> ::winrt::Result<r#Rect> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Rect = ::std::mem::zeroed();
                    ((*(*(this))).r#get_rect)(
                        this,
                        <r#Rect as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_uint8_array(
                &self,
                r#value: &mut ::winrt::Array<u8>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_uint8_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_int16_array(
                &self,
                r#value: &mut ::winrt::Array<i16>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_int16_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_uint16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_uint16_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_int32_array(
                &self,
                r#value: &mut ::winrt::Array<i32>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_int32_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_uint32_array(
                &self,
                r#value: &mut ::winrt::Array<u32>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_uint32_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_int64_array(
                &self,
                r#value: &mut ::winrt::Array<i64>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_int64_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_uint64_array(
                &self,
                r#value: &mut ::winrt::Array<u64>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_uint64_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_single_array(
                &self,
                r#value: &mut ::winrt::Array<f32>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_single_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_double_array(
                &self,
                r#value: &mut ::winrt::Array<f64>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_double_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_char16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_char16_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_boolean_array(
                &self,
                r#value: &mut ::winrt::Array<bool>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_boolean_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_string_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::HString>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_string_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_inspectable_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Object>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_inspectable_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_guid_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Guid>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_guid_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_date_time_array(
                &self,
                r#value: &mut ::winrt::Array<r#DateTime>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_date_time_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_time_span_array(
                &self,
                r#value: &mut ::winrt::Array<r#TimeSpan>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_time_span_array)(
                        this,
                        r#value.set_abi_len(),
                        r#value.set_abi(),
                    )
                    .ok()
                }
            }
            pub fn r#get_point_array(
                &self,
                r#value: &mut ::winrt::Array<r#Point>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_point_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_size_array(
                &self,
                r#value: &mut ::winrt::Array<r#Size>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_size_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
            pub fn r#get_rect_array(
                &self,
                r#value: &mut ::winrt::Array<r#Rect>,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#get_rect_array)(this, r#value.set_abi_len(), r#value.set_abi())
                        .ok()
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IPropertyValue {
            type VTable = abi_IPropertyValue;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1272349405,
                    30036,
                    16617,
                    [154, 155, 130, 101, 78, 222, 126, 98],
                )
            }
        }
        impl ::std::clone::Clone for r#IPropertyValue {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IPropertyValue {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#type: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#PropertyType as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#is_numeric_scalar: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut bool,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint8:
                extern "system" fn(*const *const abi_IPropertyValue, *mut u8) -> ::winrt::ErrorCode,
            pub r#get_int16: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut i16,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint16: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u16,
            ) -> ::winrt::ErrorCode,
            pub r#get_int32: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint32: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
            ) -> ::winrt::ErrorCode,
            pub r#get_int64: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut i64,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint64: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u64,
            ) -> ::winrt::ErrorCode,
            pub r#get_single: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut f32,
            ) -> ::winrt::ErrorCode,
            pub r#get_double: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut f64,
            ) -> ::winrt::ErrorCode,
            pub r#get_char16: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u16,
            ) -> ::winrt::ErrorCode,
            pub r#get_boolean: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut bool,
            ) -> ::winrt::ErrorCode,
            pub r#get_string: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_guid: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub r#get_date_time: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#DateTime as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_time_span: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#TimeSpan as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_point: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#Point as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_size: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#Size as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_rect: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut <r#Rect as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint8_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut u8,
            ) -> ::winrt::ErrorCode,
            pub r#get_int16_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut i16,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint16_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut u16,
            ) -> ::winrt::ErrorCode,
            pub r#get_int32_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint32_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut u32,
            ) -> ::winrt::ErrorCode,
            pub r#get_int64_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut i64,
            ) -> ::winrt::ErrorCode,
            pub r#get_uint64_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut u64,
            ) -> ::winrt::ErrorCode,
            pub r#get_single_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut f32,
            ) -> ::winrt::ErrorCode,
            pub r#get_double_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut f64,
            ) -> ::winrt::ErrorCode,
            pub r#get_char16_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut u16,
            ) -> ::winrt::ErrorCode,
            pub r#get_boolean_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut bool,
            ) -> ::winrt::ErrorCode,
            pub r#get_string_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_inspectable_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_guid_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub r#get_date_time_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <r#DateTime as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_time_span_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <r#TimeSpan as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_point_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <r#Point as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_size_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <r#Size as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_rect_array: extern "system" fn(
                *const *const abi_IPropertyValue,
                *mut u32,
                *mut *mut <r#Rect as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IPropertyValue {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{4bd682dd-7554-40e9-9a9b-82654ede7e62}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IPropertyValue {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IPropertyValue> for ::winrt::Object {
            fn from(value: r#IPropertyValue) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IPropertyValue> for ::winrt::Object {
            fn from(value: &r#IPropertyValue) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IPropertyValueStatics {
            ptr: ::winrt::ComPtr<r#IPropertyValueStatics>,
        }
        impl r#IPropertyValueStatics {
            pub fn r#create_empty(&self) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_empty)(
                        this,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint8(&self, r#value: u8) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint8)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int16(&self, r#value: i16) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int16)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint16(&self, r#value: u16) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint16)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int32(&self, r#value: i32) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int32)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint32(&self, r#value: u32) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint32)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int64(&self, r#value: i64) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int64)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint64(&self, r#value: u64) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint64)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_single(&self, r#value: f32) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_single)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_double(&self, r#value: f64) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_double)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_char16(&self, r#value: u16) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_char16)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_boolean(&self, r#value: bool) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_boolean)(
                        this,
                        r#value,
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_string<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_string)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_inspectable<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
            >(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_inspectable)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_guid<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
            >(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_guid)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_date_time<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#DateTime>>,
            >(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_date_time)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_time_span<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#TimeSpan>>,
            >(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_time_span)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_point<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Point>>>(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_point)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_size<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Size>>>(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_size)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_rect<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Rect>>>(
                &self,
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_rect)(
                        this,
                        r#value.into().abi(),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint8_array(&self, r#value: &[u8]) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint8_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int16_array(
                &self,
                r#value: &[i16],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int16_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint16_array(
                &self,
                r#value: &[u16],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint16_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int32_array(
                &self,
                r#value: &[i32],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int32_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint32_array(
                &self,
                r#value: &[u32],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint32_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_int64_array(
                &self,
                r#value: &[i64],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_int64_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_uint64_array(
                &self,
                r#value: &[u64],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uint64_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_single_array(
                &self,
                r#value: &[f32],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_single_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_double_array(
                &self,
                r#value: &[f64],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_double_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_char16_array(
                &self,
                r#value: &[u16],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_char16_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_boolean_array(
                &self,
                r#value: &[bool],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_boolean_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_string_array(
                &self,
                r#value: &[::winrt::HString],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_string_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_inspectable_array(
                &self,
                r#value: &[::winrt::Object],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_inspectable_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_guid_array(
                &self,
                r#value: &[::winrt::Guid],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_guid_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_date_time_array(
                &self,
                r#value: &[r#DateTime],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_date_time_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_time_span_array(
                &self,
                r#value: &[r#TimeSpan],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_time_span_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_point_array(
                &self,
                r#value: &[r#Point],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_point_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_size_array(
                &self,
                r#value: &[r#Size],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_size_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_rect_array(
                &self,
                r#value: &[r#Rect],
            ) -> ::winrt::Result<::winrt::Object> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Object = ::std::mem::zeroed();
                    ((*(*(this))).r#create_rect_array)(
                        this,
                        r#value.len() as u32,
                        ::std::mem::transmute(r#value.as_ptr()),
                        <::winrt::Object as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IPropertyValueStatics {
            type VTable = abi_IPropertyValueStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1654381512,
                    55602,
                    20468,
                    [150, 185, 141, 150, 197, 193, 232, 88],
                )
            }
        }
        impl ::std::clone::Clone for r#IPropertyValueStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IPropertyValueStatics {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create_empty: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint8: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u8,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int16: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                i16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint16: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int32: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                i32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint32: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int64: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                i64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint64: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_single: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                f32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_double: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                f64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_char16: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_boolean: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                bool,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_string: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_inspectable: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <::winrt::Object as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_guid: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                ::winrt::Guid,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_date_time: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <r#DateTime as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_time_span: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <r#TimeSpan as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_point: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <r#Point as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_size: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <r#Size as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_rect: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                <r#Rect as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint8_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const u8,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int16_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const i16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint16_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const u16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int32_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const i32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint32_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const u32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_int64_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const i64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_uint64_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const u64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_single_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const f32,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_double_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const f64,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_char16_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const u16,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_boolean_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const bool,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_string_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_inspectable_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <::winrt::Object as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_guid_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const ::winrt::Guid,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_date_time_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <r#DateTime as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_time_span_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <r#TimeSpan as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_point_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <r#Point as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_size_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <r#Size as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_rect_array: extern "system" fn(
                *const *const abi_IPropertyValueStatics,
                u32,
                *const <r#Rect as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::Object as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IPropertyValueStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{629bdbc8-d932-4ff4-96b9-8d96c5c1e858}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IPropertyValueStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IPropertyValueStatics> for ::winrt::Object {
            fn from(value: r#IPropertyValueStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IPropertyValueStatics> for ::winrt::Object {
            fn from(value: &r#IPropertyValueStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IReferenceArray<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#IReferenceArray<r#T>>,
            __0: ::std::marker::PhantomData<r#T>,
        }
        impl<r#T: ::winrt::RuntimeType + 'static> r#IReferenceArray<r#T> {
            pub fn r#value(&self) -> ::winrt::Result<::winrt::Array<r#T>> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::Array<r#T> = ::std::mem::zeroed();
                    ((*(*(this))).r#value)(
                        this,
                        ::winrt::Array::<r#T>::set_abi_len(&mut __ok),
                        winrt::Array::<r#T>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#type(&self) -> ::winrt::Result<r#PropertyType> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#type()
            }
            pub fn r#is_numeric_scalar(&self) -> ::winrt::Result<bool> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#is_numeric_scalar()
            }
            pub fn r#get_uint8(&self) -> ::winrt::Result<u8> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint8()
            }
            pub fn r#get_int16(&self) -> ::winrt::Result<i16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int16()
            }
            pub fn r#get_uint16(&self) -> ::winrt::Result<u16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint16()
            }
            pub fn r#get_int32(&self) -> ::winrt::Result<i32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int32()
            }
            pub fn r#get_uint32(&self) -> ::winrt::Result<u32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint32()
            }
            pub fn r#get_int64(&self) -> ::winrt::Result<i64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int64()
            }
            pub fn r#get_uint64(&self) -> ::winrt::Result<u64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint64()
            }
            pub fn r#get_single(&self) -> ::winrt::Result<f32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_single()
            }
            pub fn r#get_double(&self) -> ::winrt::Result<f64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_double()
            }
            pub fn r#get_char16(&self) -> ::winrt::Result<u16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_char16()
            }
            pub fn r#get_boolean(&self) -> ::winrt::Result<bool> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_boolean()
            }
            pub fn r#get_string(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_string()
            }
            pub fn r#get_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_guid()
            }
            pub fn r#get_date_time(&self) -> ::winrt::Result<r#DateTime> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_date_time()
            }
            pub fn r#get_time_span(&self) -> ::winrt::Result<r#TimeSpan> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_time_span()
            }
            pub fn r#get_point(&self) -> ::winrt::Result<r#Point> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_point()
            }
            pub fn r#get_size(&self) -> ::winrt::Result<r#Size> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_size()
            }
            pub fn r#get_rect(&self) -> ::winrt::Result<r#Rect> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_rect()
            }
            pub fn r#get_uint8_array(
                &self,
                r#value: &mut ::winrt::Array<u8>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint8_array(r#value)
            }
            pub fn r#get_int16_array(
                &self,
                r#value: &mut ::winrt::Array<i16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int16_array(r#value)
            }
            pub fn r#get_uint16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint16_array(r#value)
            }
            pub fn r#get_int32_array(
                &self,
                r#value: &mut ::winrt::Array<i32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int32_array(r#value)
            }
            pub fn r#get_uint32_array(
                &self,
                r#value: &mut ::winrt::Array<u32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint32_array(r#value)
            }
            pub fn r#get_int64_array(
                &self,
                r#value: &mut ::winrt::Array<i64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int64_array(r#value)
            }
            pub fn r#get_uint64_array(
                &self,
                r#value: &mut ::winrt::Array<u64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint64_array(r#value)
            }
            pub fn r#get_single_array(
                &self,
                r#value: &mut ::winrt::Array<f32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_single_array(r#value)
            }
            pub fn r#get_double_array(
                &self,
                r#value: &mut ::winrt::Array<f64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_double_array(r#value)
            }
            pub fn r#get_char16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_char16_array(r#value)
            }
            pub fn r#get_boolean_array(
                &self,
                r#value: &mut ::winrt::Array<bool>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_boolean_array(r#value)
            }
            pub fn r#get_string_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::HString>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_string_array(r#value)
            }
            pub fn r#get_inspectable_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Object>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_inspectable_array(r#value)
            }
            pub fn r#get_guid_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Guid>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_guid_array(r#value)
            }
            pub fn r#get_date_time_array(
                &self,
                r#value: &mut ::winrt::Array<r#DateTime>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_date_time_array(r#value)
            }
            pub fn r#get_time_span_array(
                &self,
                r#value: &mut ::winrt::Array<r#TimeSpan>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_time_span_array(r#value)
            }
            pub fn r#get_point_array(
                &self,
                r#value: &mut ::winrt::Array<r#Point>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_point_array(r#value)
            }
            pub fn r#get_size_array(
                &self,
                r#value: &mut ::winrt::Array<r#Size>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_size_array(r#value)
            }
            pub fn r#get_rect_array(
                &self,
                r#value: &mut ::winrt::Array<r#Rect>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_rect_array(r#value)
            }
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IReferenceArray<r#T> {
            type VTable = abi_IReferenceArray<r#T>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IReferenceArray<r#T> {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#T>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IReferenceArray<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#value: extern "system" fn(
                *const *const abi_IReferenceArray<r#T>,
                *mut u32,
                *mut *mut <r#T as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#T>,
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IReferenceArray<r#T> {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{61c17707-2d65-11e0-9ae8-d48564015472}",
                    <r#T as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IReferenceArray<r#T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IReferenceArray<r#T>>
            for r#IPropertyValue
        {
            fn from(value: r#IReferenceArray<r#T>) -> r#IPropertyValue {
                ::std::convert::From::from(&value)
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IReferenceArray<r#T>>
            for r#IPropertyValue
        {
            fn from(value: &r#IReferenceArray<r#T>) -> r#IPropertyValue {
                <r#IReferenceArray<r#T> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IReferenceArray<r#T>>
            for ::winrt::Object
        {
            fn from(value: r#IReferenceArray<r#T>) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IReferenceArray<r#T>>
            for ::winrt::Object
        {
            fn from(value: &r#IReferenceArray<r#T>) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IReference<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#IReference<r#T>>,
            __0: ::std::marker::PhantomData<r#T>,
        }
        impl<r#T: ::winrt::RuntimeType + 'static> r#IReference<r#T> {
            pub fn r#value(&self) -> ::winrt::Result<r#T> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#T = ::std::mem::zeroed();
                    ((*(*(this))).r#value)(this, <r#T as ::winrt::RuntimeType>::set_abi(&mut __ok))
                        .and_then(|| __ok)
                }
            }
            pub fn r#type(&self) -> ::winrt::Result<r#PropertyType> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#type()
            }
            pub fn r#is_numeric_scalar(&self) -> ::winrt::Result<bool> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#is_numeric_scalar()
            }
            pub fn r#get_uint8(&self) -> ::winrt::Result<u8> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint8()
            }
            pub fn r#get_int16(&self) -> ::winrt::Result<i16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int16()
            }
            pub fn r#get_uint16(&self) -> ::winrt::Result<u16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint16()
            }
            pub fn r#get_int32(&self) -> ::winrt::Result<i32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int32()
            }
            pub fn r#get_uint32(&self) -> ::winrt::Result<u32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint32()
            }
            pub fn r#get_int64(&self) -> ::winrt::Result<i64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_int64()
            }
            pub fn r#get_uint64(&self) -> ::winrt::Result<u64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_uint64()
            }
            pub fn r#get_single(&self) -> ::winrt::Result<f32> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_single()
            }
            pub fn r#get_double(&self) -> ::winrt::Result<f64> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_double()
            }
            pub fn r#get_char16(&self) -> ::winrt::Result<u16> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_char16()
            }
            pub fn r#get_boolean(&self) -> ::winrt::Result<bool> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_boolean()
            }
            pub fn r#get_string(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_string()
            }
            pub fn r#get_guid(&self) -> ::winrt::Result<::winrt::Guid> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_guid()
            }
            pub fn r#get_date_time(&self) -> ::winrt::Result<r#DateTime> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_date_time()
            }
            pub fn r#get_time_span(&self) -> ::winrt::Result<r#TimeSpan> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_time_span()
            }
            pub fn r#get_point(&self) -> ::winrt::Result<r#Point> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_point()
            }
            pub fn r#get_size(&self) -> ::winrt::Result<r#Size> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_size()
            }
            pub fn r#get_rect(&self) -> ::winrt::Result<r#Rect> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self).r#get_rect()
            }
            pub fn r#get_uint8_array(
                &self,
                r#value: &mut ::winrt::Array<u8>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint8_array(r#value)
            }
            pub fn r#get_int16_array(
                &self,
                r#value: &mut ::winrt::Array<i16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int16_array(r#value)
            }
            pub fn r#get_uint16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint16_array(r#value)
            }
            pub fn r#get_int32_array(
                &self,
                r#value: &mut ::winrt::Array<i32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int32_array(r#value)
            }
            pub fn r#get_uint32_array(
                &self,
                r#value: &mut ::winrt::Array<u32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint32_array(r#value)
            }
            pub fn r#get_int64_array(
                &self,
                r#value: &mut ::winrt::Array<i64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_int64_array(r#value)
            }
            pub fn r#get_uint64_array(
                &self,
                r#value: &mut ::winrt::Array<u64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_uint64_array(r#value)
            }
            pub fn r#get_single_array(
                &self,
                r#value: &mut ::winrt::Array<f32>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_single_array(r#value)
            }
            pub fn r#get_double_array(
                &self,
                r#value: &mut ::winrt::Array<f64>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_double_array(r#value)
            }
            pub fn r#get_char16_array(
                &self,
                r#value: &mut ::winrt::Array<u16>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_char16_array(r#value)
            }
            pub fn r#get_boolean_array(
                &self,
                r#value: &mut ::winrt::Array<bool>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_boolean_array(r#value)
            }
            pub fn r#get_string_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::HString>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_string_array(r#value)
            }
            pub fn r#get_inspectable_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Object>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_inspectable_array(r#value)
            }
            pub fn r#get_guid_array(
                &self,
                r#value: &mut ::winrt::Array<::winrt::Guid>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_guid_array(r#value)
            }
            pub fn r#get_date_time_array(
                &self,
                r#value: &mut ::winrt::Array<r#DateTime>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_date_time_array(r#value)
            }
            pub fn r#get_time_span_array(
                &self,
                r#value: &mut ::winrt::Array<r#TimeSpan>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_time_span_array(r#value)
            }
            pub fn r#get_point_array(
                &self,
                r#value: &mut ::winrt::Array<r#Point>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_point_array(r#value)
            }
            pub fn r#get_size_array(
                &self,
                r#value: &mut ::winrt::Array<r#Size>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_size_array(r#value)
            }
            pub fn r#get_rect_array(
                &self,
                r#value: &mut ::winrt::Array<r#Rect>,
            ) -> ::winrt::Result<()> {
                <r#IPropertyValue as ::std::convert::From<&Self>>::from(self)
                    .r#get_rect_array(r#value)
            }
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IReference<r#T> {
            type VTable = abi_IReference<r#T>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IReference<r#T> {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#T>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_IReference<r#T>
        where
            r#T: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#value: extern "system" fn(
                *const *const abi_IReference<r#T>,
                *mut <r#T as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#T>,
        }
        unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IReference<r#T> {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{})",
                    "{61c17706-2d65-11e0-9ae8-d48564015472}",
                    <r#T as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IReference<r#T> {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IReference<r#T>>
            for r#IPropertyValue
        {
            fn from(value: r#IReference<r#T>) -> r#IPropertyValue {
                ::std::convert::From::from(&value)
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IReference<r#T>>
            for r#IPropertyValue
        {
            fn from(value: &r#IReference<r#T>) -> r#IPropertyValue {
                <r#IReference<r#T> as ::winrt::ComInterface>::query(value)
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IReference<r#T>>
            for ::winrt::Object
        {
            fn from(value: r#IReference<r#T>) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IReference<r#T>>
            for ::winrt::Object
        {
            fn from(value: &r#IReference<r#T>) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStringable {
            ptr: ::winrt::ComPtr<r#IStringable>,
        }
        impl r#IStringable {
            pub fn r#to_string(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#to_string)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStringable {
            type VTable = abi_IStringable;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2520162132,
                    36534,
                    18672,
                    [171, 206, 193, 178, 17, 230, 39, 195],
                )
            }
        }
        impl ::std::clone::Clone for r#IStringable {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStringable {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#to_string: extern "system" fn(
                *const *const abi_IStringable,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStringable {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{96369f54-8eb6-48f0-abce-c1b211e627c3}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStringable {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStringable> for ::winrt::Object {
            fn from(value: r#IStringable) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStringable> for ::winrt::Object {
            fn from(value: &r#IStringable) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IUriEscapeStatics {
            ptr: ::winrt::ComPtr<r#IUriEscapeStatics>,
        }
        impl r#IUriEscapeStatics {
            pub fn r#unescape_component<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#to_unescape: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#unescape_component)(
                        this,
                        r#to_unescape.into().abi(),
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#escape_component<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#to_escape: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#escape_component)(
                        this,
                        r#to_escape.into().abi(),
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IUriEscapeStatics {
            type VTable = abi_IUriEscapeStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3251909306,
                    51236,
                    17490,
                    [167, 253, 81, 43, 195, 187, 233, 161],
                )
            }
        }
        impl ::std::clone::Clone for r#IUriEscapeStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriEscapeStatics {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#unescape_component: extern "system" fn(
                *const *const abi_IUriEscapeStatics,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#escape_component: extern "system" fn(
                *const *const abi_IUriEscapeStatics,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IUriEscapeStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{c1d432ba-c824-4452-a7fd-512bc3bbe9a1}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IUriEscapeStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IUriEscapeStatics> for ::winrt::Object {
            fn from(value: r#IUriEscapeStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IUriEscapeStatics> for ::winrt::Object {
            fn from(value: &r#IUriEscapeStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IUriRuntimeClass {
            ptr: ::winrt::ComPtr<r#IUriRuntimeClass>,
        }
        impl r#IUriRuntimeClass {
            pub fn r#absolute_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#absolute_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#domain(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#domain)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#extension(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#extension)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#fragment(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#fragment)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#host(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#host)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#password(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#password)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#query(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#query)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#query_parsed(&self) -> ::winrt::Result<r#WwwFormUrlDecoder> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#WwwFormUrlDecoder = ::std::mem::zeroed();
                    ((*(*(this))).r#query_parsed)(
                        this,
                        <r#WwwFormUrlDecoder as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#raw_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#raw_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#scheme_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#scheme_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#user_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#user_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#port(&self) -> ::winrt::Result<i32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: i32 = ::std::mem::zeroed();
                    ((*(*(this))).r#port)(this, <i32 as ::winrt::RuntimeType>::set_abi(&mut __ok))
                        .and_then(|| __ok)
                }
            }
            pub fn r#suspicious(&self) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#suspicious)(
                        this,
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#equals<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Uri>>>(
                &self,
                r#p_uri: __0,
            ) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#equals)(
                        this,
                        r#p_uri.into().abi(),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#combine_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#relative_uri: __0,
            ) -> ::winrt::Result<r#Uri> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Uri = ::std::mem::zeroed();
                    ((*(*(this))).r#combine_uri)(
                        this,
                        r#relative_uri.into().abi(),
                        <r#Uri as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IUriRuntimeClass {
            type VTable = abi_IUriRuntimeClass;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2654363223,
                    18610,
                    16736,
                    [149, 111, 199, 56, 81, 32, 187, 252],
                )
            }
        }
        impl ::std::clone::Clone for r#IUriRuntimeClass {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClass {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#absolute_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#display_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#domain: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#extension: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#fragment: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#host: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#password: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#path: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#query: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#query_parsed: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <r#WwwFormUrlDecoder as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#raw_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#scheme_name: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#user_name: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#port: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#suspicious: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                *mut bool,
            ) -> ::winrt::ErrorCode,
            pub r#equals: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                <r#Uri as ::winrt::RuntimeType>::Abi,
                *mut bool,
            ) -> ::winrt::ErrorCode,
            pub r#combine_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClass,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <r#Uri as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IUriRuntimeClass {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{9e365e57-48b2-4160-956f-c7385120bbfc}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IUriRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IUriRuntimeClass> for ::winrt::Object {
            fn from(value: r#IUriRuntimeClass) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IUriRuntimeClass> for ::winrt::Object {
            fn from(value: &r#IUriRuntimeClass) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IUriRuntimeClassFactory {
            ptr: ::winrt::ComPtr<r#IUriRuntimeClassFactory>,
        }
        impl r#IUriRuntimeClassFactory {
            pub fn r#create_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#uri: __0,
            ) -> ::winrt::Result<r#Uri> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Uri = ::std::mem::zeroed();
                    ((*(*(this))).r#create_uri)(
                        this,
                        r#uri.into().abi(),
                        <r#Uri as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#create_with_relative_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#base_uri: __0,
                r#relative_uri: __1,
            ) -> ::winrt::Result<r#Uri> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Uri = ::std::mem::zeroed();
                    ((*(*(this))).r#create_with_relative_uri)(
                        this,
                        r#base_uri.into().abi(),
                        r#relative_uri.into().abi(),
                        <r#Uri as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IUriRuntimeClassFactory {
            type VTable = abi_IUriRuntimeClassFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1151957359,
                    29246,
                    20447,
                    [162, 24, 3, 62, 117, 176, 192, 132],
                )
            }
        }
        impl ::std::clone::Clone for r#IUriRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClassFactory {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClassFactory,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <r#Uri as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#create_with_relative_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClassFactory,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <r#Uri as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IUriRuntimeClassFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{44a9796f-723e-4fdf-a218-033e75b0c084}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IUriRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IUriRuntimeClassFactory> for ::winrt::Object {
            fn from(value: r#IUriRuntimeClassFactory) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IUriRuntimeClassFactory> for ::winrt::Object {
            fn from(value: &r#IUriRuntimeClassFactory) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            ptr: ::winrt::ComPtr<r#IUriRuntimeClassWithAbsoluteCanonicalUri>,
        }
        impl r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            pub fn r#absolute_canonical_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#absolute_canonical_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_iri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_iri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            type VTable = abi_IUriRuntimeClassWithAbsoluteCanonicalUri;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1972213345,
                    8732,
                    18447,
                    [163, 57, 80, 101, 102, 115, 244, 111],
                )
            }
        }
        impl ::std::clone::Clone for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriRuntimeClassWithAbsoluteCanonicalUri {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#absolute_canonical_uri: extern "system" fn(
                *const *const abi_IUriRuntimeClassWithAbsoluteCanonicalUri,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#display_iri: extern "system" fn(
                *const *const abi_IUriRuntimeClassWithAbsoluteCanonicalUri,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{758d9661-221c-480f-a339-50656673f46f}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IUriRuntimeClassWithAbsoluteCanonicalUri> for ::winrt::Object {
            fn from(value: r#IUriRuntimeClassWithAbsoluteCanonicalUri) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IUriRuntimeClassWithAbsoluteCanonicalUri> for ::winrt::Object {
            fn from(value: &r#IUriRuntimeClassWithAbsoluteCanonicalUri) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IWwwFormUrlDecoderEntry {
            ptr: ::winrt::ComPtr<r#IWwwFormUrlDecoderEntry>,
        }
        impl r#IWwwFormUrlDecoderEntry {
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#value)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IWwwFormUrlDecoderEntry {
            type VTable = abi_IWwwFormUrlDecoderEntry;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    308180017,
                    63096,
                    20110,
                    [182, 112, 32, 169, 176, 108, 81, 45],
                )
            }
        }
        impl ::std::clone::Clone for r#IWwwFormUrlDecoderEntry {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderEntry {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#name: extern "system" fn(
                *const *const abi_IWwwFormUrlDecoderEntry,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#value: extern "system" fn(
                *const *const abi_IWwwFormUrlDecoderEntry,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IWwwFormUrlDecoderEntry {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{125e7431-f678-4e8e-b670-20a9b06c512d}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IWwwFormUrlDecoderEntry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IWwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: r#IWwwFormUrlDecoderEntry) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IWwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: &r#IWwwFormUrlDecoderEntry) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IWwwFormUrlDecoderRuntimeClass {
            ptr: ::winrt::ComPtr<r#IWwwFormUrlDecoderRuntimeClass>,
        }
        impl r#IWwwFormUrlDecoderRuntimeClass {
            pub fn r#get_first_value_by_name<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#get_first_value_by_name)(
                        this,
                        r#name.into().abi(),
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#first(
                &self,
            ) -> ::winrt::Result<r#collections::r#IIterator<r#IWwwFormUrlDecoderEntry>>
            {
                <r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#first()
            }
            pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IWwwFormUrlDecoderEntry> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#get_at(r#index)
            }
            pub fn r#size(&self) -> ::winrt::Result<u32> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#size()
            }
            pub fn r#index_of<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                r#value: __0,
                r#index: &mut u32,
            ) -> ::winrt::Result<bool> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#index_of(r#value, r#index)
            }
            pub fn r#get_many(
                &self,
                r#start_index: u32,
                r#items: &mut [r#IWwwFormUrlDecoderEntry],
            ) -> ::winrt::Result<u32> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#get_many(r#start_index, r#items)
            }
        }
        unsafe impl ::winrt::ComInterface for r#IWwwFormUrlDecoderRuntimeClass {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClass;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3562669137,
                    61989,
                    17730,
                    [146, 150, 14, 29, 245, 210, 84, 223],
                )
            }
        }
        impl ::std::clone::Clone for r#IWwwFormUrlDecoderRuntimeClass {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderRuntimeClass {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_first_value_by_name: extern "system" fn(
                *const *const abi_IWwwFormUrlDecoderRuntimeClass,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IWwwFormUrlDecoderRuntimeClass {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{d45a0451-f225-4542-9296-0e1df5d254df}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IWwwFormUrlDecoderRuntimeClass {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IWwwFormUrlDecoderRuntimeClass>
            for r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: r#IWwwFormUrlDecoderRuntimeClass,
            ) -> r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IWwwFormUrlDecoderRuntimeClass>
            for r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: &r#IWwwFormUrlDecoderRuntimeClass,
            ) -> r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> {
                <r#IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IWwwFormUrlDecoderRuntimeClass>
            for r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: r#IWwwFormUrlDecoderRuntimeClass,
            ) -> r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IWwwFormUrlDecoderRuntimeClass>
            for r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: &r#IWwwFormUrlDecoderRuntimeClass,
            ) -> r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> {
                <r#IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IWwwFormUrlDecoderRuntimeClass> for ::winrt::Object {
            fn from(value: r#IWwwFormUrlDecoderRuntimeClass) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IWwwFormUrlDecoderRuntimeClass> for ::winrt::Object {
            fn from(value: &r#IWwwFormUrlDecoderRuntimeClass) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::iter::IntoIterator for r#IWwwFormUrlDecoderRuntimeClass {
            type Item = r#IWwwFormUrlDecoderEntry;
            type IntoIter = r#collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                r#collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a r#IWwwFormUrlDecoderRuntimeClass {
            type Item = r#IWwwFormUrlDecoderEntry;
            type IntoIter = r#collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                r#collections::VectorViewIterator::new(self.into())
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IWwwFormUrlDecoderRuntimeClassFactory {
            ptr: ::winrt::ComPtr<r#IWwwFormUrlDecoderRuntimeClassFactory>,
        }
        impl r#IWwwFormUrlDecoderRuntimeClassFactory {
            pub fn r#create_www_form_url_decoder<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#query: __0,
            ) -> ::winrt::Result<r#WwwFormUrlDecoder> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#WwwFormUrlDecoder = ::std::mem::zeroed();
                    ((*(*(this))).r#create_www_form_url_decoder)(
                        this,
                        r#query.into().abi(),
                        <r#WwwFormUrlDecoder as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IWwwFormUrlDecoderRuntimeClassFactory {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClassFactory;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1535929149,
                    9390,
                    16821,
                    [161, 191, 240, 195, 213, 68, 132, 91],
                )
            }
        }
        impl ::std::clone::Clone for r#IWwwFormUrlDecoderRuntimeClassFactory {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWwwFormUrlDecoderRuntimeClassFactory {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#create_www_form_url_decoder: extern "system" fn(
                *const *const abi_IWwwFormUrlDecoderRuntimeClassFactory,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <r#WwwFormUrlDecoder as ::winrt::RuntimeType>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IWwwFormUrlDecoderRuntimeClassFactory {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{5b8c6b3d-24ae-41b5-a1bf-f0c3d544845b}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IWwwFormUrlDecoderRuntimeClassFactory {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IWwwFormUrlDecoderRuntimeClassFactory> for ::winrt::Object {
            fn from(value: r#IWwwFormUrlDecoderRuntimeClassFactory) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IWwwFormUrlDecoderRuntimeClassFactory> for ::winrt::Object {
            fn from(value: &r#IWwwFormUrlDecoderRuntimeClassFactory) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#MemoryBuffer {
            ptr: ::winrt::ComPtr<r#MemoryBuffer>,
        }
        impl r#MemoryBuffer {
            pub fn r#create_reference(&self) -> ::winrt::Result<r#IMemoryBufferReference> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#IMemoryBufferReference = ::std::mem::zeroed();
                    ((*(*(this))).r#create_reference)(
                        this,
                        <r#IMemoryBufferReference as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <r#IClosable as ::std::convert::From<&Self>>::from(self).r#close()
            }
            pub fn r#create(r#capacity: u32) -> ::winrt::Result<r#MemoryBuffer> {
                ::winrt::factory::<Self, r#IMemoryBufferFactory>()?.r#create(r#capacity)
            }
        }
        impl ::winrt::RuntimeName for r#MemoryBuffer {
            const NAME: &'static str = "Windows.Foundation.MemoryBuffer";
        }
        unsafe impl ::winrt::ComInterface for r#MemoryBuffer {
            type VTable = abi_IMemoryBuffer;
            fn iid() -> ::winrt::Guid {
                <r#IMemoryBuffer as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#MemoryBuffer {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Foundation.MemoryBuffer;{fbc4dd2a-245b-11e4-af98-689423260cf8})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#MemoryBuffer {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#MemoryBuffer> for r#IMemoryBuffer {
            fn from(value: r#MemoryBuffer) -> r#IMemoryBuffer {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#MemoryBuffer> for r#IMemoryBuffer {
            fn from(value: &r#MemoryBuffer) -> r#IMemoryBuffer {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#MemoryBuffer> for r#IClosable {
            fn from(value: r#MemoryBuffer) -> r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#MemoryBuffer> for r#IClosable {
            fn from(value: &r#MemoryBuffer) -> r#IClosable {
                <r#MemoryBuffer as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#MemoryBuffer> for ::winrt::Object {
            fn from(value: r#MemoryBuffer) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#MemoryBuffer> for ::winrt::Object {
            fn from(value: &r#MemoryBuffer) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#Point {
            pub r#x: f32,
            pub r#y: f32,
        }
        unsafe impl ::winrt::RuntimeType for r#Point {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.Point;f4;f4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#PropertyType {
            value: i32,
        }
        impl r#PropertyType {
            #![allow(non_upper_case_globals)]
            pub const r#Empty: Self = Self { value: 0i32 };
            pub const r#UInt8: Self = Self { value: 1i32 };
            pub const r#Int16: Self = Self { value: 2i32 };
            pub const r#UInt16: Self = Self { value: 3i32 };
            pub const r#Int32: Self = Self { value: 4i32 };
            pub const r#UInt32: Self = Self { value: 5i32 };
            pub const r#Int64: Self = Self { value: 6i32 };
            pub const r#UInt64: Self = Self { value: 7i32 };
            pub const r#Single: Self = Self { value: 8i32 };
            pub const r#Double: Self = Self { value: 9i32 };
            pub const r#Char16: Self = Self { value: 10i32 };
            pub const r#Boolean: Self = Self { value: 11i32 };
            pub const r#String: Self = Self { value: 12i32 };
            pub const r#Inspectable: Self = Self { value: 13i32 };
            pub const r#DateTime: Self = Self { value: 14i32 };
            pub const r#TimeSpan: Self = Self { value: 15i32 };
            pub const r#Guid: Self = Self { value: 16i32 };
            pub const r#Point: Self = Self { value: 17i32 };
            pub const r#Size: Self = Self { value: 18i32 };
            pub const r#Rect: Self = Self { value: 19i32 };
            pub const r#OtherType: Self = Self { value: 20i32 };
            pub const r#UInt8Array: Self = Self { value: 1025i32 };
            pub const r#Int16Array: Self = Self { value: 1026i32 };
            pub const r#UInt16Array: Self = Self { value: 1027i32 };
            pub const r#Int32Array: Self = Self { value: 1028i32 };
            pub const r#UInt32Array: Self = Self { value: 1029i32 };
            pub const r#Int64Array: Self = Self { value: 1030i32 };
            pub const r#UInt64Array: Self = Self { value: 1031i32 };
            pub const r#SingleArray: Self = Self { value: 1032i32 };
            pub const r#DoubleArray: Self = Self { value: 1033i32 };
            pub const r#Char16Array: Self = Self { value: 1034i32 };
            pub const r#BooleanArray: Self = Self { value: 1035i32 };
            pub const r#StringArray: Self = Self { value: 1036i32 };
            pub const r#InspectableArray: Self = Self { value: 1037i32 };
            pub const r#DateTimeArray: Self = Self { value: 1038i32 };
            pub const r#TimeSpanArray: Self = Self { value: 1039i32 };
            pub const r#GuidArray: Self = Self { value: 1040i32 };
            pub const r#PointArray: Self = Self { value: 1041i32 };
            pub const r#SizeArray: Self = Self { value: 1042i32 };
            pub const r#RectArray: Self = Self { value: 1043i32 };
            pub const r#OtherTypeArray: Self = Self { value: 1044i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#PropertyType {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Foundation.PropertyType;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        pub struct r#PropertyValue {}
        impl r#PropertyValue {
            pub fn r#create_empty() -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_empty()
            }
            pub fn r#create_uint8(r#value: u8) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint8(r#value)
            }
            pub fn r#create_int16(r#value: i16) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int16(r#value)
            }
            pub fn r#create_uint16(r#value: u16) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint16(r#value)
            }
            pub fn r#create_int32(r#value: i32) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int32(r#value)
            }
            pub fn r#create_uint32(r#value: u32) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint32(r#value)
            }
            pub fn r#create_int64(r#value: i64) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int64(r#value)
            }
            pub fn r#create_uint64(r#value: u64) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint64(r#value)
            }
            pub fn r#create_single(r#value: f32) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_single(r#value)
            }
            pub fn r#create_double(r#value: f64) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_double(r#value)
            }
            pub fn r#create_char16(r#value: u16) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_char16(r#value)
            }
            pub fn r#create_boolean(r#value: bool) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_boolean(r#value)
            }
            pub fn r#create_string<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_string(r#value)
            }
            pub fn r#create_inspectable<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
            >(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_inspectable(r#value)
            }
            pub fn r#create_guid<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Guid>>,
            >(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_guid(r#value)
            }
            pub fn r#create_date_time<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#DateTime>>,
            >(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_date_time(r#value)
            }
            pub fn r#create_time_span<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#TimeSpan>>,
            >(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_time_span(r#value)
            }
            pub fn r#create_point<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Point>>>(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_point(r#value)
            }
            pub fn r#create_size<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Size>>>(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_size(r#value)
            }
            pub fn r#create_rect<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Rect>>>(
                r#value: __0,
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_rect(r#value)
            }
            pub fn r#create_uint8_array(r#value: &[u8]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint8_array(r#value)
            }
            pub fn r#create_int16_array(r#value: &[i16]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int16_array(r#value)
            }
            pub fn r#create_uint16_array(r#value: &[u16]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint16_array(r#value)
            }
            pub fn r#create_int32_array(r#value: &[i32]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int32_array(r#value)
            }
            pub fn r#create_uint32_array(r#value: &[u32]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint32_array(r#value)
            }
            pub fn r#create_int64_array(r#value: &[i64]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_int64_array(r#value)
            }
            pub fn r#create_uint64_array(r#value: &[u64]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_uint64_array(r#value)
            }
            pub fn r#create_single_array(r#value: &[f32]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_single_array(r#value)
            }
            pub fn r#create_double_array(r#value: &[f64]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_double_array(r#value)
            }
            pub fn r#create_char16_array(r#value: &[u16]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_char16_array(r#value)
            }
            pub fn r#create_boolean_array(r#value: &[bool]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_boolean_array(r#value)
            }
            pub fn r#create_string_array(
                r#value: &[::winrt::HString],
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_string_array(r#value)
            }
            pub fn r#create_inspectable_array(
                r#value: &[::winrt::Object],
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?
                    .r#create_inspectable_array(r#value)
            }
            pub fn r#create_guid_array(
                r#value: &[::winrt::Guid],
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_guid_array(r#value)
            }
            pub fn r#create_date_time_array(
                r#value: &[r#DateTime],
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?
                    .r#create_date_time_array(r#value)
            }
            pub fn r#create_time_span_array(
                r#value: &[r#TimeSpan],
            ) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?
                    .r#create_time_span_array(r#value)
            }
            pub fn r#create_point_array(r#value: &[r#Point]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_point_array(r#value)
            }
            pub fn r#create_size_array(r#value: &[r#Size]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_size_array(r#value)
            }
            pub fn r#create_rect_array(r#value: &[r#Rect]) -> ::winrt::Result<::winrt::Object> {
                ::winrt::factory::<Self, r#IPropertyValueStatics>()?.r#create_rect_array(r#value)
            }
        }
        impl ::winrt::RuntimeName for r#PropertyValue {
            const NAME: &'static str = "Windows.Foundation.PropertyValue";
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#Rect {
            pub r#x: f32,
            pub r#y: f32,
            pub r#width: f32,
            pub r#height: f32,
        }
        unsafe impl ::winrt::RuntimeType for r#Rect {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.Rect;f4;f4;f4;f4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#Size {
            pub r#width: f32,
            pub r#height: f32,
        }
        unsafe impl ::winrt::RuntimeType for r#Size {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.Size;f4;f4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(C)]
        #[derive(Clone, Default, Debug, PartialEq)]
        pub struct r#TimeSpan {
            pub r#duration: i64,
        }
        unsafe impl ::winrt::RuntimeType for r#TimeSpan {
            type Abi = Self;
            fn signature() -> String {
                "struct(Windows.Foundation.TimeSpan;i8)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.clone()
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self as *mut Self::Abi
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#TypedEventHandler<r#TSender, r#TResult>
        where
            r#TSender: ::winrt::RuntimeType + 'static,
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            ptr: ::winrt::ComPtr<r#TypedEventHandler<r#TSender, r#TResult>>,
            __0: ::std::marker::PhantomData<r#TSender>,
            __1: ::std::marker::PhantomData<r#TResult>,
        }
        impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
            > r#TypedEventHandler<r#TSender, r#TResult>
        {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#TSender>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#TResult>>,
            >(
                &self,
                r#sender: __0,
                r#args: __1,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#invoke)(this, r#sender.into().abi(), r#args.into().abi()).ok()
                }
            }
            pub fn new<F: FnMut(&r#TSender, &r#TResult) -> ::winrt::Result<()>>(invoke: F) -> Self {
                impl_TypedEventHandler::<r#TSender, r#TResult, F>::new(invoke)
            }
        }
        unsafe impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
            > ::winrt::ComInterface for r#TypedEventHandler<r#TSender, r#TResult>
        {
            type VTable = abi_TypedEventHandler<r#TSender, r#TResult>;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_signature::<Self>()
            }
        }
        impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
            > ::std::clone::Clone for r#TypedEventHandler<r#TSender, r#TResult>
        {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                    __0: ::std::marker::PhantomData::<r#TSender>,
                    __1: ::std::marker::PhantomData::<r#TResult>,
                }
            }
        }
        #[repr(C)]
        pub struct abi_TypedEventHandler<r#TSender, r#TResult>
        where
            r#TSender: ::winrt::RuntimeType + 'static,
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_TypedEventHandler<r#TSender, r#TResult>,
                <r#TSender as ::winrt::RuntimeType>::Abi,
                <r#TResult as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            __0: ::std::marker::PhantomData<r#TSender>,
            __1: ::std::marker::PhantomData<r#TResult>,
        }
        unsafe impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
            > ::winrt::RuntimeType for r#TypedEventHandler<r#TSender, r#TResult>
        {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                format!(
                    "pinterface({};{};{})",
                    "{9de1c534-6ae1-11e0-84e1-18a905bcc53f}",
                    <r#TSender as ::winrt::RuntimeType>::signature(),
                    <r#TResult as ::winrt::RuntimeType>::signature()
                )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
            > ::std::fmt::Debug for r#TypedEventHandler<r#TSender, r#TResult>
        {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_TypedEventHandler<
            r#TSender,
            r#TResult,
            F: FnMut(&r#TSender, &r#TResult) -> ::winrt::Result<()>,
        >
        where
            r#TSender: ::winrt::RuntimeType + 'static,
            r#TResult: ::winrt::RuntimeType + 'static,
        {
            vtable: *const abi_TypedEventHandler<r#TSender, r#TResult>,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<
                r#TSender: ::winrt::RuntimeType + 'static,
                r#TResult: ::winrt::RuntimeType + 'static,
                F: FnMut(&r#TSender, &r#TResult) -> ::winrt::Result<()>,
            > impl_TypedEventHandler<r#TSender, r#TResult, F>
        {
            const VTABLE: abi_TypedEventHandler<r#TSender, r#TResult> = abi_TypedEventHandler::<
                r#TSender,
                r#TResult,
            > {
                unknown_query_interface:
                    impl_TypedEventHandler::<r#TSender, r#TResult, F>::unknown_query_interface,
                unknown_add_ref: impl_TypedEventHandler::<r#TSender, r#TResult, F>::unknown_add_ref,
                unknown_release: impl_TypedEventHandler::<r#TSender, r#TResult, F>::unknown_release,
                invoke: impl_TypedEventHandler::<r#TSender, r#TResult, F>::invoke,
                __0: ::std::marker::PhantomData::<r#TSender>,
                __1: ::std::marker::PhantomData::<r#TResult>,
            };
            pub fn new(invoke: F) -> r#TypedEventHandler<r#TSender, r#TResult> {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#TypedEventHandler<r#TSender, r#TResult> = std::mem::zeroed();
                    *<r#TypedEventHandler<r#TSender, r#TResult> as ::winrt::RuntimeType>::set_abi(
                        &mut result,
                    ) = ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                        as *const *const abi_TypedEventHandler<r#TSender, r#TResult>;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == & < r#TypedEventHandler :: < r#TSender , r#TResult > as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IUnknown as :: winrt :: ComInterface > :: iid ( ) || iid == & < :: winrt :: IAgileObject as :: winrt :: ComInterface > :: iid ( ) { * interface = this as :: winrt :: RawPtr ; ( * this ) . count . add_ref ( ) ; return :: winrt :: ErrorCode ( 0 ) ; }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_TypedEventHandler<r#TSender, r#TResult>,
                r#sender: <r#TSender as ::winrt::RuntimeType>::Abi,
                r#args: <r#TResult as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(
                        ::winrt::RuntimeType::from_abi(&r#sender),
                        ::winrt::RuntimeType::from_abi(&r#args),
                    )
                    .into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#Uri {
            ptr: ::winrt::ComPtr<r#Uri>,
        }
        impl r#Uri {
            pub fn r#absolute_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#absolute_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#domain(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#domain)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#extension(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#extension)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#fragment(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#fragment)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#host(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#host)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#password(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#password)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#query(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#query)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#query_parsed(&self) -> ::winrt::Result<r#WwwFormUrlDecoder> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#WwwFormUrlDecoder = ::std::mem::zeroed();
                    ((*(*(this))).r#query_parsed)(
                        this,
                        <r#WwwFormUrlDecoder as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#raw_uri(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#raw_uri)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#scheme_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#scheme_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#user_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#user_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#port(&self) -> ::winrt::Result<i32> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: i32 = ::std::mem::zeroed();
                    ((*(*(this))).r#port)(this, <i32 as ::winrt::RuntimeType>::set_abi(&mut __ok))
                        .and_then(|| __ok)
                }
            }
            pub fn r#suspicious(&self) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#suspicious)(
                        this,
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#equals<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#Uri>>>(
                &self,
                r#p_uri: __0,
            ) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#equals)(
                        this,
                        r#p_uri.into().abi(),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#combine_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#relative_uri: __0,
            ) -> ::winrt::Result<r#Uri> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#Uri = ::std::mem::zeroed();
                    ((*(*(this))).r#combine_uri)(
                        this,
                        r#relative_uri.into().abi(),
                        <r#Uri as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#to_string(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStringable as ::std::convert::From<&Self>>::from(self).r#to_string()
            }
            pub fn r#absolute_canonical_uri(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IUriRuntimeClassWithAbsoluteCanonicalUri as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#absolute_canonical_uri()
            }
            pub fn r#display_iri(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IUriRuntimeClassWithAbsoluteCanonicalUri as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#display_iri()
            }
            pub fn r#create_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#uri: __0,
            ) -> ::winrt::Result<r#Uri> {
                ::winrt::factory::<Self, r#IUriRuntimeClassFactory>()?.r#create_uri(r#uri)
            }
            pub fn r#create_with_relative_uri<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#base_uri: __0,
                r#relative_uri: __1,
            ) -> ::winrt::Result<r#Uri> {
                ::winrt::factory::<Self, r#IUriRuntimeClassFactory>()?
                    .r#create_with_relative_uri(r#base_uri, r#relative_uri)
            }
            pub fn r#unescape_component<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#to_unescape: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                ::winrt::factory::<Self, r#IUriEscapeStatics>()?.r#unescape_component(r#to_unescape)
            }
            pub fn r#escape_component<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#to_escape: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                ::winrt::factory::<Self, r#IUriEscapeStatics>()?.r#escape_component(r#to_escape)
            }
        }
        impl ::winrt::RuntimeName for r#Uri {
            const NAME: &'static str = "Windows.Foundation.Uri";
        }
        unsafe impl ::winrt::ComInterface for r#Uri {
            type VTable = abi_IUriRuntimeClass;
            fn iid() -> ::winrt::Guid {
                <r#IUriRuntimeClass as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#Uri {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Foundation.Uri;{9e365e57-48b2-4160-956f-c7385120bbfc})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#Uri {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#Uri> for r#IUriRuntimeClass {
            fn from(value: r#Uri) -> r#IUriRuntimeClass {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#Uri> for r#IUriRuntimeClass {
            fn from(value: &r#Uri) -> r#IUriRuntimeClass {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#Uri> for r#IStringable {
            fn from(value: r#Uri) -> r#IStringable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#Uri> for r#IStringable {
            fn from(value: &r#Uri) -> r#IStringable {
                <r#Uri as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#Uri> for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: r#Uri) -> r#IUriRuntimeClassWithAbsoluteCanonicalUri {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#Uri> for r#IUriRuntimeClassWithAbsoluteCanonicalUri {
            fn from(value: &r#Uri) -> r#IUriRuntimeClassWithAbsoluteCanonicalUri {
                <r#Uri as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#Uri> for ::winrt::Object {
            fn from(value: r#Uri) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#Uri> for ::winrt::Object {
            fn from(value: &r#Uri) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#WwwFormUrlDecoder {
            ptr: ::winrt::ComPtr<r#WwwFormUrlDecoder>,
        }
        impl r#WwwFormUrlDecoder {
            pub fn r#get_first_value_by_name<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#get_first_value_by_name)(
                        this,
                        r#name.into().abi(),
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#first(
                &self,
            ) -> ::winrt::Result<r#collections::r#IIterator<r#IWwwFormUrlDecoderEntry>>
            {
                <r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#first()
            }
            pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#IWwwFormUrlDecoderEntry> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#get_at(r#index)
            }
            pub fn r#size(&self) -> ::winrt::Result<u32> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#size()
            }
            pub fn r#index_of<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IWwwFormUrlDecoderEntry>>,
            >(
                &self,
                r#value: __0,
                r#index: &mut u32,
            ) -> ::winrt::Result<bool> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#index_of(r#value, r#index)
            }
            pub fn r#get_many(
                &self,
                r#start_index: u32,
                r#items: &mut [r#IWwwFormUrlDecoderEntry],
            ) -> ::winrt::Result<u32> {
                <r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> as ::std::convert::From<
                    &Self,
                >>::from(self)
                .r#get_many(r#start_index, r#items)
            }
            pub fn r#create_www_form_url_decoder<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#query: __0,
            ) -> ::winrt::Result<r#WwwFormUrlDecoder> {
                ::winrt::factory::<Self, r#IWwwFormUrlDecoderRuntimeClassFactory>()?
                    .r#create_www_form_url_decoder(r#query)
            }
        }
        impl ::winrt::RuntimeName for r#WwwFormUrlDecoder {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoder";
        }
        unsafe impl ::winrt::ComInterface for r#WwwFormUrlDecoder {
            type VTable = abi_IWwwFormUrlDecoderRuntimeClass;
            fn iid() -> ::winrt::Guid {
                <r#IWwwFormUrlDecoderRuntimeClass as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#WwwFormUrlDecoder {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Foundation.WwwFormUrlDecoder;{d45a0451-f225-4542-9296-0e1df5d254df})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#WwwFormUrlDecoder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoder> for r#IWwwFormUrlDecoderRuntimeClass {
            fn from(value: r#WwwFormUrlDecoder) -> r#IWwwFormUrlDecoderRuntimeClass {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoder> for r#IWwwFormUrlDecoderRuntimeClass {
            fn from(value: &r#WwwFormUrlDecoder) -> r#IWwwFormUrlDecoderRuntimeClass {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoder>
            for r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: r#WwwFormUrlDecoder,
            ) -> r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoder>
            for r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: &r#WwwFormUrlDecoder,
            ) -> r#collections::r#IIterable<r#IWwwFormUrlDecoderEntry> {
                <r#WwwFormUrlDecoder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoder>
            for r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: r#WwwFormUrlDecoder,
            ) -> r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoder>
            for r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry>
        {
            fn from(
                value: &r#WwwFormUrlDecoder,
            ) -> r#collections::r#IVectorView<r#IWwwFormUrlDecoderEntry> {
                <r#WwwFormUrlDecoder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoder> for ::winrt::Object {
            fn from(value: r#WwwFormUrlDecoder) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoder> for ::winrt::Object {
            fn from(value: &r#WwwFormUrlDecoder) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::iter::IntoIterator for r#WwwFormUrlDecoder {
            type Item = r#IWwwFormUrlDecoderEntry;
            type IntoIter = r#collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                r#collections::VectorViewIterator::new(self.into())
            }
        }
        impl<'a> ::std::iter::IntoIterator for &'a r#WwwFormUrlDecoder {
            type Item = r#IWwwFormUrlDecoderEntry;
            type IntoIter = r#collections::VectorViewIterator<Self::Item>;
            fn into_iter(self) -> Self::IntoIter {
                r#collections::VectorViewIterator::new(self.into())
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#WwwFormUrlDecoderEntry {
            ptr: ::winrt::ComPtr<r#WwwFormUrlDecoderEntry>,
        }
        impl r#WwwFormUrlDecoderEntry {
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#value)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        impl ::winrt::RuntimeName for r#WwwFormUrlDecoderEntry {
            const NAME: &'static str = "Windows.Foundation.WwwFormUrlDecoderEntry";
        }
        unsafe impl ::winrt::ComInterface for r#WwwFormUrlDecoderEntry {
            type VTable = abi_IWwwFormUrlDecoderEntry;
            fn iid() -> ::winrt::Guid {
                <r#IWwwFormUrlDecoderEntry as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#WwwFormUrlDecoderEntry {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Foundation.WwwFormUrlDecoderEntry;{125e7431-f678-4e8e-b670-20a9b06c512d})" . to_owned ( )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#WwwFormUrlDecoderEntry {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoderEntry> for r#IWwwFormUrlDecoderEntry {
            fn from(value: r#WwwFormUrlDecoderEntry) -> r#IWwwFormUrlDecoderEntry {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoderEntry> for r#IWwwFormUrlDecoderEntry {
            fn from(value: &r#WwwFormUrlDecoderEntry) -> r#IWwwFormUrlDecoderEntry {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#WwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: r#WwwFormUrlDecoderEntry) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#WwwFormUrlDecoderEntry> for ::winrt::Object {
            fn from(value: &r#WwwFormUrlDecoderEntry) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        pub mod r#collections {
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#CollectionChange {
                value: i32,
            }
            impl r#CollectionChange {
                #![allow(non_upper_case_globals)]
                pub const r#Reset: Self = Self { value: 0i32 };
                pub const r#ItemInserted: Self = Self { value: 1i32 };
                pub const r#ItemRemoved: Self = Self { value: 2i32 };
                pub const r#ItemChanged: Self = Self { value: 3i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#CollectionChange {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Foundation.Collections.CollectionChange;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IIterable<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IIterable<r#T>>,
                __0: ::std::marker::PhantomData<r#T>,
            }
            impl<r#T: ::winrt::RuntimeType + 'static> r#IIterable<r#T> {
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#T>> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IIterator<r#T> = ::std::mem::zeroed();
                        ((*(*(this))).r#first)(
                            this,
                            <r#IIterator<r#T> as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IIterable<r#T> {
                type VTable = abi_IIterable<r#T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IIterable<r#T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IIterable<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#first: extern "system" fn(
                    *const *const abi_IIterable<r#T>,
                    *mut <r#IIterator<r#T> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#T>,
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IIterable<r#T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{faa585ea-6214-4217-afda-7f46de5869b3}",
                        <r#T as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IIterable<r#T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IIterable<r#T>>
                for ::winrt::Object
            {
                fn from(value: r#IIterable<r#T>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IIterable<r#T>>
                for ::winrt::Object
            {
                fn from(value: &r#IIterable<r#T>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IIterator<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IIterator<r#T>>,
                __0: ::std::marker::PhantomData<r#T>,
            }
            impl<r#T: ::winrt::RuntimeType + 'static> r#IIterator<r#T> {
                pub fn r#current(&self) -> ::winrt::Result<r#T> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#T = ::std::mem::zeroed();
                        ((*(*(this))).r#current)(
                            this,
                            <r#T as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#has_current(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#has_current)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#move_next(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#move_next)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_many(&self, r#items: &mut [r#T]) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#get_many)(
                            this,
                            r#items.len() as u32,
                            ::std::mem::transmute_copy(&r#items),
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IIterator<r#T> {
                type VTable = abi_IIterator<r#T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IIterator<r#T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IIterator<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#current: extern "system" fn(
                    *const *const abi_IIterator<r#T>,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#has_current: extern "system" fn(
                    *const *const abi_IIterator<r#T>,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#move_next: extern "system" fn(
                    *const *const abi_IIterator<r#T>,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#get_many: extern "system" fn(
                    *const *const abi_IIterator<r#T>,
                    u32,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#T>,
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IIterator<r#T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{6a79e863-4300-459a-9966-cbb660963ee1}",
                        <r#T as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IIterator<r#T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IIterator<r#T>>
                for ::winrt::Object
            {
                fn from(value: r#IIterator<r#T>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IIterator<r#T>>
                for ::winrt::Object
            {
                fn from(value: &r#IIterator<r#T>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for IIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    let result = self.current().ok();
                    if result.is_some() {
                        self.move_next().ok()?;
                    }
                    result
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IKeyValuePair<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IKeyValuePair<r#K, r#V>>,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                r#IKeyValuePair<r#K, r#V>
            {
                pub fn r#key(&self) -> ::winrt::Result<r#K> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#K = ::std::mem::zeroed();
                        ((*(*(this))).r#key)(
                            this,
                            <r#K as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#value(&self) -> ::winrt::Result<r#V> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#V = ::std::mem::zeroed();
                        ((*(*(this))).r#value)(
                            this,
                            <r#V as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for r#IKeyValuePair<r#K, r#V>
            {
                type VTable = abi_IKeyValuePair<r#K, r#V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for r#IKeyValuePair<r#K, r#V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                        __1: ::std::marker::PhantomData::<r#V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IKeyValuePair<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#key: extern "system" fn(
                    *const *const abi_IKeyValuePair<r#K, r#V>,
                    *mut <r#K as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#value: extern "system" fn(
                    *const *const abi_IKeyValuePair<r#K, r#V>,
                    *mut <r#V as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for r#IKeyValuePair<r#K, r#V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{02b51929-c1c4-4a7e-8940-0312b5c18500}",
                        <r#K as ::winrt::RuntimeType>::signature(),
                        <r#V as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for r#IKeyValuePair<r#K, r#V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IKeyValuePair<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: r#IKeyValuePair<r#K, r#V>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IKeyValuePair<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: &r#IKeyValuePair<r#K, r#V>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IMapChangedEventArgs<r#K>
            where
                r#K: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IMapChangedEventArgs<r#K>>,
                __0: ::std::marker::PhantomData<r#K>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static> r#IMapChangedEventArgs<r#K> {
                pub fn r#collection_change(&self) -> ::winrt::Result<r#CollectionChange> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#CollectionChange = ::std::mem::zeroed();
                        ((*(*(this))).r#collection_change)(
                            this,
                            <r#CollectionChange as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#key(&self) -> ::winrt::Result<r#K> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#K = ::std::mem::zeroed();
                        ((*(*(this))).r#key)(
                            this,
                            <r#K as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static> ::winrt::ComInterface
                for r#IMapChangedEventArgs<r#K>
            {
                type VTable = abi_IMapChangedEventArgs<r#K>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IMapChangedEventArgs<r#K> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMapChangedEventArgs<r#K>
            where
                r#K: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#collection_change: extern "system" fn(
                    *const *const abi_IMapChangedEventArgs<r#K>,
                    *mut <r#CollectionChange as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#key: extern "system" fn(
                    *const *const abi_IMapChangedEventArgs<r#K>,
                    *mut <r#K as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType
                for r#IMapChangedEventArgs<r#K>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{9939f4df-050a-4c0f-aa60-77075f9c4777}",
                        <r#K as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IMapChangedEventArgs<r#K> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IMapChangedEventArgs<r#K>> for ::winrt::Object
            {
                fn from(value: r#IMapChangedEventArgs<r#K>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IMapChangedEventArgs<r#K>> for ::winrt::Object
            {
                fn from(value: &r#IMapChangedEventArgs<r#K>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IMapView<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IMapView<r#K, r#V>>,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                r#IMapView<r#K, r#V>
            {
                pub fn r#lookup<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<r#V> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#V = ::std::mem::zeroed();
                        ((*(*(this))).r#lookup)(
                            this,
                            r#key.into().abi(),
                            <r#V as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#has_key<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#has_key)(
                            this,
                            r#key.into().abi(),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#split(
                    &self,
                    r#first: &mut r#IMapView<r#K, r#V>,
                    r#second: &mut r#IMapView<r#K, r#V>,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#split)(
                            this,
                            ::winrt::RuntimeType::set_abi(r#first),
                            ::winrt::RuntimeType::set_abi(r#second),
                        )
                        .ok()
                    }
                }
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#IKeyValuePair<r#K, r#V>>> {
                    <r#IIterable<r#IKeyValuePair<r#K, r#V>> as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#first()
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for r#IMapView<r#K, r#V>
            {
                type VTable = abi_IMapView<r#K, r#V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for r#IMapView<r#K, r#V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                        __1: ::std::marker::PhantomData::<r#V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMapView<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#lookup: extern "system" fn(
                    *const *const abi_IMapView<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                    *mut <r#V as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IMapView<r#K, r#V>,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#has_key: extern "system" fn(
                    *const *const abi_IMapView<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#split: extern "system" fn(
                    *const *const abi_IMapView<r#K, r#V>,
                    *mut <r#IMapView<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                    *mut <r#IMapView<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for r#IMapView<r#K, r#V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{e480ce40-a338-4ada-adcf-272272e48cb9}",
                        <r#K as ::winrt::RuntimeType>::signature(),
                        <r#V as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for r#IMapView<r#K, r#V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IMapView<r#K, r#V>>
                for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(value: r#IMapView<r#K, r#V>) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IMapView<r#K, r#V>>
                for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(value: &r#IMapView<r#K, r#V>) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    <r#IMapView<r#K, r#V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IMapView<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: r#IMapView<r#K, r#V>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IMapView<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: &r#IMapView<r#K, r#V>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for r#IMapView<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a r#IMapView<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IMap<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IMap<r#K, r#V>>,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static> r#IMap<r#K, r#V> {
                pub fn r#lookup<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<r#V> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#V = ::std::mem::zeroed();
                        ((*(*(this))).r#lookup)(
                            this,
                            r#key.into().abi(),
                            <r#V as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#has_key<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#has_key)(
                            this,
                            r#key.into().abi(),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_view(&self) -> ::winrt::Result<r#IMapView<r#K, r#V>> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IMapView<r#K, r#V> = ::std::mem::zeroed();
                        ((*(*(this))).r#get_view)(
                            this,
                            <r#IMapView<r#K, r#V> as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#insert<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#K>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, r#V>>,
                >(
                    &self,
                    r#key: __0,
                    r#value: __1,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#insert)(
                            this,
                            r#key.into().abi(),
                            r#value.into().abi(),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#remove<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#remove)(this, r#key.into().abi()).ok() }
                }
                pub fn r#clear(&self) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#clear)(this).ok() }
                }
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#IKeyValuePair<r#K, r#V>>> {
                    <r#IIterable<r#IKeyValuePair<r#K, r#V>> as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#first()
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for r#IMap<r#K, r#V>
            {
                type VTable = abi_IMap<r#K, r#V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for r#IMap<r#K, r#V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                        __1: ::std::marker::PhantomData::<r#V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMap<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#lookup: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                    *mut <r#V as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#has_key: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#get_view: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    *mut <r#IMapView<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#insert: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                    <r#V as ::winrt::RuntimeType>::Abi,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#remove: extern "system" fn(
                    *const *const abi_IMap<r#K, r#V>,
                    <r#K as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#clear:
                    extern "system" fn(*const *const abi_IMap<r#K, r#V>) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for r#IMap<r#K, r#V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{3c2925fe-8519-45c1-aa79-197b6718c1c1}",
                        <r#K as ::winrt::RuntimeType>::signature(),
                        <r#V as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for r#IMap<r#K, r#V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IMap<r#K, r#V>> for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(value: r#IMap<r#K, r#V>) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IMap<r#K, r#V>> for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(value: &r#IMap<r#K, r#V>) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    <r#IMap<r#K, r#V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IMap<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: r#IMap<r#K, r#V>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IMap<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: &r#IMap<r#K, r#V>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for r#IMap<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a r#IMap<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IObservableMap<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IObservableMap<r#K, r#V>>,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                r#IObservableMap<r#K, r#V>
            {
                pub fn r#map_changed<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#MapChangedEventHandler<r#K, r#V>>>,
                >(
                    &self,
                    r#vhnd: __0,
                ) -> ::winrt::Result<super::r#EventRegistrationToken> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::r#EventRegistrationToken = ::std::mem::zeroed();
                        ((*(*(this))).r#map_changed)(
                            this,
                            r#vhnd.into().abi(),
                            <super::r#EventRegistrationToken as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#remove_map_changed<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#EventRegistrationToken>>,
                >(
                    &self,
                    r#token: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#remove_map_changed)(this, r#token.into().abi()).ok() }
                }
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#IKeyValuePair<r#K, r#V>>> {
                    <r#IIterable<r#IKeyValuePair<r#K, r#V>> as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#first()
                }
                pub fn r#lookup<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<r#V> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#lookup(r#key)
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#size()
                }
                pub fn r#has_key<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<bool> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#has_key(r#key)
                }
                pub fn r#get_view(&self) -> ::winrt::Result<r#IMapView<r#K, r#V>> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#get_view()
                }
                pub fn r#insert<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#K>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, r#V>>,
                >(
                    &self,
                    r#key: __0,
                    r#value: __1,
                ) -> ::winrt::Result<bool> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self)
                        .r#insert(r#key, r#value)
                }
                pub fn r#remove<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#K>>>(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<()> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#remove(r#key)
                }
                pub fn r#clear(&self) -> ::winrt::Result<()> {
                    <r#IMap<r#K, r#V> as ::std::convert::From<&Self>>::from(self).r#clear()
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for r#IObservableMap<r#K, r#V>
            {
                type VTable = abi_IObservableMap<r#K, r#V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for r#IObservableMap<r#K, r#V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                        __1: ::std::marker::PhantomData::<r#V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IObservableMap<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#map_changed: extern "system" fn(
                    *const *const abi_IObservableMap<r#K, r#V>,
                    <r#MapChangedEventHandler<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                    *mut <super::r#EventRegistrationToken as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#remove_map_changed: extern "system" fn(
                    *const *const abi_IObservableMap<r#K, r#V>,
                    <super::r#EventRegistrationToken as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for r#IObservableMap<r#K, r#V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{65df2bf5-bf39-41b5-aebc-5a9d865e472b}",
                        <r#K as ::winrt::RuntimeType>::signature(),
                        <r#V as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for r#IObservableMap<r#K, r#V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IObservableMap<r#K, r#V>>
                for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(
                    value: r#IObservableMap<r#K, r#V>,
                ) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IObservableMap<r#K, r#V>>
                for r#IIterable<r#IKeyValuePair<r#K, r#V>>
            {
                fn from(
                    value: &r#IObservableMap<r#K, r#V>,
                ) -> r#IIterable<r#IKeyValuePair<r#K, r#V>> {
                    <r#IObservableMap<r#K, r#V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IObservableMap<r#K, r#V>> for r#IMap<r#K, r#V>
            {
                fn from(value: r#IObservableMap<r#K, r#V>) -> r#IMap<r#K, r#V> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IObservableMap<r#K, r#V>> for r#IMap<r#K, r#V>
            {
                fn from(value: &r#IObservableMap<r#K, r#V>) -> r#IMap<r#K, r#V> {
                    <r#IObservableMap<r#K, r#V> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<r#IObservableMap<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: r#IObservableMap<r#K, r#V>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::convert::From<&r#IObservableMap<r#K, r#V>> for ::winrt::Object
            {
                fn from(value: &r#IObservableMap<r#K, r#V>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for r#IObservableMap<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a, r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a r#IObservableMap<r#K, r#V>
            {
                type Item = r#IKeyValuePair<r#K, r#V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IPropertySet {
                ptr: ::winrt::ComPtr<r#IPropertySet>,
            }
            impl r#IPropertySet {
                pub fn r#first(
                    &self,
                ) -> ::winrt::Result<r#IIterator<r#IKeyValuePair<::winrt::HString, ::winrt::Object>>>
                {
                    < r#IIterable :: < r#IKeyValuePair :: < :: winrt :: HString , :: winrt :: Object > > as :: std :: convert :: From < & Self >> :: from ( self ) . r#first ( )
                }
                pub fn r#lookup<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<::winrt::Object> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#lookup ( r#key , )
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#size ( )
                }
                pub fn r#has_key<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<bool> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#has_key ( r#key , )
                }
                pub fn r#get_view(
                    &self,
                ) -> ::winrt::Result<r#IMapView<::winrt::HString, ::winrt::Object>>
                {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#get_view ( )
                }
                pub fn r#insert<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#key: __0,
                    r#value: __1,
                ) -> ::winrt::Result<bool> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#insert ( r#key , r#value , )
                }
                pub fn r#remove<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#key: __0,
                ) -> ::winrt::Result<()> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#remove ( r#key , )
                }
                pub fn r#clear(&self) -> ::winrt::Result<()> {
                    < r#IMap :: < :: winrt :: HString , :: winrt :: Object > as :: std :: convert :: From < & Self >> :: from ( self ) . r#clear ( )
                }
                pub fn r#map_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            r#MapChangedEventHandler<::winrt::HString, ::winrt::Object>,
                        >,
                    >,
                >(
                    &self,
                    r#vhnd: __0,
                ) -> ::winrt::Result<super::r#EventRegistrationToken> {
                    <r#IObservableMap<::winrt::HString, ::winrt::Object> as ::std::convert::From<
                        &Self,
                    >>::from(self)
                    .r#map_changed(r#vhnd)
                }
                pub fn r#remove_map_changed<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#EventRegistrationToken>>,
                >(
                    &self,
                    r#token: __0,
                ) -> ::winrt::Result<()> {
                    <r#IObservableMap<::winrt::HString, ::winrt::Object> as ::std::convert::From<
                        &Self,
                    >>::from(self)
                    .r#remove_map_changed(r#token)
                }
            }
            unsafe impl ::winrt::ComInterface for r#IPropertySet {
                type VTable = abi_IPropertySet;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2319707551,
                        62694,
                        17441,
                        [172, 249, 29, 171, 41, 134, 130, 12],
                    )
                }
            }
            impl ::std::clone::Clone for r#IPropertySet {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IPropertySet {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IPropertySet {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{8a43ed9f-f4e6-4421-acf9-1dab2986820c}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IPropertySet {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IPropertySet>
                for r#IIterable<r#IKeyValuePair<::winrt::HString, ::winrt::Object>>
            {
                fn from(
                    value: r#IPropertySet,
                ) -> r#IIterable<r#IKeyValuePair<::winrt::HString, ::winrt::Object>>
                {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IPropertySet>
                for r#IIterable<r#IKeyValuePair<::winrt::HString, ::winrt::Object>>
            {
                fn from(
                    value: &r#IPropertySet,
                ) -> r#IIterable<r#IKeyValuePair<::winrt::HString, ::winrt::Object>>
                {
                    <r#IPropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IPropertySet> for r#IMap<::winrt::HString, ::winrt::Object> {
                fn from(value: r#IPropertySet) -> r#IMap<::winrt::HString, ::winrt::Object> {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IPropertySet> for r#IMap<::winrt::HString, ::winrt::Object> {
                fn from(value: &r#IPropertySet) -> r#IMap<::winrt::HString, ::winrt::Object> {
                    <r#IPropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IPropertySet> for r#IObservableMap<::winrt::HString, ::winrt::Object> {
                fn from(
                    value: r#IPropertySet,
                ) -> r#IObservableMap<::winrt::HString, ::winrt::Object> {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IPropertySet> for r#IObservableMap<::winrt::HString, ::winrt::Object> {
                fn from(
                    value: &r#IPropertySet,
                ) -> r#IObservableMap<::winrt::HString, ::winrt::Object> {
                    <r#IPropertySet as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IPropertySet> for ::winrt::Object {
                fn from(value: r#IPropertySet) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IPropertySet> for ::winrt::Object {
                fn from(value: &r#IPropertySet) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::iter::IntoIterator for r#IPropertySet {
                type Item = r#IKeyValuePair<::winrt::HString, ::winrt::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a r#IPropertySet {
                type Item = r#IKeyValuePair<::winrt::HString, ::winrt::Object>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.first().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IVectorView<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IVectorView<r#T>>,
                __0: ::std::marker::PhantomData<r#T>,
            }
            impl<r#T: ::winrt::RuntimeType + 'static> r#IVectorView<r#T> {
                pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#T> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#T = ::std::mem::zeroed();
                        ((*(*(this))).r#get_at)(
                            this,
                            r#index,
                            <r#T as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#index_of<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#T>>>(
                    &self,
                    r#value: __0,
                    r#index: &mut u32,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#index_of)(
                            this,
                            r#value.into().abi(),
                            r#index,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_many(
                    &self,
                    r#start_index: u32,
                    r#items: &mut [r#T],
                ) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#get_many)(
                            this,
                            r#start_index,
                            r#items.len() as u32,
                            ::std::mem::transmute_copy(&r#items),
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#T>> {
                    <r#IIterable<r#T> as ::std::convert::From<&Self>>::from(self).r#first()
                }
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IVectorView<r#T> {
                type VTable = abi_IVectorView<r#T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IVectorView<r#T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVectorView<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_at: extern "system" fn(
                    *const *const abi_IVectorView<r#T>,
                    u32,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IVectorView<r#T>,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#index_of: extern "system" fn(
                    *const *const abi_IVectorView<r#T>,
                    <r#T as ::winrt::RuntimeType>::Abi,
                    *mut u32,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#get_many: extern "system" fn(
                    *const *const abi_IVectorView<r#T>,
                    u32,
                    u32,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#T>,
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IVectorView<r#T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{bbe1fa4c-b0e3-4583-baef-1f1b2e483e56}",
                        <r#T as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IVectorView<r#T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IVectorView<r#T>>
                for r#IIterable<r#T>
            {
                fn from(value: r#IVectorView<r#T>) -> r#IIterable<r#T> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IVectorView<r#T>>
                for r#IIterable<r#T>
            {
                fn from(value: &r#IVectorView<r#T>) -> r#IIterable<r#T> {
                    <r#IVectorView<r#T> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IVectorView<r#T>>
                for ::winrt::Object
            {
                fn from(value: r#IVectorView<r#T>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IVectorView<r#T>>
                for ::winrt::Object
            {
                fn from(value: &r#IVectorView<r#T>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            pub struct VectorViewIterator<T: ::winrt::RuntimeType + 'static> {
                vector: IVectorView<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::winrt::RuntimeType> VectorViewIterator<T> {
                pub fn new(vector: IVectorView<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for VectorViewIterator<T> {
                type Item = T;
                fn next(&mut self) -> Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(self)
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IVector<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#IVector<r#T>>,
                __0: ::std::marker::PhantomData<r#T>,
            }
            impl<r#T: ::winrt::RuntimeType + 'static> r#IVector<r#T> {
                pub fn r#get_at(&self, r#index: u32) -> ::winrt::Result<r#T> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#T = ::std::mem::zeroed();
                        ((*(*(this))).r#get_at)(
                            this,
                            r#index,
                            <r#T as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_view(&self) -> ::winrt::Result<r#IVectorView<r#T>> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IVectorView<r#T> = ::std::mem::zeroed();
                        ((*(*(this))).r#get_view)(
                            this,
                            <r#IVectorView<r#T> as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#index_of<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#T>>>(
                    &self,
                    r#value: __0,
                    r#index: &mut u32,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#index_of)(
                            this,
                            r#value.into().abi(),
                            r#index,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_at<'a, __1: ::std::convert::Into<::winrt::Param<'a, r#T>>>(
                    &self,
                    r#index: u32,
                    r#value: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_at)(this, r#index, r#value.into().abi()).ok() }
                }
                pub fn r#insert_at<'a, __1: ::std::convert::Into<::winrt::Param<'a, r#T>>>(
                    &self,
                    r#index: u32,
                    r#value: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#insert_at)(this, r#index, r#value.into().abi()).ok() }
                }
                pub fn r#remove_at(&self, r#index: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#remove_at)(this, r#index).ok() }
                }
                pub fn r#append<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#T>>>(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#append)(this, r#value.into().abi()).ok() }
                }
                pub fn r#remove_at_end(&self) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#remove_at_end)(this).ok() }
                }
                pub fn r#clear(&self) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#clear)(this).ok() }
                }
                pub fn r#get_many(
                    &self,
                    r#start_index: u32,
                    r#items: &mut [r#T],
                ) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#get_many)(
                            this,
                            r#start_index,
                            r#items.len() as u32,
                            ::std::mem::transmute_copy(&r#items),
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#replace_all(&self, r#items: &[r#T]) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#replace_all)(
                            this,
                            r#items.len() as u32,
                            ::std::mem::transmute(r#items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn r#first(&self) -> ::winrt::Result<r#IIterator<r#T>> {
                    <r#IIterable<r#T> as ::std::convert::From<&Self>>::from(self).r#first()
                }
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::ComInterface for r#IVector<r#T> {
                type VTable = abi_IVector<r#T>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::clone::Clone for r#IVector<r#T> {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#T>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVector<r#T>
            where
                r#T: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_at: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    u32,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#get_view: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    *mut <r#IVectorView<r#T> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#index_of: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    <r#T as ::winrt::RuntimeType>::Abi,
                    *mut u32,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#set_at: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    u32,
                    <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#insert_at: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    u32,
                    <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#remove_at:
                    extern "system" fn(*const *const abi_IVector<r#T>, u32) -> ::winrt::ErrorCode,
                pub r#append: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#remove_at_end:
                    extern "system" fn(*const *const abi_IVector<r#T>) -> ::winrt::ErrorCode,
                pub r#clear:
                    extern "system" fn(*const *const abi_IVector<r#T>) -> ::winrt::ErrorCode,
                pub r#get_many: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    u32,
                    u32,
                    *mut <r#T as ::winrt::RuntimeType>::Abi,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#replace_all: extern "system" fn(
                    *const *const abi_IVector<r#T>,
                    u32,
                    *const <r#T as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#T>,
            }
            unsafe impl<r#T: ::winrt::RuntimeType + 'static> ::winrt::RuntimeType for r#IVector<r#T> {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{})",
                        "{913337e9-11a1-4345-a3a2-4e7f956e222d}",
                        <r#T as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::fmt::Debug for r#IVector<r#T> {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IVector<r#T>>
                for r#IIterable<r#T>
            {
                fn from(value: r#IVector<r#T>) -> r#IIterable<r#T> {
                    ::std::convert::From::from(&value)
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IVector<r#T>>
                for r#IIterable<r#T>
            {
                fn from(value: &r#IVector<r#T>) -> r#IIterable<r#T> {
                    <r#IVector<r#T> as ::winrt::ComInterface>::query(value)
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<r#IVector<r#T>> for ::winrt::Object {
                fn from(value: r#IVector<r#T>) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl<r#T: ::winrt::RuntimeType + 'static> ::std::convert::From<&r#IVector<r#T>>
                for ::winrt::Object
            {
                fn from(value: &r#IVector<r#T>) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            pub struct VectorIterator<T: ::winrt::RuntimeType + 'static> {
                vector: IVector<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::winrt::RuntimeType> VectorIterator<T> {
                pub fn new(vector: IVector<T>) -> Self {
                    let size = vector.size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::Iterator for VectorIterator<T> {
                type Item = T;
                fn next(&mut self) -> Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.get_at(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::winrt::RuntimeType> ::std::iter::IntoIterator for IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self)
                }
            }
            impl<'a, T: ::winrt::RuntimeType> ::std::iter::IntoIterator for &'a IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#MapChangedEventHandler<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                ptr: ::winrt::ComPtr<r#MapChangedEventHandler<r#K, r#V>>,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                r#MapChangedEventHandler<r#K, r#V>
            {
                pub fn r#invoke<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IObservableMap<r#K, r#V>>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, r#IMapChangedEventArgs<r#K>>>,
                >(
                    &self,
                    r#sender: __0,
                    r#event: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#invoke)(this, r#sender.into().abi(), r#event.into().abi())
                            .ok()
                    }
                }
                pub fn new<
                    F: FnMut(
                        &r#IObservableMap<r#K, r#V>,
                        &r#IMapChangedEventArgs<r#K>,
                    ) -> ::winrt::Result<()>,
                >(
                    invoke: F,
                ) -> Self {
                    impl_MapChangedEventHandler::<r#K, r#V, F>::new(invoke)
                }
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::ComInterface for r#MapChangedEventHandler<r#K, r#V>
            {
                type VTable = abi_MapChangedEventHandler<r#K, r#V>;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_signature::<Self>()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::clone::Clone for r#MapChangedEventHandler<r#K, r#V>
            {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                        __0: ::std::marker::PhantomData::<r#K>,
                        __1: ::std::marker::PhantomData::<r#V>,
                    }
                }
            }
            #[repr(C)]
            pub struct abi_MapChangedEventHandler<r#K, r#V>
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub r#invoke: extern "system" fn(
                    *const *const abi_MapChangedEventHandler<r#K, r#V>,
                    <r#IObservableMap<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                    <r#IMapChangedEventArgs<r#K> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                __0: ::std::marker::PhantomData<r#K>,
                __1: ::std::marker::PhantomData<r#V>,
            }
            unsafe impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::winrt::RuntimeType for r#MapChangedEventHandler<r#K, r#V>
            {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    format!(
                        "pinterface({};{};{})",
                        "{179517f3-94ee-41f8-bddc-768a895544f3}",
                        <r#K as ::winrt::RuntimeType>::signature(),
                        <r#V as ::winrt::RuntimeType>::signature()
                    )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl<r#K: ::winrt::RuntimeType + 'static, r#V: ::winrt::RuntimeType + 'static>
                ::std::fmt::Debug for r#MapChangedEventHandler<r#K, r#V>
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            #[repr(C)]
            struct impl_MapChangedEventHandler<
                r#K,
                r#V,
                F: FnMut(
                    &r#IObservableMap<r#K, r#V>,
                    &r#IMapChangedEventArgs<r#K>,
                ) -> ::winrt::Result<()>,
            >
            where
                r#K: ::winrt::RuntimeType + 'static,
                r#V: ::winrt::RuntimeType + 'static,
            {
                vtable: *const abi_MapChangedEventHandler<r#K, r#V>,
                count: ::winrt::RefCount,
                invoke: F,
            }
            impl<
                    r#K: ::winrt::RuntimeType + 'static,
                    r#V: ::winrt::RuntimeType + 'static,
                    F: FnMut(
                        &r#IObservableMap<r#K, r#V>,
                        &r#IMapChangedEventArgs<r#K>,
                    ) -> ::winrt::Result<()>,
                > impl_MapChangedEventHandler<r#K, r#V, F>
            {
                const VTABLE: abi_MapChangedEventHandler<r#K, r#V> = abi_MapChangedEventHandler::<
                    r#K,
                    r#V,
                > {
                    unknown_query_interface:
                        impl_MapChangedEventHandler::<r#K, r#V, F>::unknown_query_interface,
                    unknown_add_ref: impl_MapChangedEventHandler::<r#K, r#V, F>::unknown_add_ref,
                    unknown_release: impl_MapChangedEventHandler::<r#K, r#V, F>::unknown_release,
                    invoke: impl_MapChangedEventHandler::<r#K, r#V, F>::invoke,
                    __0: ::std::marker::PhantomData::<r#K>,
                    __1: ::std::marker::PhantomData::<r#V>,
                };
                pub fn new(invoke: F) -> r#MapChangedEventHandler<r#K, r#V> {
                    let value = Self {
                        vtable: &Self::VTABLE,
                        count: ::winrt::RefCount::new(1),
                        invoke,
                    };
                    unsafe {
                        let mut result: r#MapChangedEventHandler<r#K, r#V> = std::mem::zeroed();
                        *<r#MapChangedEventHandler<r#K, r#V> as ::winrt::RuntimeType>::set_abi(
                            &mut result,
                        ) = ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                            as *const *const abi_MapChangedEventHandler<r#K, r#V>;
                        result
                    }
                }
                extern "system" fn unknown_query_interface(
                    this: ::winrt::RawComPtr<::winrt::IUnknown>,
                    iid: &::winrt::Guid,
                    interface: *mut ::winrt::RawPtr,
                ) -> ::winrt::ErrorCode {
                    unsafe {
                        let this = this as *const Self as *mut Self;
                        if iid
                            == &<r#MapChangedEventHandler<r#K, r#V> as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                            || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                        {
                            *interface = this as ::winrt::RawPtr;
                            (*this).count.add_ref();
                            return ::winrt::ErrorCode(0);
                        }
                        *interface = std::ptr::null_mut();
                        ::winrt::ErrorCode(0x80004002)
                    }
                }
                extern "system" fn unknown_add_ref(
                    this: ::winrt::RawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this = this as *const Self as *mut Self;
                        (*this).count.add_ref()
                    }
                }
                extern "system" fn unknown_release(
                    this: ::winrt::RawComPtr<::winrt::IUnknown>,
                ) -> u32 {
                    unsafe {
                        let this = this as *const Self as *mut Self;
                        let remaining = (*this).count.release();
                        if remaining == 0 {
                            Box::from_raw(this);
                        }
                        remaining
                    }
                }
                extern "system" fn r#invoke(
                    this: *const *const abi_MapChangedEventHandler<r#K, r#V>,
                    r#sender: <r#IObservableMap<r#K, r#V> as ::winrt::RuntimeType>::Abi,
                    r#event: <r#IMapChangedEventArgs<r#K> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode {
                    unsafe {
                        let this = this as *const Self as *mut Self;
                        ((*this).invoke)(
                            ::winrt::RuntimeType::from_abi(&r#sender),
                            ::winrt::RuntimeType::from_abi(&r#event),
                        )
                        .into()
                    }
                }
            }
        }
    }
    pub mod r#security {
        pub mod r#credentials {
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ICredentialFactory {
                ptr: ::winrt::ComPtr<r#ICredentialFactory>,
            }
            impl r#ICredentialFactory {
                pub fn r#create_password_credential<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#resource: __0,
                    r#user_name: __1,
                    r#password: __2,
                ) -> ::winrt::Result<r#PasswordCredential> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#PasswordCredential = ::std::mem::zeroed();
                        ((*(*(this))).r#create_password_credential)(
                            this,
                            r#resource.into().abi(),
                            r#user_name.into().abi(),
                            r#password.into().abi(),
                            <r#PasswordCredential as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ICredentialFactory {
                type VTable = abi_ICredentialFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1424954273,
                        48934,
                        18357,
                        [151, 221, 222, 119, 155, 124, 173, 88],
                    )
                }
            }
            impl ::std::clone::Clone for r#ICredentialFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ICredentialFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_password_credential: extern "system" fn(
                    *const *const abi_ICredentialFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#PasswordCredential as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ICredentialFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{54ef13a1-bf26-47b5-97dd-de779b7cad58}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ICredentialFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ICredentialFactory> for ::winrt::Object {
                fn from(value: r#ICredentialFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ICredentialFactory> for ::winrt::Object {
                fn from(value: &r#ICredentialFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IPasswordCredential {
                ptr: ::winrt::ComPtr<r#IPasswordCredential>,
            }
            impl r#IPasswordCredential {
                pub fn r#resource(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#resource)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_resource<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#resource: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_resource)(this, r#resource.into().abi()).ok() }
                }
                pub fn r#user_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#user_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_user_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#user_name: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_user_name)(this, r#user_name.into().abi()).ok() }
                }
                pub fn r#password(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#password)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_password<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#password: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_password)(this, r#password.into().abi()).ok() }
                }
                pub fn r#retrieve_password(&self) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#retrieve_password)(this).ok() }
                }
                pub fn r#properties(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#collections::r#IPropertySet>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IPropertySet =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#properties ) ( this , < super :: super :: r#foundation :: r#collections :: r#IPropertySet as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IPasswordCredential {
                type VTable = abi_IPasswordCredential;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1790019977,
                        50976,
                        16807,
                        [166, 193, 254, 173, 179, 99, 41, 160],
                    )
                }
            }
            impl ::std::clone::Clone for r#IPasswordCredential {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IPasswordCredential where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#resource : extern "system" fn ( * const * const abi_IPasswordCredential , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_resource : extern "system" fn ( * const * const abi_IPasswordCredential , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#user_name : extern "system" fn ( * const * const abi_IPasswordCredential , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_user_name : extern "system" fn ( * const * const abi_IPasswordCredential , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#password : extern "system" fn ( * const * const abi_IPasswordCredential , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_password : extern "system" fn ( * const * const abi_IPasswordCredential , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#retrieve_password : extern "system" fn ( * const * const abi_IPasswordCredential , ) -> :: winrt :: ErrorCode , pub r#properties : extern "system" fn ( * const * const abi_IPasswordCredential , * mut < super :: super :: r#foundation :: r#collections :: r#IPropertySet as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IPasswordCredential {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{6ab18989-c720-41a7-a6c1-feadb36329a0}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IPasswordCredential {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IPasswordCredential> for ::winrt::Object {
                fn from(value: r#IPasswordCredential) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IPasswordCredential> for ::winrt::Object {
                fn from(value: &r#IPasswordCredential) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#PasswordCredential {
                ptr: ::winrt::ComPtr<r#PasswordCredential>,
            }
            impl r#PasswordCredential {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#resource(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#resource)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_resource<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#resource: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_resource)(this, r#resource.into().abi()).ok() }
                }
                pub fn r#user_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#user_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_user_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#user_name: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_user_name)(this, r#user_name.into().abi()).ok() }
                }
                pub fn r#password(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#password)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_password<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#password: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_password)(this, r#password.into().abi()).ok() }
                }
                pub fn r#retrieve_password(&self) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#retrieve_password)(this).ok() }
                }
                pub fn r#properties(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#collections::r#IPropertySet>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IPropertySet =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#properties ) ( this , < super :: super :: r#foundation :: r#collections :: r#IPropertySet as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#create_password_credential<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#resource: __0,
                    r#user_name: __1,
                    r#password: __2,
                ) -> ::winrt::Result<r#PasswordCredential> {
                    ::winrt::factory::<Self, r#ICredentialFactory>()?.r#create_password_credential(
                        r#resource,
                        r#user_name,
                        r#password,
                    )
                }
            }
            impl ::winrt::RuntimeName for r#PasswordCredential {
                const NAME: &'static str = "Windows.Security.Credentials.PasswordCredential";
            }
            unsafe impl ::winrt::ComInterface for r#PasswordCredential {
                type VTable = abi_IPasswordCredential;
                fn iid() -> ::winrt::Guid {
                    <r#IPasswordCredential as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#PasswordCredential {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Security.Credentials.PasswordCredential;{6ab18989-c720-41a7-a6c1-feadb36329a0})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#PasswordCredential {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#PasswordCredential> for r#IPasswordCredential {
                fn from(value: r#PasswordCredential) -> r#IPasswordCredential {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#PasswordCredential> for r#IPasswordCredential {
                fn from(value: &r#PasswordCredential) -> r#IPasswordCredential {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#PasswordCredential> for ::winrt::Object {
                fn from(value: r#PasswordCredential) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#PasswordCredential> for ::winrt::Object {
                fn from(value: &r#PasswordCredential) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
        }
    }
    pub mod r#storage {
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#CreationCollisionOption {
            value: i32,
        }
        impl r#CreationCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const r#GenerateUniqueName: Self = Self { value: 0i32 };
            pub const r#ReplaceExisting: Self = Self { value: 1i32 };
            pub const r#FailIfExists: Self = Self { value: 2i32 };
            pub const r#OpenIfExists: Self = Self { value: 3i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#CreationCollisionOption {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.CreationCollisionOption;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#FileAccessMode {
            value: i32,
        }
        impl r#FileAccessMode {
            #![allow(non_upper_case_globals)]
            pub const r#Read: Self = Self { value: 0i32 };
            pub const r#ReadWrite: Self = Self { value: 1i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#FileAccessMode {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.FileAccessMode;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#FileAttributes {
            value: u32,
        }
        impl r#FileAttributes {
            #![allow(non_upper_case_globals)]
            pub const r#Normal: Self = Self { value: 0u32 };
            pub const r#ReadOnly: Self = Self { value: 1u32 };
            pub const r#Directory: Self = Self { value: 16u32 };
            pub const r#Archive: Self = Self { value: 32u32 };
            pub const r#Temporary: Self = Self { value: 256u32 };
            pub const r#LocallyIncomplete: Self = Self { value: 512u32 };
        }
        unsafe impl ::winrt::RuntimeType for r#FileAttributes {
            type Abi = u32;
            fn signature() -> String {
                "enum(Windows.Storage.FileAttributes;u4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for r#FileAttributes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for r#FileAttributes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFile {
            ptr: ::winrt::ComPtr<r#IStorageFile>,
        }
        impl r#IStorageFile {
            pub fn r#file_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#file_type)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#content_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#content_type)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#open_async(
                &self,
                r#access_mode: r#FileAccessMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#streams::r#IRandomAccessStream>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#streams::r#IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_async ) ( this , :: winrt :: RuntimeType :: abi ( & r#access_mode ) , < super :: r#foundation :: r#IAsyncOperation :: < r#streams :: r#IRandomAccessStream > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#open_transacted_write_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageStreamTransaction>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#StorageStreamTransaction,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_transacted_write_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageStreamTransaction > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload_default_name_and_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
            >(
                &self,
                r#destination_folder: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload_default_name_and_options ) ( this , r#destination_folder . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload_default_options ) ( this , r#destination_folder . into ( ) . abi ( ) , r#desired_new_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload ) ( this , r#destination_folder . into ( ) . abi ( ) , r#desired_new_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#option ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_and_replace_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
            >(
                &self,
                r#file_to_replace: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#copy_and_replace_async)(
                        this,
                        r#file_to_replace.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload_default_name_and_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
            >(
                &self,
                r#destination_folder: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload_default_name_and_options)(
                        this,
                        r#destination_folder.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload_default_options)(
                        this,
                        r#destination_folder.into().abi(),
                        r#desired_new_name.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload)(
                        this,
                        r#destination_folder.into().abi(),
                        r#desired_new_name.into().abi(),
                        ::winrt::RuntimeType::abi(&r#option),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_and_replace_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
            >(
                &self,
                r#file_to_replace: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_and_replace_async)(
                        this,
                        r#file_to_replace.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async_overload_default_options(r#desired_name)
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async(r#desired_name, r#option)
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#delete_async_overload_default_options()
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#delete_async(r#option)
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#get_basic_properties_async()
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#name()
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#path()
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#attributes()
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#date_created()
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#is_of_type(r#type)
            }
            pub fn r#open_sequential_read_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#streams::r#IInputStream>>
            {
                <r#streams::r#IInputStreamReference as ::std::convert::From<&Self>>::from(self)
                    .r#open_sequential_read_async()
            }
            pub fn r#open_read_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    r#streams::r#IRandomAccessStreamWithContentType,
                >,
            > {
                <r#streams::r#IRandomAccessStreamReference as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#open_read_async()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFile {
            type VTable = abi_IStorageFile;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4198457734,
                    16916,
                    17036,
                    [166, 76, 20, 201, 172, 115, 21, 234],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFile {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFile where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#file_type : extern "system" fn ( * const * const abi_IStorageFile , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#content_type : extern "system" fn ( * const * const abi_IStorageFile , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#open_async : extern "system" fn ( * const * const abi_IStorageFile , < r#FileAccessMode as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#streams :: r#IRandomAccessStream > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#open_transacted_write_async : extern "system" fn ( * const * const abi_IStorageFile , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageStreamTransaction > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#copy_overload_default_name_and_options : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#copy_overload_default_options : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#copy_overload : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#NameCollisionOption as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#copy_and_replace_async : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFile as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#move_overload_default_name_and_options : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#move_overload_default_options : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#move_overload : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFolder as :: winrt :: RuntimeType > :: Abi , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#NameCollisionOption as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#move_and_replace_async : extern "system" fn ( * const * const abi_IStorageFile , < r#IStorageFile as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFile {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{fa3f6186-4214-428c-a64c-14c9ac7315ea}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFile> for r#IStorageItem {
            fn from(value: r#IStorageFile) -> r#IStorageItem {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageFile> for r#IStorageItem {
            fn from(value: &r#IStorageFile) -> r#IStorageItem {
                <r#IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageFile> for r#streams::r#IInputStreamReference {
            fn from(value: r#IStorageFile) -> r#streams::r#IInputStreamReference {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageFile> for r#streams::r#IInputStreamReference {
            fn from(value: &r#IStorageFile) -> r#streams::r#IInputStreamReference {
                <r#IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageFile> for r#streams::r#IRandomAccessStreamReference {
            fn from(value: r#IStorageFile) -> r#streams::r#IRandomAccessStreamReference {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageFile> for r#streams::r#IRandomAccessStreamReference {
            fn from(value: &r#IStorageFile) -> r#streams::r#IRandomAccessStreamReference {
                <r#IStorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageFile> for ::winrt::Object {
            fn from(value: r#IStorageFile) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFile> for ::winrt::Object {
            fn from(value: &r#IStorageFile) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFile2 {
            ptr: ::winrt::ComPtr<r#IStorageFile2>,
        }
        impl r#IStorageFile2 {
            pub fn r#open_with_options_async(
                &self,
                r#access_mode: r#FileAccessMode,
                r#options: r#StorageOpenOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#streams::r#IRandomAccessStream>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#streams::r#IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_with_options_async ) ( this , :: winrt :: RuntimeType :: abi ( & r#access_mode ) , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#streams :: r#IRandomAccessStream > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#open_transacted_write_with_options_async(
                &self,
                r#options: r#StorageOpenOptions,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageStreamTransaction>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#StorageStreamTransaction,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_transacted_write_with_options_async ) ( this , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageStreamTransaction > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFile2 {
            type VTable = abi_IStorageFile2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2504936399,
                    2679,
                    17147,
                    [183, 119, 194, 237, 88, 165, 46, 68],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFile2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFile2 where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#open_with_options_async : extern "system" fn ( * const * const abi_IStorageFile2 , < r#FileAccessMode as :: winrt :: RuntimeType > :: Abi , < r#StorageOpenOptions as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#streams :: r#IRandomAccessStream > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#open_transacted_write_with_options_async : extern "system" fn ( * const * const abi_IStorageFile2 , < r#StorageOpenOptions as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageStreamTransaction > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFile2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{954e4bcf-0a77-42fb-b777-c2ed58a52e44}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFile2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFile2> for ::winrt::Object {
            fn from(value: r#IStorageFile2) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFile2> for ::winrt::Object {
            fn from(value: &r#IStorageFile2) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFilePropertiesWithAvailability {
            ptr: ::winrt::ComPtr<r#IStorageFilePropertiesWithAvailability>,
        }
        impl r#IStorageFilePropertiesWithAvailability {
            pub fn r#is_available(&self) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_available)(
                        this,
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFilePropertiesWithAvailability {
            type VTable = abi_IStorageFilePropertiesWithAvailability;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2949365403,
                    22571,
                    16691,
                    [150, 72, 228, 76, 164, 110, 228, 145],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFilePropertiesWithAvailability {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFilePropertiesWithAvailability {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#is_available: extern "system" fn(
                *const *const abi_IStorageFilePropertiesWithAvailability,
                *mut bool,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageFilePropertiesWithAvailability {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{afcbbe9b-582b-4133-9648-e44ca46ee491}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFilePropertiesWithAvailability {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFilePropertiesWithAvailability> for ::winrt::Object {
            fn from(value: r#IStorageFilePropertiesWithAvailability) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFilePropertiesWithAvailability> for ::winrt::Object {
            fn from(value: &r#IStorageFilePropertiesWithAvailability) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFileStatics {
            ptr: ::winrt::ComPtr<r#IStorageFileStatics>,
        }
        impl r#IStorageFileStatics {
            pub fn r#get_file_from_path_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#path: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_file_from_path_async ) ( this , r#path . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_file_from_application_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
            >(
                &self,
                r#uri: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_file_from_application_uri_async ) ( this , r#uri . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_streamed_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#StreamedFileDataRequestedHandler>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                &self,
                r#display_name_with_extension: __0,
                r#data_requested: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_streamed_file_async ) ( this , r#display_name_with_extension . into ( ) . abi ( ) , r#data_requested . into ( ) . abi ( ) , r#thumbnail . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#replace_with_streamed_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#StreamedFileDataRequestedHandler>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                &self,
                r#file_to_replace: __0,
                r#data_requested: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#replace_with_streamed_file_async ) ( this , r#file_to_replace . into ( ) . abi ( ) , r#data_requested . into ( ) . abi ( ) , r#thumbnail . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_streamed_file_from_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                &self,
                r#display_name_with_extension: __0,
                r#uri: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_streamed_file_from_uri_async ) ( this , r#display_name_with_extension . into ( ) . abi ( ) , r#uri . into ( ) . abi ( ) , r#thumbnail . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#replace_with_streamed_file_from_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
                __1: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                &self,
                r#file_to_replace: __0,
                r#uri: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#replace_with_streamed_file_from_uri_async ) ( this , r#file_to_replace . into ( ) . abi ( ) , r#uri . into ( ) . abi ( ) , r#thumbnail . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFileStatics {
            type VTable = abi_IStorageFileStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1501873936,
                    56050,
                    17352,
                    [139, 180, 164, 211, 234, 207, 208, 63],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFileStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFileStatics where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_file_from_path_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_file_from_application_uri_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_streamed_file_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#StreamedFileDataRequestedHandler as :: winrt :: RuntimeType > :: Abi , < r#streams :: r#IRandomAccessStreamReference as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#replace_with_streamed_file_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < r#IStorageFile as :: winrt :: RuntimeType > :: Abi , < r#StreamedFileDataRequestedHandler as :: winrt :: RuntimeType > :: Abi , < r#streams :: r#IRandomAccessStreamReference as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_streamed_file_from_uri_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , < r#streams :: r#IRandomAccessStreamReference as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#replace_with_streamed_file_from_uri_async : extern "system" fn ( * const * const abi_IStorageFileStatics , < r#IStorageFile as :: winrt :: RuntimeType > :: Abi , < super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , < r#streams :: r#IRandomAccessStreamReference as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFileStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{5984c710-daf2-43c8-8bb4-a4d3eacfd03f}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFileStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFileStatics> for ::winrt::Object {
            fn from(value: r#IStorageFileStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFileStatics> for ::winrt::Object {
            fn from(value: &r#IStorageFileStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFolder {
            ptr: ::winrt::ComPtr<r#IStorageFolder>,
        }
        impl r#IStorageFolder {
            pub fn r#create_file_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_file_async_overload_default_options ) ( this , r#desired_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#options: r#CreationCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_file_async ) ( this , r#desired_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_folder_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_folder_async_overload_default_options ) ( this , r#desired_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_folder_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#options: r#CreationCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_folder_async ) ( this , r#desired_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_file_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_folder_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_folder_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_item_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#IStorageItem> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_item_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_files_async_overload_default_options_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_folders_async_overload_default_options_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_items_async_overload_default_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async_overload_default_options(r#desired_name)
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async(r#desired_name, r#option)
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#delete_async_overload_default_options()
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#delete_async(r#option)
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#get_basic_properties_async()
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#name()
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#path()
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#attributes()
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#date_created()
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#is_of_type(r#type)
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFolder {
            type VTable = abi_IStorageFolder;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1926351736,
                    46063,
                    20341,
                    [168, 11, 111, 217, 218, 226, 148, 75],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFolder {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#create_file_async_overload_default_options : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_file_async : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#CreationCollisionOption as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_folder_async_overload_default_options : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_folder_async : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < r#CreationCollisionOption as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_file_async : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_folder_async : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_item_async : extern "system" fn ( * const * const abi_IStorageFolder , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_files_async_overload_default_options_start_and_count : extern "system" fn ( * const * const abi_IStorageFolder , * mut < super :: r#foundation :: r#IAsyncOperation :: < super :: r#foundation :: r#collections :: r#IVectorView :: < r#StorageFile > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_folders_async_overload_default_options_start_and_count : extern "system" fn ( * const * const abi_IStorageFolder , * mut < super :: r#foundation :: r#IAsyncOperation :: < super :: r#foundation :: r#collections :: r#IVectorView :: < r#StorageFolder > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_items_async_overload_default_start_and_count : extern "system" fn ( * const * const abi_IStorageFolder , * mut < super :: r#foundation :: r#IAsyncOperation :: < super :: r#foundation :: r#collections :: r#IVectorView :: < r#IStorageItem > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFolder {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFolder> for r#IStorageItem {
            fn from(value: r#IStorageFolder) -> r#IStorageItem {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageFolder> for r#IStorageItem {
            fn from(value: &r#IStorageFolder) -> r#IStorageItem {
                <r#IStorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageFolder> for ::winrt::Object {
            fn from(value: r#IStorageFolder) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFolder> for ::winrt::Object {
            fn from(value: &r#IStorageFolder) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFolder2 {
            ptr: ::winrt::ComPtr<r#IStorageFolder2>,
        }
        impl r#IStorageFolder2 {
            pub fn r#try_get_item_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#IStorageItem> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#try_get_item_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFolder2 {
            type VTable = abi_IStorageFolder2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3894929593,
                    2265,
                    19086,
                    [160, 172, 254, 94, 211, 203, 187, 211],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFolder2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder2 where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#try_get_item_async : extern "system" fn ( * const * const abi_IStorageFolder2 , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFolder2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{e827e8b9-08d9-4a8e-a0ac-fe5ed3cbbbd3}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFolder2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFolder2> for ::winrt::Object {
            fn from(value: r#IStorageFolder2) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFolder2> for ::winrt::Object {
            fn from(value: &r#IStorageFolder2) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFolder3 {
            ptr: ::winrt::ComPtr<r#IStorageFolder3>,
        }
        impl r#IStorageFolder3 {
            pub fn r#try_get_change_tracker(
                &self,
            ) -> ::winrt::Result<r#StorageLibraryChangeTracker> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageLibraryChangeTracker = ::std::mem::zeroed();
                    ((*(*(this))).r#try_get_change_tracker)(
                        this,
                        <r#StorageLibraryChangeTracker as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFolder3 {
            type VTable = abi_IStorageFolder3;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2673965209,
                    48609,
                    16676,
                    [174, 179, 176, 106, 217, 111, 152, 212],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFolder3 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolder3 {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#try_get_change_tracker: extern "system" fn(
                *const *const abi_IStorageFolder3,
                *mut <r#StorageLibraryChangeTracker as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageFolder3 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{9f617899-bde1-4124-aeb3-b06ad96f98d4}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFolder3 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFolder3> for ::winrt::Object {
            fn from(value: r#IStorageFolder3) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFolder3> for ::winrt::Object {
            fn from(value: &r#IStorageFolder3) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageFolderStatics {
            ptr: ::winrt::ComPtr<r#IStorageFolderStatics>,
        }
        impl r#IStorageFolderStatics {
            pub fn r#get_folder_from_path_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#path: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_folder_from_path_async ) ( this , r#path . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageFolderStatics {
            type VTable = abi_IStorageFolderStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    150153215,
                    34261,
                    18617,
                    [174, 233, 40, 81, 30, 51, 159, 159],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageFolderStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageFolderStatics where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_folder_from_path_async : extern "system" fn ( * const * const abi_IStorageFolderStatics , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageFolderStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{08f327ff-85d5-48b9-aee9-28511e339f9f}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageFolderStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageFolderStatics> for ::winrt::Object {
            fn from(value: r#IStorageFolderStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageFolderStatics> for ::winrt::Object {
            fn from(value: &r#IStorageFolderStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageItem {
            ptr: ::winrt::ComPtr<r#IStorageItem>,
        }
        impl r#IStorageItem {
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#rename_async_overload_default_options)(
                        this,
                        r#desired_name.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#rename_async)(
                        this,
                        r#desired_name.into().abi(),
                        ::winrt::RuntimeType::abi(&r#option),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#delete_async_overload_default_options)(
                        this,
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#delete_async)(
                        this,
                        ::winrt::RuntimeType::abi(&r#option),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#BasicProperties,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_basic_properties_async)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#BasicProperties,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#FileAttributes = ::std::mem::zeroed();
                    ((*(*(this))).r#attributes)(
                        this,
                        <r#FileAttributes as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#DateTime = ::std::mem::zeroed();
                    ((*(*(this))).r#date_created)(
                        this,
                        <super::r#foundation::r#DateTime as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_of_type)(
                        this,
                        ::winrt::RuntimeType::abi(&r#type),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageItem {
            type VTable = abi_IStorageItem;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1107798422,
                    51759,
                    17143,
                    [189, 232, 139, 16, 69, 122, 127, 48],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageItem {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItem {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#rename_async_overload_default_options: extern "system" fn(
                *const *const abi_IStorageItem,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            )
                -> ::winrt::ErrorCode,
            pub r#rename_async: extern "system" fn(
                *const *const abi_IStorageItem,
                <::winrt::HString as ::winrt::RuntimeType>::Abi,
                <r#NameCollisionOption as ::winrt::RuntimeType>::Abi,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#delete_async_overload_default_options: extern "system" fn(
                *const *const abi_IStorageItem,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            )
                -> ::winrt::ErrorCode,
            pub r#delete_async: extern "system" fn(
                *const *const abi_IStorageItem,
                <r#StorageDeleteOption as ::winrt::RuntimeType>::Abi,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#get_basic_properties_async:
                extern "system" fn(
                    *const *const abi_IStorageItem,
                    *mut <super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#BasicProperties,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            pub r#name: extern "system" fn(
                *const *const abi_IStorageItem,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#path: extern "system" fn(
                *const *const abi_IStorageItem,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#attributes: extern "system" fn(
                *const *const abi_IStorageItem,
                *mut <r#FileAttributes as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#date_created: extern "system" fn(
                *const *const abi_IStorageItem,
                *mut <super::r#foundation::r#DateTime as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#is_of_type: extern "system" fn(
                *const *const abi_IStorageItem,
                <r#StorageItemTypes as ::winrt::RuntimeType>::Abi,
                *mut bool,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageItem {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{4207a996-ca2f-42f7-bde8-8b10457a7f30}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageItem {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageItem> for ::winrt::Object {
            fn from(value: r#IStorageItem) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageItem> for ::winrt::Object {
            fn from(value: &r#IStorageItem) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageItem2 {
            ptr: ::winrt::ComPtr<r#IStorageItem2>,
        }
        impl r#IStorageItem2 {
            pub fn r#get_parent_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_parent_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#is_equal<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageItem>>>(
                &self,
                r#item: __0,
            ) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_equal)(
                        this,
                        r#item.into().abi(),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async_overload_default_options(r#desired_name)
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async(r#desired_name, r#option)
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#delete_async_overload_default_options()
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#delete_async(r#option)
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#get_basic_properties_async()
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#name()
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#path()
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#attributes()
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#date_created()
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#is_of_type(r#type)
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageItem2 {
            type VTable = abi_IStorageItem2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    1408837330,
                    2108,
                    17027,
                    [180, 91, 129, 192, 7, 35, 126, 68],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageItem2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItem2 where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_parent_async : extern "system" fn ( * const * const abi_IStorageItem2 , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#is_equal : extern "system" fn ( * const * const abi_IStorageItem2 , < r#IStorageItem as :: winrt :: RuntimeType > :: Abi , * mut bool , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageItem2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{53f926d2-083c-4283-b45b-81c007237e44}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageItem2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageItem2> for r#IStorageItem {
            fn from(value: r#IStorageItem2) -> r#IStorageItem {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageItem2> for r#IStorageItem {
            fn from(value: &r#IStorageItem2) -> r#IStorageItem {
                <r#IStorageItem2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageItem2> for ::winrt::Object {
            fn from(value: r#IStorageItem2) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageItem2> for ::winrt::Object {
            fn from(value: &r#IStorageItem2) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageItemProperties {
            ptr: ::winrt::ComPtr<r#IStorageItemProperties>,
        }
        impl r#IStorageItemProperties {
            pub fn r#get_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_thumbnail_async_overload_default_size_default_options)(
                        this,
                        ::winrt::RuntimeType::abi(&r#mode),
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#StorageItemThumbnail,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_thumbnail_async_overload_default_options)(
                        this,
                        ::winrt::RuntimeType::abi(&r#mode),
                        r#requested_size,
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#StorageItemThumbnail,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_thumbnail_async)(
                        this,
                        ::winrt::RuntimeType::abi(&r#mode),
                        r#requested_size,
                        ::winrt::RuntimeType::abi(&r#options),
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#StorageItemThumbnail,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_type)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#folder_relative_id)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#properties(
                &self,
            ) -> ::winrt::Result<r#file_properties::r#StorageItemContentProperties> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#file_properties::r#StorageItemContentProperties =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#properties ) ( this , < r#file_properties :: r#StorageItemContentProperties as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageItemProperties {
            type VTable = abi_IStorageItemProperties;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2254849144,
                    32809,
                    18174,
                    [167, 137, 28, 47, 62, 47, 251, 92],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageItemProperties {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_thumbnail_async_overload_default_size_default_options : extern "system" fn ( * const * const abi_IStorageItemProperties , < r#file_properties :: r#ThumbnailMode as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#file_properties :: r#StorageItemThumbnail > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_thumbnail_async_overload_default_options : extern "system" fn ( * const * const abi_IStorageItemProperties , < r#file_properties :: r#ThumbnailMode as :: winrt :: RuntimeType > :: Abi , u32 , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#file_properties :: r#StorageItemThumbnail > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_thumbnail_async : extern "system" fn ( * const * const abi_IStorageItemProperties , < r#file_properties :: r#ThumbnailMode as :: winrt :: RuntimeType > :: Abi , u32 , < r#file_properties :: r#ThumbnailOptions as :: winrt :: RuntimeType > :: Abi , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#file_properties :: r#StorageItemThumbnail > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#display_name : extern "system" fn ( * const * const abi_IStorageItemProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#display_type : extern "system" fn ( * const * const abi_IStorageItemProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#folder_relative_id : extern "system" fn ( * const * const abi_IStorageItemProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#properties : extern "system" fn ( * const * const abi_IStorageItemProperties , * mut < r#file_properties :: r#StorageItemContentProperties as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageItemProperties {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{86664478-8029-46fe-a789-1c2f3e2ffb5c}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageItemProperties {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageItemProperties> for ::winrt::Object {
            fn from(value: r#IStorageItemProperties) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageItemProperties> for ::winrt::Object {
            fn from(value: &r#IStorageItemProperties) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageItemProperties2 {
            ptr: ::winrt::ComPtr<r#IStorageItemProperties2>,
        }
        impl r#IStorageItemProperties2 {
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options ) ( this , :: winrt :: RuntimeType :: abi ( & r#mode ) , < super :: r#foundation :: r#IAsyncOperation :: < r#file_properties :: r#StorageItemThumbnail > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_scaled_image_as_thumbnail_async_overload_default_options)(
                        this,
                        ::winrt::RuntimeType::abi(&r#mode),
                        r#requested_size,
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#StorageItemThumbnail,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_scaled_image_as_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_scaled_image_as_thumbnail_async)(
                        this,
                        ::winrt::RuntimeType::abi(&r#mode),
                        r#requested_size,
                        ::winrt::RuntimeType::abi(&r#options),
                        <super::r#foundation::r#IAsyncOperation<
                            r#file_properties::r#StorageItemThumbnail,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_size_default_options(r#mode)
            }
            pub fn r#get_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_options(r#mode, r#requested_size)
            }
            pub fn r#get_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_name()
            }
            pub fn r#display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_type()
            }
            pub fn r#folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#folder_relative_id()
            }
            pub fn r#properties(
                &self,
            ) -> ::winrt::Result<r#file_properties::r#StorageItemContentProperties> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self).r#properties()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageItemProperties2 {
            type VTable = abi_IStorageItemProperties2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2391189841,
                    1209,
                    19410,
                    [146, 157, 254, 243, 247, 22, 33, 208],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageItemProperties2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemProperties2 {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options:
                extern "system" fn(
                    *const *const abi_IStorageItemProperties2,
                    <r#file_properties::r#ThumbnailMode as ::winrt::RuntimeType>::Abi,
                    *mut <super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            pub r#get_scaled_image_as_thumbnail_async_overload_default_options:
                extern "system" fn(
                    *const *const abi_IStorageItemProperties2,
                    <r#file_properties::r#ThumbnailMode as ::winrt::RuntimeType>::Abi,
                    u32,
                    *mut <super::r#foundation::r#IAsyncOperation<
                        r#file_properties::r#StorageItemThumbnail,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            pub r#get_scaled_image_as_thumbnail_async: extern "system" fn(
                *const *const abi_IStorageItemProperties2,
                <r#file_properties::r#ThumbnailMode as ::winrt::RuntimeType>::Abi,
                u32,
                <r#file_properties::r#ThumbnailOptions as ::winrt::RuntimeType>::Abi,
                *mut <super::r#foundation::r#IAsyncOperation<
                    r#file_properties::r#StorageItemThumbnail,
                > as ::winrt::RuntimeType>::Abi,
            )
                -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageItemProperties2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{8e86a951-04b9-4bd2-929d-fef3f71621d0}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageItemProperties2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageItemProperties2> for r#IStorageItemProperties {
            fn from(value: r#IStorageItemProperties2) -> r#IStorageItemProperties {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageItemProperties2> for r#IStorageItemProperties {
            fn from(value: &r#IStorageItemProperties2) -> r#IStorageItemProperties {
                <r#IStorageItemProperties2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageItemProperties2> for ::winrt::Object {
            fn from(value: r#IStorageItemProperties2) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageItemProperties2> for ::winrt::Object {
            fn from(value: &r#IStorageItemProperties2) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageItemPropertiesWithProvider {
            ptr: ::winrt::ComPtr<r#IStorageItemPropertiesWithProvider>,
        }
        impl r#IStorageItemPropertiesWithProvider {
            pub fn r#provider(&self) -> ::winrt::Result<r#StorageProvider> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageProvider = ::std::mem::zeroed();
                    ((*(*(this))).r#provider)(
                        this,
                        <r#StorageProvider as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_size_default_options(r#mode)
            }
            pub fn r#get_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_options(r#mode, r#requested_size)
            }
            pub fn r#get_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_name()
            }
            pub fn r#display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_type()
            }
            pub fn r#folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#folder_relative_id()
            }
            pub fn r#properties(
                &self,
            ) -> ::winrt::Result<r#file_properties::r#StorageItemContentProperties> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self).r#properties()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageItemPropertiesWithProvider {
            type VTable = abi_IStorageItemPropertiesWithProvider;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2249978779,
                    25448,
                    19950,
                    [180, 14, 116, 104, 74, 92, 231, 20],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageItemPropertiesWithProvider {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageItemPropertiesWithProvider {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#provider: extern "system" fn(
                *const *const abi_IStorageItemPropertiesWithProvider,
                *mut <r#StorageProvider as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageItemPropertiesWithProvider {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{861bf39b-6368-4dee-b40e-74684a5ce714}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageItemPropertiesWithProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageItemPropertiesWithProvider> for r#IStorageItemProperties {
            fn from(value: r#IStorageItemPropertiesWithProvider) -> r#IStorageItemProperties {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageItemPropertiesWithProvider> for r#IStorageItemProperties {
            fn from(value: &r#IStorageItemPropertiesWithProvider) -> r#IStorageItemProperties {
                <r#IStorageItemPropertiesWithProvider as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageItemPropertiesWithProvider> for ::winrt::Object {
            fn from(value: r#IStorageItemPropertiesWithProvider) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageItemPropertiesWithProvider> for ::winrt::Object {
            fn from(value: &r#IStorageItemPropertiesWithProvider) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageLibraryChange {
            ptr: ::winrt::ComPtr<r#IStorageLibraryChange>,
        }
        impl r#IStorageLibraryChange {
            pub fn r#change_type(&self) -> ::winrt::Result<r#StorageLibraryChangeType> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageLibraryChangeType = ::std::mem::zeroed();
                    ((*(*(this))).r#change_type)(
                        this,
                        <r#StorageLibraryChangeType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#previous_path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#previous_path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_of_type)(
                        this,
                        ::winrt::RuntimeType::abi(&r#type),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_storage_item_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#IStorageItem> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_storage_item_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageLibraryChange {
            type VTable = abi_IStorageLibraryChange;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    9964323,
                    11234,
                    18697,
                    [170, 72, 21, 159, 82, 3, 165, 30],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageLibraryChange {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChange where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#change_type : extern "system" fn ( * const * const abi_IStorageLibraryChange , * mut < r#StorageLibraryChangeType as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#path : extern "system" fn ( * const * const abi_IStorageLibraryChange , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#previous_path : extern "system" fn ( * const * const abi_IStorageLibraryChange , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#is_of_type : extern "system" fn ( * const * const abi_IStorageLibraryChange , < r#StorageItemTypes as :: winrt :: RuntimeType > :: Abi , * mut bool , ) -> :: winrt :: ErrorCode , pub r#get_storage_item_async : extern "system" fn ( * const * const abi_IStorageLibraryChange , * mut < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
        unsafe impl ::winrt::RuntimeType for r#IStorageLibraryChange {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{00980b23-2be2-4909-aa48-159f5203a51e}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageLibraryChange> for ::winrt::Object {
            fn from(value: r#IStorageLibraryChange) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageLibraryChange> for ::winrt::Object {
            fn from(value: &r#IStorageLibraryChange) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageLibraryChangeReader {
            ptr: ::winrt::ComPtr<r#IStorageLibraryChangeReader>,
        }
        impl r#IStorageLibraryChangeReader {
            pub fn r#read_batch_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageLibraryChange>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageLibraryChange>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#read_batch_async)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<
                                r#StorageLibraryChange,
                            >,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#accept_changes_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#accept_changes_async)(
                        this,
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageLibraryChangeReader {
            type VTable = abi_IStorageLibraryChangeReader;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4060462211,
                    64674,
                    16889,
                    [137, 84, 238, 46, 153, 30, 185, 111],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageLibraryChangeReader {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChangeReader {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#read_batch_async: extern "system" fn(
                *const *const abi_IStorageLibraryChangeReader,
                *mut <super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageLibraryChange>,
                > as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#accept_changes_async: extern "system" fn(
                *const *const abi_IStorageLibraryChangeReader,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageLibraryChangeReader {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{f205bc83-fca2-41f9-8954-ee2e991eb96f}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: r#IStorageLibraryChangeReader) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: &r#IStorageLibraryChangeReader) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageLibraryChangeTracker {
            ptr: ::winrt::ComPtr<r#IStorageLibraryChangeTracker>,
        }
        impl r#IStorageLibraryChangeTracker {
            pub fn r#get_change_reader(&self) -> ::winrt::Result<r#StorageLibraryChangeReader> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageLibraryChangeReader = ::std::mem::zeroed();
                    ((*(*(this))).r#get_change_reader)(
                        this,
                        <r#StorageLibraryChangeReader as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#enable(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#enable)(this).ok() }
            }
            pub fn r#reset(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#reset)(this).ok() }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageLibraryChangeTracker {
            type VTable = abi_IStorageLibraryChangeTracker;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2652205846,
                    24691,
                    17654,
                    [150, 129, 116, 146, 209, 40, 108, 144],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageLibraryChangeTracker {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageLibraryChangeTracker {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_change_reader: extern "system" fn(
                *const *const abi_IStorageLibraryChangeTracker,
                *mut <r#StorageLibraryChangeReader as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#enable: extern "system" fn(
                *const *const abi_IStorageLibraryChangeTracker,
            ) -> ::winrt::ErrorCode,
            pub r#reset: extern "system" fn(
                *const *const abi_IStorageLibraryChangeTracker,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageLibraryChangeTracker {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{9e157316-6073-44f6-9681-7492d1286c90}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: r#IStorageLibraryChangeTracker) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: &r#IStorageLibraryChangeTracker) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageProvider {
            ptr: ::winrt::ComPtr<r#IStorageProvider>,
        }
        impl r#IStorageProvider {
            pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#id)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageProvider {
            type VTable = abi_IStorageProvider;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    3875925716,
                    54392,
                    18390,
                    [186, 70, 26, 142, 190, 17, 74, 32],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageProvider {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageProvider {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#id: extern "system" fn(
                *const *const abi_IStorageProvider,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#display_name: extern "system" fn(
                *const *const abi_IStorageProvider,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageProvider {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{e705eed4-d478-47d6-ba46-1a8ebe114a20}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageProvider> for ::winrt::Object {
            fn from(value: r#IStorageProvider) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageProvider> for ::winrt::Object {
            fn from(value: &r#IStorageProvider) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageProvider2 {
            ptr: ::winrt::ComPtr<r#IStorageProvider2>,
        }
        impl r#IStorageProvider2 {
            pub fn r#is_property_supported_for_partial_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#property_canonical_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<bool>> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<bool> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#is_property_supported_for_partial_file_async ) ( this , r#property_canonical_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < bool > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageProvider as ::std::convert::From<&Self>>::from(self).r#id()
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageProvider as ::std::convert::From<&Self>>::from(self).r#display_name()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageProvider2 {
            type VTable = abi_IStorageProvider2;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    17635607,
                    13316,
                    16715,
                    [159, 215, 205, 68, 71, 46, 170, 57],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageProvider2 {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageProvider2 {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#is_property_supported_for_partial_file_async:
                extern "system" fn(
                    *const *const abi_IStorageProvider2,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <super::r#foundation::r#IAsyncOperation<bool> as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageProvider2 {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{010d1917-3404-414b-9fd7-cd44472eaa39}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageProvider2 {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageProvider2> for r#IStorageProvider {
            fn from(value: r#IStorageProvider2) -> r#IStorageProvider {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageProvider2> for r#IStorageProvider {
            fn from(value: &r#IStorageProvider2) -> r#IStorageProvider {
                <r#IStorageProvider2 as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageProvider2> for ::winrt::Object {
            fn from(value: r#IStorageProvider2) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageProvider2> for ::winrt::Object {
            fn from(value: &r#IStorageProvider2) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStorageStreamTransaction {
            ptr: ::winrt::ComPtr<r#IStorageStreamTransaction>,
        }
        impl r#IStorageStreamTransaction {
            pub fn r#stream(&self) -> ::winrt::Result<r#streams::r#IRandomAccessStream> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#streams::r#IRandomAccessStream = ::std::mem::zeroed();
                    ((*(*(this))).r#stream)(
                        this,
                        <r#streams::r#IRandomAccessStream as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#commit_async(&self) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#commit_async)(
                        this,
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(self)
                    .r#close()
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStorageStreamTransaction {
            type VTable = abi_IStorageStreamTransaction;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4135383907,
                    42301,
                    19860,
                    [174, 44, 103, 35, 45, 147, 172, 221],
                )
            }
        }
        impl ::std::clone::Clone for r#IStorageStreamTransaction {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStorageStreamTransaction {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#stream: extern "system" fn(
                *const *const abi_IStorageStreamTransaction,
                *mut <r#streams::r#IRandomAccessStream as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub r#commit_async: extern "system" fn(
                *const *const abi_IStorageStreamTransaction,
                *mut <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStorageStreamTransaction {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{f67cf363-a53d-4d94-ae2c-67232d93acdd}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStorageStreamTransaction> for super::r#foundation::r#IClosable {
            fn from(value: r#IStorageStreamTransaction) -> super::r#foundation::r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#IStorageStreamTransaction> for super::r#foundation::r#IClosable {
            fn from(value: &r#IStorageStreamTransaction) -> super::r#foundation::r#IClosable {
                <r#IStorageStreamTransaction as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#IStorageStreamTransaction> for ::winrt::Object {
            fn from(value: r#IStorageStreamTransaction) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStorageStreamTransaction> for ::winrt::Object {
            fn from(value: &r#IStorageStreamTransaction) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IStreamedFileDataRequest {
            ptr: ::winrt::ComPtr<r#IStreamedFileDataRequest>,
        }
        impl r#IStreamedFileDataRequest {
            pub fn r#fail_and_close(
                &self,
                r#failure_mode: r#StreamedFileFailureMode,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    ((*(*(this))).r#fail_and_close)(
                        this,
                        ::winrt::RuntimeType::abi(&r#failure_mode),
                    )
                    .ok()
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IStreamedFileDataRequest {
            type VTable = abi_IStreamedFileDataRequest;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    376700110,
                    55997,
                    19792,
                    [190, 238, 24, 11, 138, 129, 145, 182],
                )
            }
        }
        impl ::std::clone::Clone for r#IStreamedFileDataRequest {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IStreamedFileDataRequest {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#fail_and_close: extern "system" fn(
                *const *const abi_IStreamedFileDataRequest,
                <r#StreamedFileFailureMode as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IStreamedFileDataRequest {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{1673fcce-dabd-4d50-beee-180b8a8191b6}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IStreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IStreamedFileDataRequest> for ::winrt::Object {
            fn from(value: r#IStreamedFileDataRequest) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IStreamedFileDataRequest> for ::winrt::Object {
            fn from(value: &r#IStreamedFileDataRequest) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#NameCollisionOption {
            value: i32,
        }
        impl r#NameCollisionOption {
            #![allow(non_upper_case_globals)]
            pub const r#GenerateUniqueName: Self = Self { value: 0i32 };
            pub const r#ReplaceExisting: Self = Self { value: 1i32 };
            pub const r#FailIfExists: Self = Self { value: 2i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#NameCollisionOption {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.NameCollisionOption;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#StorageDeleteOption {
            value: i32,
        }
        impl r#StorageDeleteOption {
            #![allow(non_upper_case_globals)]
            pub const r#Default: Self = Self { value: 0i32 };
            pub const r#PermanentDelete: Self = Self { value: 1i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#StorageDeleteOption {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.StorageDeleteOption;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageFile {
            ptr: ::winrt::ComPtr<r#StorageFile>,
        }
        impl r#StorageFile {
            pub fn r#file_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#file_type)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#content_type(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#content_type)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#open_async(
                &self,
                r#access_mode: r#FileAccessMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#streams::r#IRandomAccessStream>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#streams::r#IRandomAccessStream,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_async ) ( this , :: winrt :: RuntimeType :: abi ( & r#access_mode ) , < super :: r#foundation :: r#IAsyncOperation :: < r#streams :: r#IRandomAccessStream > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#open_transacted_write_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageStreamTransaction>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        r#StorageStreamTransaction,
                    > = ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#open_transacted_write_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageStreamTransaction > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload_default_name_and_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
            >(
                &self,
                r#destination_folder: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload_default_name_and_options ) ( this , r#destination_folder . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload_default_options ) ( this , r#destination_folder . into ( ) . abi ( ) , r#desired_new_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_overload<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#copy_overload ) ( this , r#destination_folder . into ( ) . abi ( ) , r#desired_new_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#option ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#copy_and_replace_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
            >(
                &self,
                r#file_to_replace: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#copy_and_replace_async)(
                        this,
                        r#file_to_replace.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload_default_name_and_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
            >(
                &self,
                r#destination_folder: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload_default_name_and_options)(
                        this,
                        r#destination_folder.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload_default_options)(
                        this,
                        r#destination_folder.into().abi(),
                        r#desired_new_name.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_overload<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFolder>>,
                __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#destination_folder: __0,
                r#desired_new_name: __1,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_overload)(
                        this,
                        r#destination_folder.into().abi(),
                        r#desired_new_name.into().abi(),
                        ::winrt::RuntimeType::abi(&r#option),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#move_and_replace_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
            >(
                &self,
                r#file_to_replace: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#move_and_replace_async)(
                        this,
                        r#file_to_replace.into().abi(),
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#open_with_options_async(
                &self,
                r#access_mode: r#FileAccessMode,
                r#options: r#StorageOpenOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#streams::r#IRandomAccessStream>,
            > {
                <r#IStorageFile2 as ::std::convert::From<&Self>>::from(self)
                    .r#open_with_options_async(r#access_mode, r#options)
            }
            pub fn r#open_transacted_write_with_options_async(
                &self,
                r#options: r#StorageOpenOptions,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageStreamTransaction>>
            {
                <r#IStorageFile2 as ::std::convert::From<&Self>>::from(self)
                    .r#open_transacted_write_with_options_async(r#options)
            }
            pub fn r#is_available(&self) -> ::winrt::Result<bool> {
                <r#IStorageFilePropertiesWithAvailability as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#is_available()
            }
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async_overload_default_options(r#desired_name)
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async(r#desired_name, r#option)
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#delete_async_overload_default_options()
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#delete_async(r#option)
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#get_basic_properties_async()
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#name()
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#path()
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#attributes()
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#date_created()
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#is_of_type(r#type)
            }
            pub fn r#get_parent_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                <r#IStorageItem2 as ::std::convert::From<&Self>>::from(self).r#get_parent_async()
            }
            pub fn r#is_equal<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageItem>>>(
                &self,
                r#item: __0,
            ) -> ::winrt::Result<bool> {
                <r#IStorageItem2 as ::std::convert::From<&Self>>::from(self).r#is_equal(r#item)
            }
            pub fn r#get_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_size_default_options(r#mode)
            }
            pub fn r#get_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_options(r#mode, r#requested_size)
            }
            pub fn r#get_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_name()
            }
            pub fn r#display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_type()
            }
            pub fn r#folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#folder_relative_id()
            }
            pub fn r#properties(
                &self,
            ) -> ::winrt::Result<r#file_properties::r#StorageItemContentProperties> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self).r#properties()
            }
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                        r#mode,
                    )
            }
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async_overload_default_options(
                        r#mode,
                        r#requested_size,
                    )
            }
            pub fn r#get_scaled_image_as_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#provider(&self) -> ::winrt::Result<r#StorageProvider> {
                <r#IStorageItemPropertiesWithProvider as ::std::convert::From<&Self>>::from(self)
                    .r#provider()
            }
            pub fn r#open_sequential_read_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#streams::r#IInputStream>>
            {
                <r#streams::r#IInputStreamReference as ::std::convert::From<&Self>>::from(self)
                    .r#open_sequential_read_async()
            }
            pub fn r#open_read_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    r#streams::r#IRandomAccessStreamWithContentType,
                >,
            > {
                <r#streams::r#IRandomAccessStreamReference as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#open_read_async()
            }
            pub fn r#get_file_from_path_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#path: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?
                    .r#get_file_from_path_async(r#path)
            }
            pub fn r#get_file_from_application_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
            >(
                r#uri: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?
                    .r#get_file_from_application_uri_async(r#uri)
            }
            pub fn r#create_streamed_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#StreamedFileDataRequestedHandler>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                r#display_name_with_extension: __0,
                r#data_requested: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?.r#create_streamed_file_async(
                    r#display_name_with_extension,
                    r#data_requested,
                    r#thumbnail,
                )
            }
            pub fn r#replace_with_streamed_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
                __1: ::std::convert::Into<::winrt::Param<'a, r#StreamedFileDataRequestedHandler>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                r#file_to_replace: __0,
                r#data_requested: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?
                    .r#replace_with_streamed_file_async(
                        r#file_to_replace,
                        r#data_requested,
                        r#thumbnail,
                    )
            }
            pub fn r#create_streamed_file_from_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                __1: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                r#display_name_with_extension: __0,
                r#uri: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?
                    .r#create_streamed_file_from_uri_async(
                        r#display_name_with_extension,
                        r#uri,
                        r#thumbnail,
                    )
            }
            pub fn r#replace_with_streamed_file_from_uri_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageFile>>,
                __1: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
                __2: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IRandomAccessStreamReference>>,
            >(
                r#file_to_replace: __0,
                r#uri: __1,
                r#thumbnail: __2,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                ::winrt::factory::<Self, r#IStorageFileStatics>()?
                    .r#replace_with_streamed_file_from_uri_async(
                        r#file_to_replace,
                        r#uri,
                        r#thumbnail,
                    )
            }
        }
        impl ::winrt::RuntimeName for r#StorageFile {
            const NAME: &'static str = "Windows.Storage.StorageFile";
        }
        unsafe impl ::winrt::ComInterface for r#StorageFile {
            type VTable = abi_IStorageFile;
            fn iid() -> ::winrt::Guid {
                <r#IStorageFile as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageFile {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageFile;{fa3f6186-4214-428c-a64c-14c9ac7315ea})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageFile {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageFile {
            fn from(value: r#StorageFile) -> r#IStorageFile {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageFile {
            fn from(value: &r#StorageFile) -> r#IStorageFile {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageFile2 {
            fn from(value: r#StorageFile) -> r#IStorageFile2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageFile2 {
            fn from(value: &r#StorageFile) -> r#IStorageFile2 {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageFilePropertiesWithAvailability {
            fn from(value: r#StorageFile) -> r#IStorageFilePropertiesWithAvailability {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageFilePropertiesWithAvailability {
            fn from(value: &r#StorageFile) -> r#IStorageFilePropertiesWithAvailability {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageItem {
            fn from(value: r#StorageFile) -> r#IStorageItem {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageItem {
            fn from(value: &r#StorageFile) -> r#IStorageItem {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageItem2 {
            fn from(value: r#StorageFile) -> r#IStorageItem2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageItem2 {
            fn from(value: &r#StorageFile) -> r#IStorageItem2 {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageItemProperties {
            fn from(value: r#StorageFile) -> r#IStorageItemProperties {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageItemProperties {
            fn from(value: &r#StorageFile) -> r#IStorageItemProperties {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageItemProperties2 {
            fn from(value: r#StorageFile) -> r#IStorageItemProperties2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageItemProperties2 {
            fn from(value: &r#StorageFile) -> r#IStorageItemProperties2 {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#IStorageItemPropertiesWithProvider {
            fn from(value: r#StorageFile) -> r#IStorageItemPropertiesWithProvider {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#IStorageItemPropertiesWithProvider {
            fn from(value: &r#StorageFile) -> r#IStorageItemPropertiesWithProvider {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#streams::r#IInputStreamReference {
            fn from(value: r#StorageFile) -> r#streams::r#IInputStreamReference {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#streams::r#IInputStreamReference {
            fn from(value: &r#StorageFile) -> r#streams::r#IInputStreamReference {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for r#streams::r#IRandomAccessStreamReference {
            fn from(value: r#StorageFile) -> r#streams::r#IRandomAccessStreamReference {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFile> for r#streams::r#IRandomAccessStreamReference {
            fn from(value: &r#StorageFile) -> r#streams::r#IRandomAccessStreamReference {
                <r#StorageFile as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFile> for ::winrt::Object {
            fn from(value: r#StorageFile) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageFile> for ::winrt::Object {
            fn from(value: &r#StorageFile) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageFolder {
            ptr: ::winrt::ComPtr<r#StorageFolder>,
        }
        impl r#StorageFolder {
            pub fn r#create_file_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_file_async_overload_default_options ) ( this , r#desired_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#options: r#CreationCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_file_async ) ( this , r#desired_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_folder_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_folder_async_overload_default_options ) ( this , r#desired_name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#create_folder_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#options: r#CreationCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#create_folder_async ) ( this , r#desired_name . into ( ) . abi ( ) , :: winrt :: RuntimeType :: abi ( & r#options ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFile>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFile> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_file_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFile > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_folder_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#StorageFolder> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_folder_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#StorageFolder > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_item_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#IStorageItem> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_item_async ) ( this , r#name . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#get_files_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_files_async_overload_default_options_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_folders_async_overload_default_options_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_folders_async_overload_default_options_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_items_async_overload_default_start_and_count(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#get_items_async_overload_default_start_and_count)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#try_get_item_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                <r#IStorageFolder2 as ::std::convert::From<&Self>>::from(self)
                    .r#try_get_item_async(r#name)
            }
            pub fn r#try_get_change_tracker(
                &self,
            ) -> ::winrt::Result<r#StorageLibraryChangeTracker> {
                <r#IStorageFolder3 as ::std::convert::From<&Self>>::from(self)
                    .r#try_get_change_tracker()
            }
            pub fn r#rename_async_overload_default_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async_overload_default_options(r#desired_name)
            }
            pub fn r#rename_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#desired_name: __0,
                r#option: r#NameCollisionOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#rename_async(r#desired_name, r#option)
            }
            pub fn r#delete_async_overload_default_options(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#delete_async_overload_default_options()
            }
            pub fn r#delete_async(
                &self,
                r#option: r#StorageDeleteOption,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#delete_async(r#option)
            }
            pub fn r#get_basic_properties_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#BasicProperties>,
            > {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self)
                    .r#get_basic_properties_async()
            }
            pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#name()
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#path()
            }
            pub fn r#attributes(&self) -> ::winrt::Result<r#FileAttributes> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#attributes()
            }
            pub fn r#date_created(&self) -> ::winrt::Result<super::r#foundation::r#DateTime> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#date_created()
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                <r#IStorageItem as ::std::convert::From<&Self>>::from(self).r#is_of_type(r#type)
            }
            pub fn r#get_parent_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                <r#IStorageItem2 as ::std::convert::From<&Self>>::from(self).r#get_parent_async()
            }
            pub fn r#is_equal<'a, __0: ::std::convert::Into<::winrt::Param<'a, r#IStorageItem>>>(
                &self,
                r#item: __0,
            ) -> ::winrt::Result<bool> {
                <r#IStorageItem2 as ::std::convert::From<&Self>>::from(self).r#is_equal(r#item)
            }
            pub fn r#get_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_size_default_options(r#mode)
            }
            pub fn r#get_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async_overload_default_options(r#mode, r#requested_size)
            }
            pub fn r#get_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#get_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_name()
            }
            pub fn r#display_type(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#display_type()
            }
            pub fn r#folder_relative_id(&self) -> ::winrt::Result<::winrt::HString> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self)
                    .r#folder_relative_id()
            }
            pub fn r#properties(
                &self,
            ) -> ::winrt::Result<r#file_properties::r#StorageItemContentProperties> {
                <r#IStorageItemProperties as ::std::convert::From<&Self>>::from(self).r#properties()
            }
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async_overload_default_size_default_options(
                        r#mode,
                    )
            }
            pub fn r#get_scaled_image_as_thumbnail_async_overload_default_options(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async_overload_default_options(
                        r#mode,
                        r#requested_size,
                    )
            }
            pub fn r#get_scaled_image_as_thumbnail_async(
                &self,
                r#mode: r#file_properties::r#ThumbnailMode,
                r#requested_size: u32,
                r#options: r#file_properties::r#ThumbnailOptions,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<r#file_properties::r#StorageItemThumbnail>,
            > {
                <r#IStorageItemProperties2 as ::std::convert::From<&Self>>::from(self)
                    .r#get_scaled_image_as_thumbnail_async(r#mode, r#requested_size, r#options)
            }
            pub fn r#provider(&self) -> ::winrt::Result<r#StorageProvider> {
                <r#IStorageItemPropertiesWithProvider as ::std::convert::From<&Self>>::from(self)
                    .r#provider()
            }
            pub fn r#get_indexed_state_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#search::r#IndexedState>>
            {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_indexed_state_async()
            }
            pub fn r#create_file_query_overload_default(
                &self,
            ) -> ::winrt::Result<r#search::r#StorageFileQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_file_query_overload_default()
            }
            pub fn r#create_file_query(
                &self,
                r#query: r#search::r#CommonFileQuery,
            ) -> ::winrt::Result<r#search::r#StorageFileQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_file_query(r#query)
            }
            pub fn r#create_file_query_with_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#search::r#QueryOptions>>,
            >(
                &self,
                r#query_options: __0,
            ) -> ::winrt::Result<r#search::r#StorageFileQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_file_query_with_options(r#query_options)
            }
            pub fn r#create_folder_query_overload_default(
                &self,
            ) -> ::winrt::Result<r#search::r#StorageFolderQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_folder_query_overload_default()
            }
            pub fn r#create_folder_query(
                &self,
                r#query: r#search::r#CommonFolderQuery,
            ) -> ::winrt::Result<r#search::r#StorageFolderQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_folder_query(r#query)
            }
            pub fn r#create_folder_query_with_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#search::r#QueryOptions>>,
            >(
                &self,
                r#query_options: __0,
            ) -> ::winrt::Result<r#search::r#StorageFolderQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_folder_query_with_options(r#query_options)
            }
            pub fn r#create_item_query(
                &self,
            ) -> ::winrt::Result<r#search::r#StorageItemQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_item_query()
            }
            pub fn r#create_item_query_with_options<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#search::r#QueryOptions>>,
            >(
                &self,
                r#query_options: __0,
            ) -> ::winrt::Result<r#search::r#StorageItemQueryResult> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#create_item_query_with_options(r#query_options)
            }
            pub fn r#get_files_async(
                &self,
                r#query: r#search::r#CommonFileQuery,
                r#start_index: u32,
                r#max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                >,
            > {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_files_async(r#query, r#start_index, r#max_items_to_retrieve)
            }
            pub fn r#get_files_async_overload_default_start_and_count(
                &self,
                r#query: r#search::r#CommonFileQuery,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFile>,
                >,
            > {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_files_async_overload_default_start_and_count(r#query)
            }
            pub fn r#get_folders_async(
                &self,
                r#query: r#search::r#CommonFolderQuery,
                r#start_index: u32,
                r#max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                >,
            > {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_folders_async(
                    r#query,
                    r#start_index,
                    r#max_items_to_retrieve,
                )
            }
            pub fn r#get_folders_async_overload_default_start_and_count(
                &self,
                r#query: r#search::r#CommonFolderQuery,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageFolder>,
                >,
            > {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_folders_async_overload_default_start_and_count(r#query)
            }
            pub fn r#get_items_async(
                &self,
                r#start_index: u32,
                r#max_items_to_retrieve: u32,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#IStorageItem>,
                >,
            > {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#get_items_async(r#start_index, r#max_items_to_retrieve)
            }
            pub fn r#are_query_options_supported<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#search::r#QueryOptions>>,
            >(
                &self,
                r#query_options: __0,
            ) -> ::winrt::Result<bool> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#are_query_options_supported(r#query_options)
            }
            pub fn r#is_common_folder_query_supported(
                &self,
                r#query: r#search::r#CommonFolderQuery,
            ) -> ::winrt::Result<bool> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#is_common_folder_query_supported(r#query)
            }
            pub fn r#is_common_file_query_supported(
                &self,
                r#query: r#search::r#CommonFileQuery,
            ) -> ::winrt::Result<bool> {
                <r#search::r#IStorageFolderQueryOperations as ::std::convert::From<&Self>>::from(
                    self,
                )
                .r#is_common_file_query_supported(r#query)
            }
            pub fn r#get_folder_from_path_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                r#path: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#StorageFolder>>
            {
                ::winrt::factory::<Self, r#IStorageFolderStatics>()?
                    .r#get_folder_from_path_async(r#path)
            }
        }
        impl ::winrt::RuntimeName for r#StorageFolder {
            const NAME: &'static str = "Windows.Storage.StorageFolder";
        }
        unsafe impl ::winrt::ComInterface for r#StorageFolder {
            type VTable = abi_IStorageFolder;
            fn iid() -> ::winrt::Guid {
                <r#IStorageFolder as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageFolder {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageFolder;{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageFolder {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageFolder {
            fn from(value: r#StorageFolder) -> r#IStorageFolder {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageFolder {
            fn from(value: &r#StorageFolder) -> r#IStorageFolder {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageFolder2 {
            fn from(value: r#StorageFolder) -> r#IStorageFolder2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageFolder2 {
            fn from(value: &r#StorageFolder) -> r#IStorageFolder2 {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageFolder3 {
            fn from(value: r#StorageFolder) -> r#IStorageFolder3 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageFolder3 {
            fn from(value: &r#StorageFolder) -> r#IStorageFolder3 {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageItem {
            fn from(value: r#StorageFolder) -> r#IStorageItem {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageItem {
            fn from(value: &r#StorageFolder) -> r#IStorageItem {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageItem2 {
            fn from(value: r#StorageFolder) -> r#IStorageItem2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageItem2 {
            fn from(value: &r#StorageFolder) -> r#IStorageItem2 {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageItemProperties {
            fn from(value: r#StorageFolder) -> r#IStorageItemProperties {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageItemProperties {
            fn from(value: &r#StorageFolder) -> r#IStorageItemProperties {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageItemProperties2 {
            fn from(value: r#StorageFolder) -> r#IStorageItemProperties2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageItemProperties2 {
            fn from(value: &r#StorageFolder) -> r#IStorageItemProperties2 {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#IStorageItemPropertiesWithProvider {
            fn from(value: r#StorageFolder) -> r#IStorageItemPropertiesWithProvider {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#IStorageItemPropertiesWithProvider {
            fn from(value: &r#StorageFolder) -> r#IStorageItemPropertiesWithProvider {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for r#search::r#IStorageFolderQueryOperations {
            fn from(value: r#StorageFolder) -> r#search::r#IStorageFolderQueryOperations {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for r#search::r#IStorageFolderQueryOperations {
            fn from(value: &r#StorageFolder) -> r#search::r#IStorageFolderQueryOperations {
                <r#StorageFolder as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageFolder> for ::winrt::Object {
            fn from(value: r#StorageFolder) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageFolder> for ::winrt::Object {
            fn from(value: &r#StorageFolder) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#StorageItemTypes {
            value: u32,
        }
        impl r#StorageItemTypes {
            #![allow(non_upper_case_globals)]
            pub const r#None: Self = Self { value: 0u32 };
            pub const r#File: Self = Self { value: 1u32 };
            pub const r#Folder: Self = Self { value: 2u32 };
        }
        unsafe impl ::winrt::RuntimeType for r#StorageItemTypes {
            type Abi = u32;
            fn signature() -> String {
                "enum(Windows.Storage.StorageItemTypes;u4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for r#StorageItemTypes {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for r#StorageItemTypes {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageLibraryChange {
            ptr: ::winrt::ComPtr<r#StorageLibraryChange>,
        }
        impl r#StorageLibraryChange {
            pub fn r#change_type(&self) -> ::winrt::Result<r#StorageLibraryChangeType> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageLibraryChangeType = ::std::mem::zeroed();
                    ((*(*(this))).r#change_type)(
                        this,
                        <r#StorageLibraryChangeType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#previous_path(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#previous_path)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#is_of_type(&self, r#type: r#StorageItemTypes) -> ::winrt::Result<bool> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: bool = ::std::mem::zeroed();
                    ((*(*(this))).r#is_of_type)(
                        this,
                        ::winrt::RuntimeType::abi(&r#type),
                        <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#get_storage_item_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<r#IStorageItem>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<r#IStorageItem> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#get_storage_item_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < r#IStorageItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
        }
        impl ::winrt::RuntimeName for r#StorageLibraryChange {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChange";
        }
        unsafe impl ::winrt::ComInterface for r#StorageLibraryChange {
            type VTable = abi_IStorageLibraryChange;
            fn iid() -> ::winrt::Guid {
                <r#IStorageLibraryChange as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageLibraryChange {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChange;{00980b23-2be2-4909-aa48-159f5203a51e})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageLibraryChange {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChange> for r#IStorageLibraryChange {
            fn from(value: r#StorageLibraryChange) -> r#IStorageLibraryChange {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChange> for r#IStorageLibraryChange {
            fn from(value: &r#StorageLibraryChange) -> r#IStorageLibraryChange {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChange> for ::winrt::Object {
            fn from(value: r#StorageLibraryChange) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChange> for ::winrt::Object {
            fn from(value: &r#StorageLibraryChange) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageLibraryChangeReader {
            ptr: ::winrt::ComPtr<r#StorageLibraryChangeReader>,
        }
        impl r#StorageLibraryChangeReader {
            pub fn r#read_batch_async(
                &self,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<
                    super::r#foundation::r#collections::r#IVectorView<r#StorageLibraryChange>,
                >,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#foundation::r#collections::r#IVectorView<r#StorageLibraryChange>,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#read_batch_async)(
                        this,
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#foundation::r#collections::r#IVectorView<
                                r#StorageLibraryChange,
                            >,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#accept_changes_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#accept_changes_async)(
                        this,
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        impl ::winrt::RuntimeName for r#StorageLibraryChangeReader {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeReader";
        }
        unsafe impl ::winrt::ComInterface for r#StorageLibraryChangeReader {
            type VTable = abi_IStorageLibraryChangeReader;
            fn iid() -> ::winrt::Guid {
                <r#IStorageLibraryChangeReader as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageLibraryChangeReader {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChangeReader;{f205bc83-fca2-41f9-8954-ee2e991eb96f})" . to_owned ( )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageLibraryChangeReader {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChangeReader> for r#IStorageLibraryChangeReader {
            fn from(value: r#StorageLibraryChangeReader) -> r#IStorageLibraryChangeReader {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChangeReader> for r#IStorageLibraryChangeReader {
            fn from(value: &r#StorageLibraryChangeReader) -> r#IStorageLibraryChangeReader {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: r#StorageLibraryChangeReader) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChangeReader> for ::winrt::Object {
            fn from(value: &r#StorageLibraryChangeReader) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageLibraryChangeTracker {
            ptr: ::winrt::ComPtr<r#StorageLibraryChangeTracker>,
        }
        impl r#StorageLibraryChangeTracker {
            pub fn r#get_change_reader(&self) -> ::winrt::Result<r#StorageLibraryChangeReader> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#StorageLibraryChangeReader = ::std::mem::zeroed();
                    ((*(*(this))).r#get_change_reader)(
                        this,
                        <r#StorageLibraryChangeReader as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#enable(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#enable)(this).ok() }
            }
            pub fn r#reset(&self) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#reset)(this).ok() }
            }
        }
        impl ::winrt::RuntimeName for r#StorageLibraryChangeTracker {
            const NAME: &'static str = "Windows.Storage.StorageLibraryChangeTracker";
        }
        unsafe impl ::winrt::ComInterface for r#StorageLibraryChangeTracker {
            type VTable = abi_IStorageLibraryChangeTracker;
            fn iid() -> ::winrt::Guid {
                <r#IStorageLibraryChangeTracker as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageLibraryChangeTracker {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageLibraryChangeTracker;{9e157316-6073-44f6-9681-7492d1286c90})" . to_owned ( )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageLibraryChangeTracker {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChangeTracker> for r#IStorageLibraryChangeTracker {
            fn from(value: r#StorageLibraryChangeTracker) -> r#IStorageLibraryChangeTracker {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChangeTracker> for r#IStorageLibraryChangeTracker {
            fn from(value: &r#StorageLibraryChangeTracker) -> r#IStorageLibraryChangeTracker {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: r#StorageLibraryChangeTracker) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageLibraryChangeTracker> for ::winrt::Object {
            fn from(value: &r#StorageLibraryChangeTracker) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#StorageLibraryChangeType {
            value: i32,
        }
        impl r#StorageLibraryChangeType {
            #![allow(non_upper_case_globals)]
            pub const r#Created: Self = Self { value: 0i32 };
            pub const r#Deleted: Self = Self { value: 1i32 };
            pub const r#MovedOrRenamed: Self = Self { value: 2i32 };
            pub const r#ContentsChanged: Self = Self { value: 3i32 };
            pub const r#MovedOutOfLibrary: Self = Self { value: 4i32 };
            pub const r#MovedIntoLibrary: Self = Self { value: 5i32 };
            pub const r#ContentsReplaced: Self = Self { value: 6i32 };
            pub const r#IndexingStatusChanged: Self = Self { value: 7i32 };
            pub const r#EncryptionChanged: Self = Self { value: 8i32 };
            pub const r#ChangeTrackingLost: Self = Self { value: 9i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#StorageLibraryChangeType {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.StorageLibraryChangeType;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#StorageOpenOptions {
            value: u32,
        }
        impl r#StorageOpenOptions {
            #![allow(non_upper_case_globals)]
            pub const r#None: Self = Self { value: 0u32 };
            pub const r#AllowOnlyReaders: Self = Self { value: 1u32 };
            pub const r#AllowReadersAndWriters: Self = Self { value: 2u32 };
        }
        unsafe impl ::winrt::RuntimeType for r#StorageOpenOptions {
            type Abi = u32;
            fn signature() -> String {
                "enum(Windows.Storage.StorageOpenOptions;u4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        impl ::std::ops::BitOr for r#StorageOpenOptions {
            type Output = Self;
            fn bitor(self, rhs: Self) -> Self {
                Self {
                    value: self.value | rhs.value,
                }
            }
        }
        impl ::std::ops::BitAnd for r#StorageOpenOptions {
            type Output = Self;
            fn bitand(self, rhs: Self) -> Self {
                Self {
                    value: self.value & rhs.value,
                }
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageProvider {
            ptr: ::winrt::ComPtr<r#StorageProvider>,
        }
        impl r#StorageProvider {
            pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#id)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#display_name(&self) -> ::winrt::Result<::winrt::HString> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                    ((*(*(this))).r#display_name)(
                        this,
                        <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#is_property_supported_for_partial_file_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
            >(
                &self,
                r#property_canonical_name: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<bool>> {
                <r#IStorageProvider2 as ::std::convert::From<&Self>>::from(self)
                    .r#is_property_supported_for_partial_file_async(r#property_canonical_name)
            }
        }
        impl ::winrt::RuntimeName for r#StorageProvider {
            const NAME: &'static str = "Windows.Storage.StorageProvider";
        }
        unsafe impl ::winrt::ComInterface for r#StorageProvider {
            type VTable = abi_IStorageProvider;
            fn iid() -> ::winrt::Guid {
                <r#IStorageProvider as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageProvider {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageProvider;{e705eed4-d478-47d6-ba46-1a8ebe114a20})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageProvider {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageProvider> for r#IStorageProvider {
            fn from(value: r#StorageProvider) -> r#IStorageProvider {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageProvider> for r#IStorageProvider {
            fn from(value: &r#StorageProvider) -> r#IStorageProvider {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageProvider> for r#IStorageProvider2 {
            fn from(value: r#StorageProvider) -> r#IStorageProvider2 {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageProvider> for r#IStorageProvider2 {
            fn from(value: &r#StorageProvider) -> r#IStorageProvider2 {
                <r#StorageProvider as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageProvider> for ::winrt::Object {
            fn from(value: r#StorageProvider) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageProvider> for ::winrt::Object {
            fn from(value: &r#StorageProvider) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StorageStreamTransaction {
            ptr: ::winrt::ComPtr<r#StorageStreamTransaction>,
        }
        impl r#StorageStreamTransaction {
            pub fn r#stream(&self) -> ::winrt::Result<r#streams::r#IRandomAccessStream> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#streams::r#IRandomAccessStream = ::std::mem::zeroed();
                    ((*(*(this))).r#stream)(
                        this,
                        <r#streams::r#IRandomAccessStream as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#commit_async(&self) -> ::winrt::Result<super::r#foundation::r#IAsyncAction> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncAction = ::std::mem::zeroed();
                    ((*(*(this))).r#commit_async)(
                        this,
                        <super::r#foundation::r#IAsyncAction as ::winrt::RuntimeType>::set_abi(
                            &mut __ok,
                        ),
                    )
                    .and_then(|| __ok)
                }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(self)
                    .r#close()
            }
        }
        impl ::winrt::RuntimeName for r#StorageStreamTransaction {
            const NAME: &'static str = "Windows.Storage.StorageStreamTransaction";
        }
        unsafe impl ::winrt::ComInterface for r#StorageStreamTransaction {
            type VTable = abi_IStorageStreamTransaction;
            fn iid() -> ::winrt::Guid {
                <r#IStorageStreamTransaction as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StorageStreamTransaction {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StorageStreamTransaction;{f67cf363-a53d-4d94-ae2c-67232d93acdd})" . to_owned ( )
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StorageStreamTransaction {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StorageStreamTransaction> for r#IStorageStreamTransaction {
            fn from(value: r#StorageStreamTransaction) -> r#IStorageStreamTransaction {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageStreamTransaction> for r#IStorageStreamTransaction {
            fn from(value: &r#StorageStreamTransaction) -> r#IStorageStreamTransaction {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StorageStreamTransaction> for super::r#foundation::r#IClosable {
            fn from(value: r#StorageStreamTransaction) -> super::r#foundation::r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StorageStreamTransaction> for super::r#foundation::r#IClosable {
            fn from(value: &r#StorageStreamTransaction) -> super::r#foundation::r#IClosable {
                <r#StorageStreamTransaction as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StorageStreamTransaction> for ::winrt::Object {
            fn from(value: r#StorageStreamTransaction) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StorageStreamTransaction> for ::winrt::Object {
            fn from(value: &r#StorageStreamTransaction) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, Clone, PartialEq)]
        pub struct r#StreamedFileDataRequest {
            ptr: ::winrt::ComPtr<r#StreamedFileDataRequest>,
        }
        impl r#StreamedFileDataRequest {
            pub fn r#write_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#streams::r#IBuffer>>,
            >(
                &self,
                r#buffer: __0,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperationWithProgress<u32, u32>>
            {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperationWithProgress<u32, u32> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#write_async ) ( this , r#buffer . into ( ) . abi ( ) , < super :: r#foundation :: r#IAsyncOperationWithProgress :: < u32 , u32 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#flush_async(
                &self,
            ) -> ::winrt::Result<super::r#foundation::r#IAsyncOperation<bool>> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<bool> =
                        ::std::mem::zeroed();
                    ( ( * ( * ( this ) ) ) . r#flush_async ) ( this , < super :: r#foundation :: r#IAsyncOperation :: < bool > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                }
            }
            pub fn r#close(&self) -> ::winrt::Result<()> {
                <super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(self)
                    .r#close()
            }
            pub fn r#fail_and_close(
                &self,
                r#failure_mode: r#StreamedFileFailureMode,
            ) -> ::winrt::Result<()> {
                <r#IStreamedFileDataRequest as ::std::convert::From<&Self>>::from(self)
                    .r#fail_and_close(r#failure_mode)
            }
        }
        impl ::winrt::RuntimeName for r#StreamedFileDataRequest {
            const NAME: &'static str = "Windows.Storage.StreamedFileDataRequest";
        }
        unsafe impl ::winrt::ComInterface for r#StreamedFileDataRequest {
            type VTable = r#streams::abi_IOutputStream;
            fn iid() -> ::winrt::Guid {
                <r#streams::r#IOutputStream as ::winrt::ComInterface>::iid()
            }
        }
        unsafe impl ::winrt::RuntimeType for r#StreamedFileDataRequest {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "rc(Windows.Storage.StreamedFileDataRequest;{905a0fe6-bc53-11df-8c49-001e4fc686da})"
                    .to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StreamedFileDataRequest {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#StreamedFileDataRequest> for r#streams::r#IOutputStream {
            fn from(value: r#StreamedFileDataRequest) -> r#streams::r#IOutputStream {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StreamedFileDataRequest> for r#streams::r#IOutputStream {
            fn from(value: &r#StreamedFileDataRequest) -> r#streams::r#IOutputStream {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl ::std::convert::From<r#StreamedFileDataRequest> for super::r#foundation::r#IClosable {
            fn from(value: r#StreamedFileDataRequest) -> super::r#foundation::r#IClosable {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StreamedFileDataRequest> for super::r#foundation::r#IClosable {
            fn from(value: &r#StreamedFileDataRequest) -> super::r#foundation::r#IClosable {
                <r#StreamedFileDataRequest as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StreamedFileDataRequest> for r#IStreamedFileDataRequest {
            fn from(value: r#StreamedFileDataRequest) -> r#IStreamedFileDataRequest {
                ::std::convert::From::from(&value)
            }
        }
        impl ::std::convert::From<&r#StreamedFileDataRequest> for r#IStreamedFileDataRequest {
            fn from(value: &r#StreamedFileDataRequest) -> r#IStreamedFileDataRequest {
                <r#StreamedFileDataRequest as ::winrt::ComInterface>::query(value)
            }
        }
        impl ::std::convert::From<r#StreamedFileDataRequest> for ::winrt::Object {
            fn from(value: r#StreamedFileDataRequest) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#StreamedFileDataRequest> for ::winrt::Object {
            fn from(value: &r#StreamedFileDataRequest) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#StreamedFileDataRequestedHandler {
            ptr: ::winrt::ComPtr<r#StreamedFileDataRequestedHandler>,
        }
        impl r#StreamedFileDataRequestedHandler {
            pub fn r#invoke<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, r#StreamedFileDataRequest>>,
            >(
                &self,
                r#stream: __0,
            ) -> ::winrt::Result<()> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe { ((*(*(this))).r#invoke)(this, r#stream.into().abi()).ok() }
            }
            pub fn new<F: FnMut(&r#StreamedFileDataRequest) -> ::winrt::Result<()>>(
                invoke: F,
            ) -> Self {
                impl_StreamedFileDataRequestedHandler::<F>::new(invoke)
            }
        }
        unsafe impl ::winrt::ComInterface for r#StreamedFileDataRequestedHandler {
            type VTable = abi_StreamedFileDataRequestedHandler;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4277577764,
                    12257,
                    19719,
                    [163, 91, 183, 124, 80, 181, 244, 204],
                )
            }
        }
        impl ::std::clone::Clone for r#StreamedFileDataRequestedHandler {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_StreamedFileDataRequestedHandler {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub r#invoke: extern "system" fn(
                *const *const abi_StreamedFileDataRequestedHandler,
                <r#StreamedFileDataRequest as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#StreamedFileDataRequestedHandler {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "delegate({fef6a824-2fe1-4d07-a35b-b77c50b5f4cc})".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#StreamedFileDataRequestedHandler {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        #[repr(C)]
        struct impl_StreamedFileDataRequestedHandler<
            F: FnMut(&r#StreamedFileDataRequest) -> ::winrt::Result<()>,
        > {
            vtable: *const abi_StreamedFileDataRequestedHandler,
            count: ::winrt::RefCount,
            invoke: F,
        }
        impl<F: FnMut(&r#StreamedFileDataRequest) -> ::winrt::Result<()>>
            impl_StreamedFileDataRequestedHandler<F>
        {
            const VTABLE: abi_StreamedFileDataRequestedHandler =
                abi_StreamedFileDataRequestedHandler {
                    unknown_query_interface:
                        impl_StreamedFileDataRequestedHandler::<F>::unknown_query_interface,
                    unknown_add_ref: impl_StreamedFileDataRequestedHandler::<F>::unknown_add_ref,
                    unknown_release: impl_StreamedFileDataRequestedHandler::<F>::unknown_release,
                    invoke: impl_StreamedFileDataRequestedHandler::<F>::invoke,
                };
            pub fn new(invoke: F) -> r#StreamedFileDataRequestedHandler {
                let value = Self {
                    vtable: &Self::VTABLE,
                    count: ::winrt::RefCount::new(1),
                    invoke,
                };
                unsafe {
                    let mut result: r#StreamedFileDataRequestedHandler = std::mem::zeroed();
                    *<r#StreamedFileDataRequestedHandler as ::winrt::RuntimeType>::set_abi(
                        &mut result,
                    ) = ::std::boxed::Box::into_raw(::std::boxed::Box::new(value))
                        as *const *const abi_StreamedFileDataRequestedHandler;
                    result
                }
            }
            extern "system" fn unknown_query_interface(
                this: ::winrt::RawComPtr<::winrt::IUnknown>,
                iid: &::winrt::Guid,
                interface: *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    if iid == &<r#StreamedFileDataRequestedHandler as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IUnknown as ::winrt::ComInterface>::iid()
                        || iid == &<::winrt::IAgileObject as ::winrt::ComInterface>::iid()
                    {
                        *interface = this as ::winrt::RawPtr;
                        (*this).count.add_ref();
                        return ::winrt::ErrorCode(0);
                    }
                    *interface = std::ptr::null_mut();
                    ::winrt::ErrorCode(0x80004002)
                }
            }
            extern "system" fn unknown_add_ref(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    (*this).count.add_ref()
                }
            }
            extern "system" fn unknown_release(this: ::winrt::RawComPtr<::winrt::IUnknown>) -> u32 {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
            }
            extern "system" fn r#invoke(
                this: *const *const abi_StreamedFileDataRequestedHandler,
                r#stream: <r#StreamedFileDataRequest as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode {
                unsafe {
                    let this = this as *const Self as *mut Self;
                    ((*this).invoke)(::winrt::RuntimeType::from_abi(&r#stream)).into()
                }
            }
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#StreamedFileFailureMode {
            value: i32,
        }
        impl r#StreamedFileFailureMode {
            #![allow(non_upper_case_globals)]
            pub const r#Failed: Self = Self { value: 0i32 };
            pub const r#CurrentlyUnavailable: Self = Self { value: 1i32 };
            pub const r#Incomplete: Self = Self { value: 2i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#StreamedFileFailureMode {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Storage.StreamedFileFailureMode;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        pub mod r#file_properties {
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#BasicProperties {
                ptr: ::winrt::ComPtr<r#BasicProperties>,
            }
            impl r#BasicProperties {
                pub fn r#size(&self) -> ::winrt::Result<u64> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u64 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#date_modified(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#date_modified ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#item_date(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#item_date ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#BasicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.BasicProperties";
            }
            unsafe impl ::winrt::ComInterface for r#BasicProperties {
                type VTable = abi_IBasicProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IBasicProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#BasicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.BasicProperties;{d05d55db-785e-4a66-be02-9beec58aea81})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#BasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#BasicProperties> for r#IBasicProperties {
                fn from(value: r#BasicProperties) -> r#IBasicProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#BasicProperties> for r#IBasicProperties {
                fn from(value: &r#BasicProperties) -> r#IBasicProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#BasicProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#BasicProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#BasicProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#BasicProperties) -> r#IStorageItemExtraProperties {
                    <r#BasicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#BasicProperties> for ::winrt::Object {
                fn from(value: r#BasicProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#BasicProperties> for ::winrt::Object {
                fn from(value: &r#BasicProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#DocumentProperties {
                ptr: ::winrt::ComPtr<r#DocumentProperties>,
            }
            impl r#DocumentProperties {
                pub fn r#author(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#author ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#comment(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#comment)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_comment<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_comment)(this, r#value.into().abi()).ok() }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#DocumentProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.DocumentProperties";
            }
            unsafe impl ::winrt::ComInterface for r#DocumentProperties {
                type VTable = abi_IDocumentProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IDocumentProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#DocumentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.DocumentProperties;{7eab19bc-1821-4923-b4a9-0aea404d0070})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#DocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#DocumentProperties> for r#IDocumentProperties {
                fn from(value: r#DocumentProperties) -> r#IDocumentProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#DocumentProperties> for r#IDocumentProperties {
                fn from(value: &r#DocumentProperties) -> r#IDocumentProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#DocumentProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#DocumentProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#DocumentProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#DocumentProperties) -> r#IStorageItemExtraProperties {
                    <r#DocumentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#DocumentProperties> for ::winrt::Object {
                fn from(value: r#DocumentProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#DocumentProperties> for ::winrt::Object {
                fn from(value: &r#DocumentProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IBasicProperties {
                ptr: ::winrt::ComPtr<r#IBasicProperties>,
            }
            impl r#IBasicProperties {
                pub fn r#size(&self) -> ::winrt::Result<u64> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u64 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#date_modified(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#date_modified ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#item_date(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#item_date ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IBasicProperties {
                type VTable = abi_IBasicProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3495777755,
                        30814,
                        19046,
                        [190, 2, 155, 238, 197, 138, 234, 129],
                    )
                }
            }
            impl ::std::clone::Clone for r#IBasicProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IBasicProperties {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IBasicProperties,
                    *mut u64,
                ) -> ::winrt::ErrorCode,
                pub r#date_modified: extern "system" fn(
                    *const *const abi_IBasicProperties,
                    *mut <super::super::r#foundation::r#DateTime as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#item_date: extern "system" fn(
                    *const *const abi_IBasicProperties,
                    *mut <super::super::r#foundation::r#DateTime as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IBasicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{d05d55db-785e-4a66-be02-9beec58aea81}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IBasicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IBasicProperties> for ::winrt::Object {
                fn from(value: r#IBasicProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IBasicProperties> for ::winrt::Object {
                fn from(value: &r#IBasicProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IDocumentProperties {
                ptr: ::winrt::ComPtr<r#IDocumentProperties>,
            }
            impl r#IDocumentProperties {
                pub fn r#author(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#author ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#comment(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#comment)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_comment<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_comment)(this, r#value.into().abi()).ok() }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IDocumentProperties {
                type VTable = abi_IDocumentProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2125142460,
                        6177,
                        18723,
                        [180, 169, 10, 234, 64, 77, 0, 112],
                    )
                }
            }
            impl ::std::clone::Clone for r#IDocumentProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IDocumentProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#author : extern "system" fn ( * const * const abi_IDocumentProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_IDocumentProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_IDocumentProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#keywords : extern "system" fn ( * const * const abi_IDocumentProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#comment : extern "system" fn ( * const * const abi_IDocumentProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_comment : extern "system" fn ( * const * const abi_IDocumentProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IDocumentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{7eab19bc-1821-4923-b4a9-0aea404d0070}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IDocumentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IDocumentProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#IDocumentProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IDocumentProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#IDocumentProperties) -> r#IStorageItemExtraProperties {
                    <r#IDocumentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IDocumentProperties> for ::winrt::Object {
                fn from(value: r#IDocumentProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IDocumentProperties> for ::winrt::Object {
                fn from(value: &r#IDocumentProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IImageProperties {
                ptr: ::winrt::ComPtr<r#IImageProperties>,
            }
            impl r#IImageProperties {
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#date_taken(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#date_taken ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_date_taken<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_date_taken)(this, r#value.into().abi()).ok() }
                }
                pub fn r#width(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#width)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#height(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#height)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#latitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#latitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#longitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#longitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#camera_manufacturer(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#camera_manufacturer)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_camera_manufacturer<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_camera_manufacturer)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#camera_model(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#camera_model)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_camera_model<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_camera_model)(this, r#value.into().abi()).ok() }
                }
                pub fn r#orientation(&self) -> ::winrt::Result<r#PhotoOrientation> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#PhotoOrientation = ::std::mem::zeroed();
                        ((*(*(this))).r#orientation)(
                            this,
                            <r#PhotoOrientation as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#people_names(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVectorView<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#people_names)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVectorView<
                                ::winrt::HString,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IImageProperties {
                type VTable = abi_IImageProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1379701796,
                        64767,
                        17013,
                        [175, 238, 236, 219, 154, 180, 121, 115],
                    )
                }
            }
            impl ::std::clone::Clone for r#IImageProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IImageProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#rating : extern "system" fn ( * const * const abi_IImageProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_rating : extern "system" fn ( * const * const abi_IImageProperties , u32 , ) -> :: winrt :: ErrorCode , pub r#keywords : extern "system" fn ( * const * const abi_IImageProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#date_taken : extern "system" fn ( * const * const abi_IImageProperties , * mut < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_date_taken : extern "system" fn ( * const * const abi_IImageProperties , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#width : extern "system" fn ( * const * const abi_IImageProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#height : extern "system" fn ( * const * const abi_IImageProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_IImageProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_IImageProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#latitude : extern "system" fn ( * const * const abi_IImageProperties , * mut < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#longitude : extern "system" fn ( * const * const abi_IImageProperties , * mut < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#camera_manufacturer : extern "system" fn ( * const * const abi_IImageProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_camera_manufacturer : extern "system" fn ( * const * const abi_IImageProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#camera_model : extern "system" fn ( * const * const abi_IImageProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_camera_model : extern "system" fn ( * const * const abi_IImageProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#orientation : extern "system" fn ( * const * const abi_IImageProperties , * mut < r#PhotoOrientation as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#people_names : extern "system" fn ( * const * const abi_IImageProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IImageProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{523c9424-fcff-4275-afee-ecdb9ab47973}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IImageProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#IImageProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IImageProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#IImageProperties) -> r#IStorageItemExtraProperties {
                    <r#IImageProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IImageProperties> for ::winrt::Object {
                fn from(value: r#IImageProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IImageProperties> for ::winrt::Object {
                fn from(value: &r#IImageProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IMusicProperties {
                ptr: ::winrt::ComPtr<r#IMusicProperties>,
            }
            impl r#IMusicProperties {
                pub fn r#album(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#album)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_album<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_album)(this, r#value.into().abi()).ok() }
                }
                pub fn r#artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#artist)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_artist<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_artist)(this, r#value.into().abi()).ok() }
                }
                pub fn r#genre(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#genre ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#track_number(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#track_number)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_track_number(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_track_number)(this, r#value).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#duration(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#TimeSpan> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#TimeSpan = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#duration ) ( this , < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#bitrate)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#album_artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#album_artist)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_album_artist<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_album_artist)(this, r#value.into().abi()).ok() }
                }
                pub fn r#composers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#composers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#conductors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#conductors ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#producers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#producers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#publisher)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_publisher<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_publisher)(this, r#value.into().abi()).ok() }
                }
                pub fn r#writers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#writers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#year(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#year)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_year(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_year)(this, r#value).ok() }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IMusicProperties {
                type VTable = abi_IMusicProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3163204450,
                        26348,
                        16794,
                        [188, 93, 202, 101, 164, 203, 70, 218],
                    )
                }
            }
            impl ::std::clone::Clone for r#IMusicProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IMusicProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#album : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_album : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#artist : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_artist : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#genre : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#track_number : extern "system" fn ( * const * const abi_IMusicProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_track_number : extern "system" fn ( * const * const abi_IMusicProperties , u32 , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#rating : extern "system" fn ( * const * const abi_IMusicProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_rating : extern "system" fn ( * const * const abi_IMusicProperties , u32 , ) -> :: winrt :: ErrorCode , pub r#duration : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#bitrate : extern "system" fn ( * const * const abi_IMusicProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#album_artist : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_album_artist : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#composers : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#conductors : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#subtitle : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_subtitle : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#producers : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#publisher : extern "system" fn ( * const * const abi_IMusicProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_publisher : extern "system" fn ( * const * const abi_IMusicProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#writers : extern "system" fn ( * const * const abi_IMusicProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#year : extern "system" fn ( * const * const abi_IMusicProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_year : extern "system" fn ( * const * const abi_IMusicProperties , u32 , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IMusicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{bc8aab62-66ec-419a-bc5d-ca65a4cb46da}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IMusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IMusicProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#IMusicProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IMusicProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#IMusicProperties) -> r#IStorageItemExtraProperties {
                    <r#IMusicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IMusicProperties> for ::winrt::Object {
                fn from(value: r#IMusicProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IMusicProperties> for ::winrt::Object {
                fn from(value: &r#IMusicProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageItemContentProperties {
                ptr: ::winrt::ComPtr<r#IStorageItemContentProperties>,
            }
            impl r#IStorageItemContentProperties {
                pub fn r#get_music_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#MusicProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#MusicProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_music_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#MusicProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_video_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#VideoProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#VideoProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_video_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#VideoProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_image_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#ImageProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#ImageProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_image_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#ImageProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_document_properties_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<r#DocumentProperties>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#DocumentProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_document_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#DocumentProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageItemContentProperties {
                type VTable = abi_IStorageItemContentProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        86592429,
                        48184,
                        18623,
                        [133, 215, 119, 14, 14, 42, 224, 186],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageItemContentProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemContentProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_music_properties_async : extern "system" fn ( * const * const abi_IStorageItemContentProperties , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#MusicProperties > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_video_properties_async : extern "system" fn ( * const * const abi_IStorageItemContentProperties , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#VideoProperties > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_image_properties_async : extern "system" fn ( * const * const abi_IStorageItemContentProperties , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#ImageProperties > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_document_properties_async : extern "system" fn ( * const * const abi_IStorageItemContentProperties , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#DocumentProperties > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IStorageItemContentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{05294bad-bc38-48bf-85d7-770e0e2ae0ba}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageItemContentProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#IStorageItemContentProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IStorageItemContentProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#IStorageItemContentProperties) -> r#IStorageItemExtraProperties {
                    <r#IStorageItemContentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IStorageItemContentProperties> for ::winrt::Object {
                fn from(value: r#IStorageItemContentProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageItemContentProperties> for ::winrt::Object {
                fn from(value: &r#IStorageItemContentProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageItemExtraProperties {
                ptr: ::winrt::ComPtr<r#IStorageItemExtraProperties>,
            }
            impl r#IStorageItemExtraProperties {
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IMap<
                                ::winrt::HString,
                                ::winrt::Object,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#retrieve_properties_async)(
                            this,
                            r#properties_to_retrieve.into().abi(),
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IMap<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncAction =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#save_properties_async ) ( this , r#properties_to_save . into ( ) . abi ( ) , < super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncAction =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#save_properties_async_overload_default ) ( this , < super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageItemExtraProperties {
                type VTable = abi_IStorageItemExtraProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3309527474,
                        21709,
                        17195,
                        [189, 188, 75, 25, 196, 180, 112, 215],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageItemExtraProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemExtraProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#retrieve_properties_async : extern "system" fn ( * const * const abi_IStorageItemExtraProperties , < super :: super :: r#foundation :: r#collections :: r#IIterable :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IMap :: < :: winrt :: HString , :: winrt :: Object > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#save_properties_async : extern "system" fn ( * const * const abi_IStorageItemExtraProperties , < super :: super :: r#foundation :: r#collections :: r#IIterable :: < super :: super :: r#foundation :: r#collections :: r#IKeyValuePair :: < :: winrt :: HString , :: winrt :: Object > > as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#save_properties_async_overload_default : extern "system" fn ( * const * const abi_IStorageItemExtraProperties , * mut < super :: super :: r#foundation :: r#IAsyncAction as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IStorageItemExtraProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{c54361b2-54cd-432b-bdbc-4b19c4b470d7}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageItemExtraProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageItemExtraProperties> for ::winrt::Object {
                fn from(value: r#IStorageItemExtraProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageItemExtraProperties> for ::winrt::Object {
                fn from(value: &r#IStorageItemExtraProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IThumbnailProperties {
                ptr: ::winrt::ComPtr<r#IThumbnailProperties>,
            }
            impl r#IThumbnailProperties {
                pub fn r#original_width(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#original_width)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#original_height(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#original_height)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#returned_smaller_cached_size(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#returned_smaller_cached_size)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#type(&self) -> ::winrt::Result<r#ThumbnailType> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ThumbnailType = ::std::mem::zeroed();
                        ((*(*(this))).r#type)(
                            this,
                            <r#ThumbnailType as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IThumbnailProperties {
                type VTable = abi_IThumbnailProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1765659695,
                        56295,
                        18869,
                        [179, 179, 40, 147, 172, 93, 52, 35],
                    )
                }
            }
            impl ::std::clone::Clone for r#IThumbnailProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IThumbnailProperties {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#original_width: extern "system" fn(
                    *const *const abi_IThumbnailProperties,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#original_height: extern "system" fn(
                    *const *const abi_IThumbnailProperties,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#returned_smaller_cached_size: extern "system" fn(
                    *const *const abi_IThumbnailProperties,
                    *mut bool,
                )
                    -> ::winrt::ErrorCode,
                pub r#type: extern "system" fn(
                    *const *const abi_IThumbnailProperties,
                    *mut <r#ThumbnailType as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IThumbnailProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{693dd42f-dbe7-49b5-b3b3-2893ac5d3423}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IThumbnailProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IThumbnailProperties> for ::winrt::Object {
                fn from(value: r#IThumbnailProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IThumbnailProperties> for ::winrt::Object {
                fn from(value: &r#IThumbnailProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IVideoProperties {
                ptr: ::winrt::ComPtr<r#IVideoProperties>,
            }
            impl r#IVideoProperties {
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#width(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#width)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#height(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#height)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#duration(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#TimeSpan> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#TimeSpan = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#duration ) ( this , < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#latitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#latitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#longitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#longitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#producers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#producers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#publisher)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_publisher<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_publisher)(this, r#value.into().abi()).ok() }
                }
                pub fn r#writers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#writers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#year(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#year)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_year(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_year)(this, r#value).ok() }
                }
                pub fn r#bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#bitrate)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#directors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#directors ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#orientation(&self) -> ::winrt::Result<r#VideoOrientation> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#VideoOrientation = ::std::mem::zeroed();
                        ((*(*(this))).r#orientation)(
                            this,
                            <r#VideoOrientation as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IVideoProperties {
                type VTable = abi_IVideoProperties;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1905976583,
                        26846,
                        19896,
                        [151, 222, 73, 153, 140, 5, 159, 47],
                    )
                }
            }
            impl ::std::clone::Clone for r#IVideoProperties {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IVideoProperties where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#rating : extern "system" fn ( * const * const abi_IVideoProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_rating : extern "system" fn ( * const * const abi_IVideoProperties , u32 , ) -> :: winrt :: ErrorCode , pub r#keywords : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#width : extern "system" fn ( * const * const abi_IVideoProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#height : extern "system" fn ( * const * const abi_IVideoProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#duration : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#latitude : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#longitude : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_IVideoProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_IVideoProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#subtitle : extern "system" fn ( * const * const abi_IVideoProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_subtitle : extern "system" fn ( * const * const abi_IVideoProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#producers : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#publisher : extern "system" fn ( * const * const abi_IVideoProperties , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_publisher : extern "system" fn ( * const * const abi_IVideoProperties , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#writers : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#year : extern "system" fn ( * const * const abi_IVideoProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_year : extern "system" fn ( * const * const abi_IVideoProperties , u32 , ) -> :: winrt :: ErrorCode , pub r#bitrate : extern "system" fn ( * const * const abi_IVideoProperties , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#directors : extern "system" fn ( * const * const abi_IVideoProperties , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#orientation : extern "system" fn ( * const * const abi_IVideoProperties , * mut < r#VideoOrientation as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IVideoProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{719ae507-68de-4db8-97de-49998c059f2f}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IVideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IVideoProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#IVideoProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IVideoProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#IVideoProperties) -> r#IStorageItemExtraProperties {
                    <r#IVideoProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IVideoProperties> for ::winrt::Object {
                fn from(value: r#IVideoProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IVideoProperties> for ::winrt::Object {
                fn from(value: &r#IVideoProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#ImageProperties {
                ptr: ::winrt::ComPtr<r#ImageProperties>,
            }
            impl r#ImageProperties {
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#date_taken(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#date_taken ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_date_taken<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_date_taken)(this, r#value.into().abi()).ok() }
                }
                pub fn r#width(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#width)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#height(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#height)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#latitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#latitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#longitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#longitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#camera_manufacturer(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#camera_manufacturer)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_camera_manufacturer<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_camera_manufacturer)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#camera_model(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#camera_model)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_camera_model<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_camera_model)(this, r#value.into().abi()).ok() }
                }
                pub fn r#orientation(&self) -> ::winrt::Result<r#PhotoOrientation> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#PhotoOrientation = ::std::mem::zeroed();
                        ((*(*(this))).r#orientation)(
                            this,
                            <r#PhotoOrientation as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#people_names(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVectorView<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVectorView<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#people_names)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVectorView<
                                ::winrt::HString,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#ImageProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.ImageProperties";
            }
            unsafe impl ::winrt::ComInterface for r#ImageProperties {
                type VTable = abi_IImageProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IImageProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#ImageProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.ImageProperties;{523c9424-fcff-4275-afee-ecdb9ab47973})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ImageProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ImageProperties> for r#IImageProperties {
                fn from(value: r#ImageProperties) -> r#IImageProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ImageProperties> for r#IImageProperties {
                fn from(value: &r#ImageProperties) -> r#IImageProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#ImageProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#ImageProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ImageProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#ImageProperties) -> r#IStorageItemExtraProperties {
                    <r#ImageProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ImageProperties> for ::winrt::Object {
                fn from(value: r#ImageProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ImageProperties> for ::winrt::Object {
                fn from(value: &r#ImageProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#MusicProperties {
                ptr: ::winrt::ComPtr<r#MusicProperties>,
            }
            impl r#MusicProperties {
                pub fn r#album(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#album)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_album<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_album)(this, r#value.into().abi()).ok() }
                }
                pub fn r#artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#artist)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_artist<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_artist)(this, r#value.into().abi()).ok() }
                }
                pub fn r#genre(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#genre ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#track_number(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#track_number)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_track_number(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_track_number)(this, r#value).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#duration(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#TimeSpan> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#TimeSpan = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#duration ) ( this , < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#bitrate)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#album_artist(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#album_artist)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_album_artist<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_album_artist)(this, r#value.into().abi()).ok() }
                }
                pub fn r#composers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#composers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#conductors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#conductors ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#producers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#producers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#publisher)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_publisher<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_publisher)(this, r#value.into().abi()).ok() }
                }
                pub fn r#writers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#writers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#year(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#year)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_year(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_year)(this, r#value).ok() }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#MusicProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.MusicProperties";
            }
            unsafe impl ::winrt::ComInterface for r#MusicProperties {
                type VTable = abi_IMusicProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IMusicProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#MusicProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.MusicProperties;{bc8aab62-66ec-419a-bc5d-ca65a4cb46da})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#MusicProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#MusicProperties> for r#IMusicProperties {
                fn from(value: r#MusicProperties) -> r#IMusicProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#MusicProperties> for r#IMusicProperties {
                fn from(value: &r#MusicProperties) -> r#IMusicProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#MusicProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#MusicProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#MusicProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#MusicProperties) -> r#IStorageItemExtraProperties {
                    <r#MusicProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#MusicProperties> for ::winrt::Object {
                fn from(value: r#MusicProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#MusicProperties> for ::winrt::Object {
                fn from(value: &r#MusicProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#PhotoOrientation {
                value: i32,
            }
            impl r#PhotoOrientation {
                #![allow(non_upper_case_globals)]
                pub const r#Unspecified: Self = Self { value: 0i32 };
                pub const r#Normal: Self = Self { value: 1i32 };
                pub const r#FlipHorizontal: Self = Self { value: 2i32 };
                pub const r#Rotate180: Self = Self { value: 3i32 };
                pub const r#FlipVertical: Self = Self { value: 4i32 };
                pub const r#Transpose: Self = Self { value: 5i32 };
                pub const r#Rotate270: Self = Self { value: 6i32 };
                pub const r#Transverse: Self = Self { value: 7i32 };
                pub const r#Rotate90: Self = Self { value: 8i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#PhotoOrientation {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.PhotoOrientation;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#PropertyPrefetchOptions {
                value: u32,
            }
            impl r#PropertyPrefetchOptions {
                #![allow(non_upper_case_globals)]
                pub const r#None: Self = Self { value: 0u32 };
                pub const r#MusicProperties: Self = Self { value: 1u32 };
                pub const r#VideoProperties: Self = Self { value: 2u32 };
                pub const r#ImageProperties: Self = Self { value: 4u32 };
                pub const r#DocumentProperties: Self = Self { value: 8u32 };
                pub const r#BasicProperties: Self = Self { value: 16u32 };
            }
            unsafe impl ::winrt::RuntimeType for r#PropertyPrefetchOptions {
                type Abi = u32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.PropertyPrefetchOptions;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for r#PropertyPrefetchOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for r#PropertyPrefetchOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#StorageItemContentProperties {
                ptr: ::winrt::ComPtr<r#StorageItemContentProperties>,
            }
            impl r#StorageItemContentProperties {
                pub fn r#get_music_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#MusicProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#MusicProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_music_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#MusicProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_video_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#VideoProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#VideoProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_video_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#VideoProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_image_properties_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#ImageProperties>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#ImageProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_image_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#ImageProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_document_properties_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<r#DocumentProperties>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#DocumentProperties,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_document_properties_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#DocumentProperties > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#StorageItemContentProperties {
                const NAME: &'static str =
                    "Windows.Storage.FileProperties.StorageItemContentProperties";
            }
            unsafe impl ::winrt::ComInterface for r#StorageItemContentProperties {
                type VTable = abi_IStorageItemContentProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IStorageItemContentProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#StorageItemContentProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.StorageItemContentProperties;{05294bad-bc38-48bf-85d7-770e0e2ae0ba})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#StorageItemContentProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#StorageItemContentProperties> for r#IStorageItemContentProperties {
                fn from(value: r#StorageItemContentProperties) -> r#IStorageItemContentProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemContentProperties> for r#IStorageItemContentProperties {
                fn from(value: &r#StorageItemContentProperties) -> r#IStorageItemContentProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#StorageItemContentProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#StorageItemContentProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemContentProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#StorageItemContentProperties) -> r#IStorageItemExtraProperties {
                    <r#StorageItemContentProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemContentProperties> for ::winrt::Object {
                fn from(value: r#StorageItemContentProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemContentProperties> for ::winrt::Object {
                fn from(value: &r#StorageItemContentProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#StorageItemThumbnail {
                ptr: ::winrt::ComPtr<r#StorageItemThumbnail>,
            }
            impl r#StorageItemThumbnail {
                pub fn r#close(&self) -> ::winrt::Result<()> {
                    <super::super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#close()
                }
                pub fn r#original_width(&self) -> ::winrt::Result<u32> {
                    <r#IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .r#original_width()
                }
                pub fn r#original_height(&self) -> ::winrt::Result<u32> {
                    <r#IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .r#original_height()
                }
                pub fn r#returned_smaller_cached_size(&self) -> ::winrt::Result<bool> {
                    <r#IThumbnailProperties as ::std::convert::From<&Self>>::from(self)
                        .r#returned_smaller_cached_size()
                }
                pub fn r#type(&self) -> ::winrt::Result<r#ThumbnailType> {
                    <r#IThumbnailProperties as ::std::convert::From<&Self>>::from(self).r#type()
                }
                pub fn r#content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    <super::r#streams::r#IContentTypeProvider as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#content_type()
                }
                pub fn r#read_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#streams::r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                    r#count: u32,
                    r#options: super::r#streams::r#InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<
                        super::r#streams::r#IBuffer,
                        u32,
                    >,
                > {
                    <super::r#streams::r#IInputStream as ::std::convert::From<&Self>>::from(self)
                        .r#read_async(r#buffer, r#count, r#options)
                }
                pub fn r#write_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#streams::r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<u32, u32>,
                > {
                    <super::r#streams::r#IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .r#write_async(r#buffer)
                }
                pub fn r#flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<bool>>
                {
                    <super::r#streams::r#IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .r#flush_async()
                }
                pub fn r#size(&self) -> ::winrt::Result<u64> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#size()
                }
                pub fn r#set_size(&self, r#value: u64) -> ::winrt::Result<()> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#set_size(r#value)
                }
                pub fn r#get_input_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<super::r#streams::r#IInputStream> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#get_input_stream_at(r#position)
                }
                pub fn r#get_output_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<super::r#streams::r#IOutputStream> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#get_output_stream_at(r#position)
                }
                pub fn r#position(&self) -> ::winrt::Result<u64> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#position()
                }
                pub fn r#seek(&self, r#position: u64) -> ::winrt::Result<()> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#seek(r#position)
                }
                pub fn r#clone_stream(
                    &self,
                ) -> ::winrt::Result<super::r#streams::r#IRandomAccessStream> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#clone_stream()
                }
                pub fn r#can_read(&self) -> ::winrt::Result<bool> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#can_read()
                }
                pub fn r#can_write(&self) -> ::winrt::Result<bool> {
                    <super::r#streams::r#IRandomAccessStream as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#can_write()
                }
            }
            impl ::winrt::RuntimeName for r#StorageItemThumbnail {
                const NAME: &'static str = "Windows.Storage.FileProperties.StorageItemThumbnail";
            }
            unsafe impl ::winrt::ComInterface for r#StorageItemThumbnail {
                type VTable = super::r#streams::abi_IRandomAccessStreamWithContentType;
                fn iid() -> ::winrt::Guid {
                    < super :: r#streams :: r#IRandomAccessStreamWithContentType as :: winrt :: ComInterface > :: iid ( )
                }
            }
            unsafe impl ::winrt::RuntimeType for r#StorageItemThumbnail {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.StorageItemThumbnail;{cc254827-4b3d-438f-9232-10c76bc7e038})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#StorageItemThumbnail {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail>
                for super::r#streams::r#IRandomAccessStreamWithContentType
            {
                fn from(
                    value: r#StorageItemThumbnail,
                ) -> super::r#streams::r#IRandomAccessStreamWithContentType {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail>
                for super::r#streams::r#IRandomAccessStreamWithContentType
            {
                fn from(
                    value: &r#StorageItemThumbnail,
                ) -> super::r#streams::r#IRandomAccessStreamWithContentType {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for super::super::r#foundation::r#IClosable {
                fn from(value: r#StorageItemThumbnail) -> super::super::r#foundation::r#IClosable {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for super::super::r#foundation::r#IClosable {
                fn from(value: &r#StorageItemThumbnail) -> super::super::r#foundation::r#IClosable {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for r#IThumbnailProperties {
                fn from(value: r#StorageItemThumbnail) -> r#IThumbnailProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for r#IThumbnailProperties {
                fn from(value: &r#StorageItemThumbnail) -> r#IThumbnailProperties {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for super::r#streams::r#IContentTypeProvider {
                fn from(value: r#StorageItemThumbnail) -> super::r#streams::r#IContentTypeProvider {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for super::r#streams::r#IContentTypeProvider {
                fn from(
                    value: &r#StorageItemThumbnail,
                ) -> super::r#streams::r#IContentTypeProvider {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for super::r#streams::r#IInputStream {
                fn from(value: r#StorageItemThumbnail) -> super::r#streams::r#IInputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for super::r#streams::r#IInputStream {
                fn from(value: &r#StorageItemThumbnail) -> super::r#streams::r#IInputStream {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for super::r#streams::r#IOutputStream {
                fn from(value: r#StorageItemThumbnail) -> super::r#streams::r#IOutputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for super::r#streams::r#IOutputStream {
                fn from(value: &r#StorageItemThumbnail) -> super::r#streams::r#IOutputStream {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for super::r#streams::r#IRandomAccessStream {
                fn from(value: r#StorageItemThumbnail) -> super::r#streams::r#IRandomAccessStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for super::r#streams::r#IRandomAccessStream {
                fn from(value: &r#StorageItemThumbnail) -> super::r#streams::r#IRandomAccessStream {
                    <r#StorageItemThumbnail as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemThumbnail> for ::winrt::Object {
                fn from(value: r#StorageItemThumbnail) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemThumbnail> for ::winrt::Object {
                fn from(value: &r#StorageItemThumbnail) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#ThumbnailMode {
                value: i32,
            }
            impl r#ThumbnailMode {
                #![allow(non_upper_case_globals)]
                pub const r#PicturesView: Self = Self { value: 0i32 };
                pub const r#VideosView: Self = Self { value: 1i32 };
                pub const r#MusicView: Self = Self { value: 2i32 };
                pub const r#DocumentsView: Self = Self { value: 3i32 };
                pub const r#ListView: Self = Self { value: 4i32 };
                pub const r#SingleItem: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#ThumbnailMode {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailMode;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#ThumbnailOptions {
                value: u32,
            }
            impl r#ThumbnailOptions {
                #![allow(non_upper_case_globals)]
                pub const r#None: Self = Self { value: 0u32 };
                pub const r#ReturnOnlyIfCached: Self = Self { value: 1u32 };
                pub const r#ResizeThumbnail: Self = Self { value: 2u32 };
                pub const r#UseCurrentScale: Self = Self { value: 4u32 };
            }
            unsafe impl ::winrt::RuntimeType for r#ThumbnailOptions {
                type Abi = u32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailOptions;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for r#ThumbnailOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for r#ThumbnailOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#ThumbnailType {
                value: i32,
            }
            impl r#ThumbnailType {
                #![allow(non_upper_case_globals)]
                pub const r#Image: Self = Self { value: 0i32 };
                pub const r#Icon: Self = Self { value: 1i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#ThumbnailType {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.ThumbnailType;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#VideoOrientation {
                value: i32,
            }
            impl r#VideoOrientation {
                #![allow(non_upper_case_globals)]
                pub const r#Normal: Self = Self { value: 0i32 };
                pub const r#Rotate90: Self = Self { value: 90i32 };
                pub const r#Rotate180: Self = Self { value: 180i32 };
                pub const r#Rotate270: Self = Self { value: 270i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#VideoOrientation {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.FileProperties.VideoOrientation;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#VideoProperties {
                ptr: ::winrt::ComPtr<r#VideoProperties>,
            }
            impl r#VideoProperties {
                pub fn r#rating(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#rating)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rating(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rating)(this, r#value).ok() }
                }
                pub fn r#keywords(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#keywords ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#width(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#width)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#height(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#height)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#duration(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#TimeSpan> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#TimeSpan = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#duration ) ( this , < super :: super :: r#foundation :: r#TimeSpan as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#latitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#latitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#longitude(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IReference<f64>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IReference<f64> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#longitude ) ( this , < super :: super :: r#foundation :: r#IReference :: < f64 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#producers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#producers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#publisher(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#publisher)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_publisher<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_publisher)(this, r#value.into().abi()).ok() }
                }
                pub fn r#writers(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#writers ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#year(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#year)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_year(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_year)(this, r#value).ok() }
                }
                pub fn r#bitrate(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#bitrate)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#directors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#directors ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#orientation(&self) -> ::winrt::Result<r#VideoOrientation> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#VideoOrientation = ::std::mem::zeroed();
                        ((*(*(this))).r#orientation)(
                            this,
                            <r#VideoOrientation as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#retrieve_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_retrieve: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            ::winrt::Object,
                        >,
                    >,
                > {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#retrieve_properties_async(r#properties_to_retrieve)
                }
                pub fn r#save_properties_async<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                super::super::r#foundation::r#collections::r#IKeyValuePair<
                                    ::winrt::HString,
                                    ::winrt::Object,
                                >,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#properties_to_save: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async(r#properties_to_save)
                }
                pub fn r#save_properties_async_overload_default(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncAction> {
                    <r#IStorageItemExtraProperties as ::std::convert::From<&Self>>::from(self)
                        .r#save_properties_async_overload_default()
                }
            }
            impl ::winrt::RuntimeName for r#VideoProperties {
                const NAME: &'static str = "Windows.Storage.FileProperties.VideoProperties";
            }
            unsafe impl ::winrt::ComInterface for r#VideoProperties {
                type VTable = abi_IVideoProperties;
                fn iid() -> ::winrt::Guid {
                    <r#IVideoProperties as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#VideoProperties {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.FileProperties.VideoProperties;{719ae507-68de-4db8-97de-49998c059f2f})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#VideoProperties {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#VideoProperties> for r#IVideoProperties {
                fn from(value: r#VideoProperties) -> r#IVideoProperties {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#VideoProperties> for r#IVideoProperties {
                fn from(value: &r#VideoProperties) -> r#IVideoProperties {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#VideoProperties> for r#IStorageItemExtraProperties {
                fn from(value: r#VideoProperties) -> r#IStorageItemExtraProperties {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#VideoProperties> for r#IStorageItemExtraProperties {
                fn from(value: &r#VideoProperties) -> r#IStorageItemExtraProperties {
                    <r#VideoProperties as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#VideoProperties> for ::winrt::Object {
                fn from(value: r#VideoProperties) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#VideoProperties> for ::winrt::Object {
                fn from(value: &r#VideoProperties) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
        }
        pub mod r#search {
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#CommonFileQuery {
                value: i32,
            }
            impl r#CommonFileQuery {
                #![allow(non_upper_case_globals)]
                pub const r#DefaultQuery: Self = Self { value: 0i32 };
                pub const r#OrderByName: Self = Self { value: 1i32 };
                pub const r#OrderByTitle: Self = Self { value: 2i32 };
                pub const r#OrderByMusicProperties: Self = Self { value: 3i32 };
                pub const r#OrderBySearchRank: Self = Self { value: 4i32 };
                pub const r#OrderByDate: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#CommonFileQuery {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.CommonFileQuery;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#CommonFolderQuery {
                value: i32,
            }
            impl r#CommonFolderQuery {
                #![allow(non_upper_case_globals)]
                pub const r#DefaultQuery: Self = Self { value: 0i32 };
                pub const r#GroupByYear: Self = Self { value: 100i32 };
                pub const r#GroupByMonth: Self = Self { value: 101i32 };
                pub const r#GroupByArtist: Self = Self { value: 102i32 };
                pub const r#GroupByAlbum: Self = Self { value: 103i32 };
                pub const r#GroupByAlbumArtist: Self = Self { value: 104i32 };
                pub const r#GroupByComposer: Self = Self { value: 105i32 };
                pub const r#GroupByGenre: Self = Self { value: 106i32 };
                pub const r#GroupByPublishedYear: Self = Self { value: 107i32 };
                pub const r#GroupByRating: Self = Self { value: 108i32 };
                pub const r#GroupByTag: Self = Self { value: 109i32 };
                pub const r#GroupByAuthor: Self = Self { value: 110i32 };
                pub const r#GroupByType: Self = Self { value: 111i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#CommonFolderQuery {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.CommonFolderQuery;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#DateStackOption {
                value: i32,
            }
            impl r#DateStackOption {
                #![allow(non_upper_case_globals)]
                pub const r#None: Self = Self { value: 0i32 };
                pub const r#Year: Self = Self { value: 1i32 };
                pub const r#Month: Self = Self { value: 2i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#DateStackOption {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.DateStackOption;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#FolderDepth {
                value: i32,
            }
            impl r#FolderDepth {
                #![allow(non_upper_case_globals)]
                pub const r#Shallow: Self = Self { value: 0i32 };
                pub const r#Deep: Self = Self { value: 1i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#FolderDepth {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.FolderDepth;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IQueryOptions {
                ptr: ::winrt::ComPtr<r#IQueryOptions>,
            }
            impl r#IQueryOptions {
                pub fn r#file_type_filter(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#file_type_filter ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#folder_depth(&self) -> ::winrt::Result<r#FolderDepth> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#FolderDepth = ::std::mem::zeroed();
                        ((*(*(this))).r#folder_depth)(
                            this,
                            <r#FolderDepth as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_folder_depth(&self, r#value: r#FolderDepth) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_folder_depth)(this, ::winrt::RuntimeType::abi(&r#value))
                            .ok()
                    }
                }
                pub fn r#application_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#application_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_application_search_filter<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_application_search_filter)(this, r#value.into().abi())
                            .ok()
                    }
                }
                pub fn r#user_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#user_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_user_search_filter<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_user_search_filter)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_language)(this, r#value.into().abi()).ok() }
                }
                pub fn r#indexer_option(&self) -> ::winrt::Result<r#IndexerOption> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IndexerOption = ::std::mem::zeroed();
                        ((*(*(this))).r#indexer_option)(
                            this,
                            <r#IndexerOption as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_indexer_option(
                    &self,
                    r#value: r#IndexerOption,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_indexer_option)(
                            this,
                            ::winrt::RuntimeType::abi(&r#value),
                        )
                        .ok()
                    }
                }
                pub fn r#sort_order(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SortEntry>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SortEntry,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#sort_order ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SortEntry > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#group_property_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#group_property_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#date_stack_option(&self) -> ::winrt::Result<r#DateStackOption> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#DateStackOption = ::std::mem::zeroed();
                        ((*(*(this))).r#date_stack_option)(
                            this,
                            <r#DateStackOption as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#save_to_string(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#save_to_string)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load_from_string<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load_from_string)(this, r#value.into().abi()).ok() }
                }
                pub fn r#set_thumbnail_prefetch(
                    &self,
                    r#mode: super::r#file_properties::r#ThumbnailMode,
                    r#requested_size: u32,
                    r#options: super::r#file_properties::r#ThumbnailOptions,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_thumbnail_prefetch)(
                            this,
                            ::winrt::RuntimeType::abi(&r#mode),
                            r#requested_size,
                            ::winrt::RuntimeType::abi(&r#options),
                        )
                        .ok()
                    }
                }
                pub fn r#set_property_prefetch<
                    'a,
                    __1: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#options: super::r#file_properties::r#PropertyPrefetchOptions,
                    r#properties_to_retrieve: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_property_prefetch)(
                            this,
                            ::winrt::RuntimeType::abi(&r#options),
                            r#properties_to_retrieve.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IQueryOptions {
                type VTable = abi_IQueryOptions;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        509495022,
                        3909,
                        18488,
                        [168, 233, 208, 71, 157, 68, 108, 48],
                    )
                }
            }
            impl ::std::clone::Clone for r#IQueryOptions {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptions where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#file_type_filter : extern "system" fn ( * const * const abi_IQueryOptions , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#folder_depth : extern "system" fn ( * const * const abi_IQueryOptions , * mut < r#FolderDepth as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_folder_depth : extern "system" fn ( * const * const abi_IQueryOptions , < r#FolderDepth as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#application_search_filter : extern "system" fn ( * const * const abi_IQueryOptions , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_application_search_filter : extern "system" fn ( * const * const abi_IQueryOptions , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#user_search_filter : extern "system" fn ( * const * const abi_IQueryOptions , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_user_search_filter : extern "system" fn ( * const * const abi_IQueryOptions , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#language : extern "system" fn ( * const * const abi_IQueryOptions , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_language : extern "system" fn ( * const * const abi_IQueryOptions , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#indexer_option : extern "system" fn ( * const * const abi_IQueryOptions , * mut < r#IndexerOption as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_indexer_option : extern "system" fn ( * const * const abi_IQueryOptions , < r#IndexerOption as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#sort_order : extern "system" fn ( * const * const abi_IQueryOptions , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SortEntry > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#group_property_name : extern "system" fn ( * const * const abi_IQueryOptions , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#date_stack_option : extern "system" fn ( * const * const abi_IQueryOptions , * mut < r#DateStackOption as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#save_to_string : extern "system" fn ( * const * const abi_IQueryOptions , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_string : extern "system" fn ( * const * const abi_IQueryOptions , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_thumbnail_prefetch : extern "system" fn ( * const * const abi_IQueryOptions , < super :: r#file_properties :: r#ThumbnailMode as :: winrt :: RuntimeType > :: Abi , u32 , < super :: r#file_properties :: r#ThumbnailOptions as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_property_prefetch : extern "system" fn ( * const * const abi_IQueryOptions , < super :: r#file_properties :: r#PropertyPrefetchOptions as :: winrt :: RuntimeType > :: Abi , < super :: super :: r#foundation :: r#collections :: r#IIterable :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IQueryOptions {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{1e5e46ee-0f45-4838-a8e9-d0479d446c30}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IQueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IQueryOptions> for ::winrt::Object {
                fn from(value: r#IQueryOptions) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IQueryOptions> for ::winrt::Object {
                fn from(value: &r#IQueryOptions) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IQueryOptionsFactory {
                ptr: ::winrt::ComPtr<r#IQueryOptionsFactory>,
            }
            impl r#IQueryOptionsFactory {
                pub fn r#create_common_file_query<
                    'a,
                    __1: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#query: r#CommonFileQuery,
                    r#file_type_filter: __1,
                ) -> ::winrt::Result<r#QueryOptions> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#QueryOptions = ::std::mem::zeroed();
                        ((*(*(this))).r#create_common_file_query)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            r#file_type_filter.into().abi(),
                            <r#QueryOptions as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_common_folder_query(
                    &self,
                    r#query: r#CommonFolderQuery,
                ) -> ::winrt::Result<r#QueryOptions> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#QueryOptions = ::std::mem::zeroed();
                        ((*(*(this))).r#create_common_folder_query)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <r#QueryOptions as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IQueryOptionsFactory {
                type VTable = abi_IQueryOptionsFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        53354380,
                        43457,
                        20081,
                        [128, 17, 13, 238, 157, 72, 17, 163],
                    )
                }
            }
            impl ::std::clone::Clone for r#IQueryOptionsFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptionsFactory where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#create_common_file_query : extern "system" fn ( * const * const abi_IQueryOptionsFactory , < r#CommonFileQuery as :: winrt :: RuntimeType > :: Abi , < super :: super :: r#foundation :: r#collections :: r#IIterable :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , * mut < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_common_folder_query : extern "system" fn ( * const * const abi_IQueryOptionsFactory , < r#CommonFolderQuery as :: winrt :: RuntimeType > :: Abi , * mut < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IQueryOptionsFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{032e1f8c-a9c1-4e71-8011-0dee9d4811a3}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IQueryOptionsFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IQueryOptionsFactory> for ::winrt::Object {
                fn from(value: r#IQueryOptionsFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IQueryOptionsFactory> for ::winrt::Object {
                fn from(value: &r#IQueryOptionsFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IQueryOptionsWithProviderFilter {
                ptr: ::winrt::ComPtr<r#IQueryOptionsWithProviderFilter>,
            }
            impl r#IQueryOptionsWithProviderFilter {
                pub fn r#storage_provider_id_filter(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#storage_provider_id_filter ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IQueryOptionsWithProviderFilter {
                type VTable = abi_IQueryOptionsWithProviderFilter;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1537019942,
                        5572,
                        17629,
                        [184, 154, 71, 165, 155, 125, 124, 79],
                    )
                }
            }
            impl ::std::clone::Clone for r#IQueryOptionsWithProviderFilter {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IQueryOptionsWithProviderFilter where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#storage_provider_id_filter : extern "system" fn ( * const * const abi_IQueryOptionsWithProviderFilter , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IQueryOptionsWithProviderFilter {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{5b9d1026-15c4-44dd-b89a-47a59b7d7c4f}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IQueryOptionsWithProviderFilter {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IQueryOptionsWithProviderFilter> for ::winrt::Object {
                fn from(value: r#IQueryOptionsWithProviderFilter) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IQueryOptionsWithProviderFilter> for ::winrt::Object {
                fn from(value: &r#IQueryOptionsWithProviderFilter) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageFileQueryResult {
                ptr: ::winrt::ComPtr<r#IStorageFileQueryResult>,
            }
            impl r#IStorageFileQueryResult {
                pub fn r#get_files_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_files_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageFileQueryResult {
                type VTable = abi_IStorageFileQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1392354375,
                        11178,
                        16684,
                        [178, 159, 212, 177, 119, 142, 250, 30],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageFileQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFileQueryResult {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_files_async: extern "system" fn(
                    *const *const abi_IStorageFileQueryResult,
                    u32,
                    u32,
                    *mut <super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#get_files_async_default_start_and_count:
                    extern "system" fn(
                        *const *const abi_IStorageFileQueryResult,
                        *mut <super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IStorageFileQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{52fda447-2baa-412c-b29f-d4b1778efa1e}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageFileQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#IStorageFileQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IStorageFileQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#IStorageFileQueryResult) -> r#IStorageQueryResultBase {
                    <r#IStorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IStorageFileQueryResult> for ::winrt::Object {
                fn from(value: r#IStorageFileQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageFileQueryResult> for ::winrt::Object {
                fn from(value: &r#IStorageFileQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageFileQueryResult2 {
                ptr: ::winrt::ComPtr<r#IStorageFileQueryResult2>,
            }
            impl r#IStorageFileQueryResult2 {
                pub fn r#get_matching_properties_with_ranges<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#StorageFile>>,
                >(
                    &self,
                    r#file: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IMap<
                        ::winrt::HString,
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::super::r#data::r#text::r#TextSegment,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IMap<
                            ::winrt::HString,
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::super::r#data::r#text::r#TextSegment,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_matching_properties_with_ranges)(
                            this,
                            r#file.into().abi(),
                            <super::super::r#foundation::r#collections::r#IMap<
                                ::winrt::HString,
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::super::r#data::r#text::r#TextSegment,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageFileQueryResult2 {
                type VTable = abi_IStorageFileQueryResult2;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1314765277,
                        28993,
                        18116,
                        [139, 227, 233, 220, 158, 39, 39, 92],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageFileQueryResult2 {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFileQueryResult2 {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_matching_properties_with_ranges: extern "system" fn(
                    *const *const abi_IStorageFileQueryResult2,
                    <super::r#StorageFile as ::winrt::RuntimeType>::Abi,
                    *mut <super::super::r#foundation::r#collections::r#IMap<
                        ::winrt::HString,
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::super::r#data::r#text::r#TextSegment,
                        >,
                    > as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IStorageFileQueryResult2 {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{4e5db9dd-7141-46c4-8be3-e9dc9e27275c}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageFileQueryResult2 {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageFileQueryResult2> for r#IStorageQueryResultBase {
                fn from(value: r#IStorageFileQueryResult2) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IStorageFileQueryResult2> for r#IStorageQueryResultBase {
                fn from(value: &r#IStorageFileQueryResult2) -> r#IStorageQueryResultBase {
                    <r#IStorageFileQueryResult2 as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IStorageFileQueryResult2> for ::winrt::Object {
                fn from(value: r#IStorageFileQueryResult2) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageFileQueryResult2> for ::winrt::Object {
                fn from(value: &r#IStorageFileQueryResult2) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageFolderQueryOperations {
                ptr: ::winrt::ComPtr<r#IStorageFolderQueryOperations>,
            }
            impl r#IStorageFolderQueryOperations {
                pub fn r#get_indexed_state_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#IndexedState>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#IndexedState,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_indexed_state_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#IndexedState > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#create_file_query_overload_default(
                    &self,
                ) -> ::winrt::Result<r#StorageFileQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFileQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_file_query_overload_default)(
                            this,
                            <r#StorageFileQueryResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_file_query(
                    &self,
                    r#query: r#CommonFileQuery,
                ) -> ::winrt::Result<r#StorageFileQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFileQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_file_query)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <r#StorageFileQueryResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_file_query_with_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#query_options: __0,
                ) -> ::winrt::Result<r#StorageFileQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFileQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_file_query_with_options)(
                            this,
                            r#query_options.into().abi(),
                            <r#StorageFileQueryResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_folder_query_overload_default(
                    &self,
                ) -> ::winrt::Result<r#StorageFolderQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFolderQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_folder_query_overload_default)(
                            this,
                            <r#StorageFolderQueryResult as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_folder_query(
                    &self,
                    r#query: r#CommonFolderQuery,
                ) -> ::winrt::Result<r#StorageFolderQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFolderQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_folder_query)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <r#StorageFolderQueryResult as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_folder_query_with_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#query_options: __0,
                ) -> ::winrt::Result<r#StorageFolderQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageFolderQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_folder_query_with_options)(
                            this,
                            r#query_options.into().abi(),
                            <r#StorageFolderQueryResult as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_item_query(&self) -> ::winrt::Result<r#StorageItemQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageItemQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_item_query)(
                            this,
                            <r#StorageItemQueryResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_item_query_with_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#query_options: __0,
                ) -> ::winrt::Result<r#StorageItemQueryResult> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#StorageItemQueryResult = ::std::mem::zeroed();
                        ((*(*(this))).r#create_item_query_with_options)(
                            this,
                            r#query_options.into().abi(),
                            <r#StorageItemQueryResult as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_files_async(
                    &self,
                    r#query: r#CommonFileQuery,
                    r#start_index: u32,
                    r#max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            r#start_index,
                            r#max_items_to_retrieve,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_files_async_overload_default_start_and_count(
                    &self,
                    r#query: r#CommonFileQuery,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async_overload_default_start_and_count)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_folders_async(
                    &self,
                    r#query: r#CommonFolderQuery,
                    r#start_index: u32,
                    r#max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            r#start_index,
                            r#max_items_to_retrieve,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_folders_async_overload_default_start_and_count(
                    &self,
                    r#query: r#CommonFolderQuery,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async_overload_default_start_and_count)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_items_async(
                    &self,
                    r#start_index: u32,
                    r#max_items_to_retrieve: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_items_async)(
                            this,
                            r#start_index,
                            r#max_items_to_retrieve,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#IStorageItem,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#are_query_options_supported<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#query_options: __0,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#are_query_options_supported)(
                            this,
                            r#query_options.into().abi(),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#is_common_folder_query_supported(
                    &self,
                    r#query: r#CommonFolderQuery,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#is_common_folder_query_supported)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#is_common_file_query_supported(
                    &self,
                    r#query: r#CommonFileQuery,
                ) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#is_common_file_query_supported)(
                            this,
                            ::winrt::RuntimeType::abi(&r#query),
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageFolderQueryOperations {
                type VTable = abi_IStorageFolderQueryOperations;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3410218185,
                        17515,
                        19023,
                        [190, 151, 117, 119, 113, 190, 82, 3],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageFolderQueryOperations {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFolderQueryOperations where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_indexed_state_async : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#IndexedState > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_file_query_overload_default : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , * mut < r#StorageFileQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_file_query : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFileQuery as :: winrt :: RuntimeType > :: Abi , * mut < r#StorageFileQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_file_query_with_options : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , * mut < r#StorageFileQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_folder_query_overload_default : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , * mut < r#StorageFolderQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_folder_query : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFolderQuery as :: winrt :: RuntimeType > :: Abi , * mut < r#StorageFolderQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_folder_query_with_options : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , * mut < r#StorageFolderQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_item_query : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , * mut < r#StorageItemQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#create_item_query_with_options : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , * mut < r#StorageItemQueryResult as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_files_async : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFileQuery as :: winrt :: RuntimeType > :: Abi , u32 , u32 , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < super :: r#StorageFile > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_files_async_overload_default_start_and_count : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFileQuery as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < super :: r#StorageFile > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_folders_async : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFolderQuery as :: winrt :: RuntimeType > :: Abi , u32 , u32 , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < super :: r#StorageFolder > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_folders_async_overload_default_start_and_count : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFolderQuery as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < super :: r#StorageFolder > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_items_async : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , u32 , u32 , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < super :: super :: r#foundation :: r#collections :: r#IVectorView :: < super :: r#IStorageItem > > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#are_query_options_supported : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , * mut bool , ) -> :: winrt :: ErrorCode , pub r#is_common_folder_query_supported : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFolderQuery as :: winrt :: RuntimeType > :: Abi , * mut bool , ) -> :: winrt :: ErrorCode , pub r#is_common_file_query_supported : extern "system" fn ( * const * const abi_IStorageFolderQueryOperations , < r#CommonFileQuery as :: winrt :: RuntimeType > :: Abi , * mut bool , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IStorageFolderQueryOperations {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{cb43ccc9-446b-4a4f-be97-757771be5203}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageFolderQueryOperations {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageFolderQueryOperations> for ::winrt::Object {
                fn from(value: r#IStorageFolderQueryOperations) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageFolderQueryOperations> for ::winrt::Object {
                fn from(value: &r#IStorageFolderQueryOperations) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageFolderQueryResult {
                ptr: ::winrt::ComPtr<r#IStorageFolderQueryResult>,
            }
            impl r#IStorageFolderQueryResult {
                pub fn r#get_folders_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_folders_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageFolderQueryResult {
                type VTable = abi_IStorageFolderQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1716832529,
                        32102,
                        18170,
                        [174, 207, 228, 164, 186, 169, 58, 184],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageFolderQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageFolderQueryResult {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_folders_async: extern "system" fn(
                    *const *const abi_IStorageFolderQueryResult,
                    u32,
                    u32,
                    *mut <super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#get_folders_async_default_start_and_count:
                    extern "system" fn(
                        *const *const abi_IStorageFolderQueryResult,
                        *mut <super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IStorageFolderQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{6654c911-7d66-46fa-aecf-e4a4baa93ab8}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageFolderQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#IStorageFolderQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IStorageFolderQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#IStorageFolderQueryResult) -> r#IStorageQueryResultBase {
                    <r#IStorageFolderQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IStorageFolderQueryResult> for ::winrt::Object {
                fn from(value: r#IStorageFolderQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageFolderQueryResult> for ::winrt::Object {
                fn from(value: &r#IStorageFolderQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageItemQueryResult {
                ptr: ::winrt::ComPtr<r#IStorageItemQueryResult>,
            }
            impl r#IStorageItemQueryResult {
                pub fn r#get_items_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_items_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#IStorageItem,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_items_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_items_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#IStorageItem,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageItemQueryResult {
                type VTable = abi_IStorageItemQueryResult;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3902046329,
                        40280,
                        18360,
                        [178, 178, 65, 176, 127, 71, 149, 249],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageItemQueryResult {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageItemQueryResult {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_items_async: extern "system" fn(
                    *const *const abi_IStorageItemQueryResult,
                    u32,
                    u32,
                    *mut <super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#get_items_async_default_start_and_count:
                    extern "system" fn(
                        *const *const abi_IStorageItemQueryResult,
                        *mut <super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IStorageItemQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{e8948079-9d58-47b8-b2b2-41b07f4795f9}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageItemQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#IStorageItemQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IStorageItemQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#IStorageItemQueryResult) -> r#IStorageQueryResultBase {
                    <r#IStorageItemQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IStorageItemQueryResult> for ::winrt::Object {
                fn from(value: r#IStorageItemQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageItemQueryResult> for ::winrt::Object {
                fn from(value: &r#IStorageItemQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IStorageQueryResultBase {
                ptr: ::winrt::ComPtr<r#IStorageQueryResultBase>,
            }
            impl r#IStorageQueryResultBase {
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<u32> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_item_count_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < u32 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::r#StorageFolder = ::std::mem::zeroed();
                        ((*(*(this))).r#folder)(
                            this,
                            <super::r#StorageFolder as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#EventRegistrationToken =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#contents_changed ) ( this , r#handler . into ( ) . abi ( ) , < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#remove_contents_changed)(this, r#event_cookie.into().abi())
                            .ok()
                    }
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#EventRegistrationToken =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#options_changed ) ( this , r#changed_handler . into ( ) . abi ( ) , < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#remove_options_changed)(this, r#event_cookie.into().abi())
                            .ok()
                    }
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<u32> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#find_start_index_async ) ( this , r#value . into ( ) . abi ( ) , < super :: super :: r#foundation :: r#IAsyncOperation :: < u32 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#QueryOptions = ::std::mem::zeroed();
                        ((*(*(this))).r#get_current_query_options)(
                            this,
                            <r#QueryOptions as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#apply_new_query_options)(
                            this,
                            r#new_query_options.into().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IStorageQueryResultBase {
                type VTable = abi_IStorageQueryResultBase;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3264730893,
                        29523,
                        18347,
                        [186, 88, 140, 97, 66, 93, 197, 75],
                    )
                }
            }
            impl ::std::clone::Clone for r#IStorageQueryResultBase {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IStorageQueryResultBase where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#get_item_count_async : extern "system" fn ( * const * const abi_IStorageQueryResultBase , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < u32 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#folder : extern "system" fn ( * const * const abi_IStorageQueryResultBase , * mut < super :: r#StorageFolder as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#contents_changed : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < super :: super :: r#foundation :: r#TypedEventHandler :: < r#IStorageQueryResultBase , :: winrt :: Object > as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#remove_contents_changed : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#options_changed : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < super :: super :: r#foundation :: r#TypedEventHandler :: < r#IStorageQueryResultBase , :: winrt :: Object > as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#remove_options_changed : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < super :: super :: r#foundation :: r#EventRegistrationToken as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#find_start_index_async : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < :: winrt :: Object as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < u32 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_current_query_options : extern "system" fn ( * const * const abi_IStorageQueryResultBase , * mut < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#apply_new_query_options : extern "system" fn ( * const * const abi_IStorageQueryResultBase , < r#QueryOptions as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IStorageQueryResultBase {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{c297d70d-7353-47ab-ba58-8c61425dc54b}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IStorageQueryResultBase {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IStorageQueryResultBase> for ::winrt::Object {
                fn from(value: r#IStorageQueryResultBase) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IStorageQueryResultBase> for ::winrt::Object {
                fn from(value: &r#IStorageQueryResultBase) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#IndexedState {
                value: i32,
            }
            impl r#IndexedState {
                #![allow(non_upper_case_globals)]
                pub const r#Unknown: Self = Self { value: 0i32 };
                pub const r#NotIndexed: Self = Self { value: 1i32 };
                pub const r#PartiallyIndexed: Self = Self { value: 2i32 };
                pub const r#FullyIndexed: Self = Self { value: 3i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#IndexedState {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.IndexedState;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#IndexerOption {
                value: i32,
            }
            impl r#IndexerOption {
                #![allow(non_upper_case_globals)]
                pub const r#UseIndexerWhenAvailable: Self = Self { value: 0i32 };
                pub const r#OnlyUseIndexer: Self = Self { value: 1i32 };
                pub const r#DoNotUseIndexer: Self = Self { value: 2i32 };
                pub const r#OnlyUseIndexerAndOptimizeForIndexedProperties: Self =
                    Self { value: 3i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#IndexerOption {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Storage.Search.IndexerOption;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#QueryOptions {
                ptr: ::winrt::ComPtr<r#QueryOptions>,
            }
            impl r#QueryOptions {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#file_type_filter(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            ::winrt::HString,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#file_type_filter ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < :: winrt :: HString > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#folder_depth(&self) -> ::winrt::Result<r#FolderDepth> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#FolderDepth = ::std::mem::zeroed();
                        ((*(*(this))).r#folder_depth)(
                            this,
                            <r#FolderDepth as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_folder_depth(&self, r#value: r#FolderDepth) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_folder_depth)(this, ::winrt::RuntimeType::abi(&r#value))
                            .ok()
                    }
                }
                pub fn r#application_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#application_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_application_search_filter<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_application_search_filter)(this, r#value.into().abi())
                            .ok()
                    }
                }
                pub fn r#user_search_filter(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#user_search_filter)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_user_search_filter<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_user_search_filter)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_language)(this, r#value.into().abi()).ok() }
                }
                pub fn r#indexer_option(&self) -> ::winrt::Result<r#IndexerOption> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IndexerOption = ::std::mem::zeroed();
                        ((*(*(this))).r#indexer_option)(
                            this,
                            <r#IndexerOption as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_indexer_option(
                    &self,
                    r#value: r#IndexerOption,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_indexer_option)(
                            this,
                            ::winrt::RuntimeType::abi(&r#value),
                        )
                        .ok()
                    }
                }
                pub fn r#sort_order(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SortEntry>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SortEntry,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#sort_order ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SortEntry > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#group_property_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#group_property_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#date_stack_option(&self) -> ::winrt::Result<r#DateStackOption> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#DateStackOption = ::std::mem::zeroed();
                        ((*(*(this))).r#date_stack_option)(
                            this,
                            <r#DateStackOption as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#save_to_string(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#save_to_string)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load_from_string<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load_from_string)(this, r#value.into().abi()).ok() }
                }
                pub fn r#set_thumbnail_prefetch(
                    &self,
                    r#mode: super::r#file_properties::r#ThumbnailMode,
                    r#requested_size: u32,
                    r#options: super::r#file_properties::r#ThumbnailOptions,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_thumbnail_prefetch)(
                            this,
                            ::winrt::RuntimeType::abi(&r#mode),
                            r#requested_size,
                            ::winrt::RuntimeType::abi(&r#options),
                        )
                        .ok()
                    }
                }
                pub fn r#set_property_prefetch<
                    'a,
                    __1: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#options: super::r#file_properties::r#PropertyPrefetchOptions,
                    r#properties_to_retrieve: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_property_prefetch)(
                            this,
                            ::winrt::RuntimeType::abi(&r#options),
                            r#properties_to_retrieve.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn r#storage_provider_id_filter(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<::winrt::HString>,
                > {
                    <r#IQueryOptionsWithProviderFilter as ::std::convert::From<&Self>>::from(self)
                        .r#storage_provider_id_filter()
                }
                pub fn r#create_common_file_query<
                    'a,
                    __1: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#collections::r#IIterable<
                                ::winrt::HString,
                            >,
                        >,
                    >,
                >(
                    r#query: r#CommonFileQuery,
                    r#file_type_filter: __1,
                ) -> ::winrt::Result<r#QueryOptions> {
                    ::winrt::factory::<Self, r#IQueryOptionsFactory>()?
                        .r#create_common_file_query(r#query, r#file_type_filter)
                }
                pub fn r#create_common_folder_query(
                    r#query: r#CommonFolderQuery,
                ) -> ::winrt::Result<r#QueryOptions> {
                    ::winrt::factory::<Self, r#IQueryOptionsFactory>()?
                        .r#create_common_folder_query(r#query)
                }
            }
            impl ::winrt::RuntimeName for r#QueryOptions {
                const NAME: &'static str = "Windows.Storage.Search.QueryOptions";
            }
            unsafe impl ::winrt::ComInterface for r#QueryOptions {
                type VTable = abi_IQueryOptions;
                fn iid() -> ::winrt::Guid {
                    <r#IQueryOptions as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#QueryOptions {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.Search.QueryOptions;{1e5e46ee-0f45-4838-a8e9-d0479d446c30})"
                        .to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#QueryOptions {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#QueryOptions> for r#IQueryOptions {
                fn from(value: r#QueryOptions) -> r#IQueryOptions {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#QueryOptions> for r#IQueryOptions {
                fn from(value: &r#QueryOptions) -> r#IQueryOptions {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#QueryOptions> for r#IQueryOptionsWithProviderFilter {
                fn from(value: r#QueryOptions) -> r#IQueryOptionsWithProviderFilter {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#QueryOptions> for r#IQueryOptionsWithProviderFilter {
                fn from(value: &r#QueryOptions) -> r#IQueryOptionsWithProviderFilter {
                    <r#QueryOptions as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#QueryOptions> for ::winrt::Object {
                fn from(value: r#QueryOptions) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#QueryOptions> for ::winrt::Object {
                fn from(value: &r#QueryOptions) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct r#SortEntry {
                pub r#property_name: ::winrt::HString,
                pub r#ascending_order: bool,
            }
            unsafe impl ::winrt::RuntimeType for r#SortEntry {
                type Abi = Self;
                fn signature() -> String {
                    "struct(Windows.Storage.Search.SortEntry;string;b1)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#StorageFileQueryResult {
                ptr: ::winrt::ComPtr<r#StorageFileQueryResult>,
            }
            impl r#StorageFileQueryResult {
                pub fn r#get_files_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_files_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFile,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFile,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_files_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFile,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_matching_properties_with_ranges<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::r#StorageFile>>,
                >(
                    &self,
                    r#file: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IMap<
                        ::winrt::HString,
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::super::r#data::r#text::r#TextSegment,
                        >,
                    >,
                > {
                    <r#IStorageFileQueryResult2 as ::std::convert::From<&Self>>::from(self)
                        .r#get_matching_properties_with_ranges(r#file)
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            impl ::winrt::RuntimeName for r#StorageFileQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFileQueryResult";
            }
            unsafe impl ::winrt::ComInterface for r#StorageFileQueryResult {
                type VTable = abi_IStorageFileQueryResult;
                fn iid() -> ::winrt::Guid {
                    <r#IStorageFileQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#StorageFileQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageFileQueryResult;{52fda447-2baa-412c-b29f-d4b1778efa1e})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#StorageFileQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#StorageFileQueryResult> for r#IStorageFileQueryResult {
                fn from(value: r#StorageFileQueryResult) -> r#IStorageFileQueryResult {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageFileQueryResult> for r#IStorageFileQueryResult {
                fn from(value: &r#StorageFileQueryResult) -> r#IStorageFileQueryResult {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#StorageFileQueryResult> for r#IStorageFileQueryResult2 {
                fn from(value: r#StorageFileQueryResult) -> r#IStorageFileQueryResult2 {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageFileQueryResult> for r#IStorageFileQueryResult2 {
                fn from(value: &r#StorageFileQueryResult) -> r#IStorageFileQueryResult2 {
                    <r#StorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageFileQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#StorageFileQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageFileQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#StorageFileQueryResult) -> r#IStorageQueryResultBase {
                    <r#StorageFileQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageFileQueryResult> for ::winrt::Object {
                fn from(value: r#StorageFileQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageFileQueryResult> for ::winrt::Object {
                fn from(value: &r#StorageFileQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#StorageFolderQueryResult {
                ptr: ::winrt::ComPtr<r#StorageFolderQueryResult>,
            }
            impl r#StorageFolderQueryResult {
                pub fn r#get_folders_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_folders_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#StorageFolder,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#StorageFolder,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_folders_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#StorageFolder,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            impl ::winrt::RuntimeName for r#StorageFolderQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageFolderQueryResult";
            }
            unsafe impl ::winrt::ComInterface for r#StorageFolderQueryResult {
                type VTable = abi_IStorageFolderQueryResult;
                fn iid() -> ::winrt::Guid {
                    <r#IStorageFolderQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#StorageFolderQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageFolderQueryResult;{6654c911-7d66-46fa-aecf-e4a4baa93ab8})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#StorageFolderQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#StorageFolderQueryResult> for r#IStorageFolderQueryResult {
                fn from(value: r#StorageFolderQueryResult) -> r#IStorageFolderQueryResult {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageFolderQueryResult> for r#IStorageFolderQueryResult {
                fn from(value: &r#StorageFolderQueryResult) -> r#IStorageFolderQueryResult {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#StorageFolderQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#StorageFolderQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageFolderQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#StorageFolderQueryResult) -> r#IStorageQueryResultBase {
                    <r#StorageFolderQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageFolderQueryResult> for ::winrt::Object {
                fn from(value: r#StorageFolderQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageFolderQueryResult> for ::winrt::Object {
                fn from(value: &r#StorageFolderQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#StorageItemQueryResult {
                ptr: ::winrt::ComPtr<r#StorageItemQueryResult>,
            }
            impl r#StorageItemQueryResult {
                pub fn r#get_items_async(
                    &self,
                    r#start_index: u32,
                    r#max_number_of_items: u32,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_items_async)(
                            this,
                            r#start_index,
                            r#max_number_of_items,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#IStorageItem,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_items_async_default_start_and_count(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        super::super::r#foundation::r#collections::r#IVectorView<
                            super::r#IStorageItem,
                        >,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            super::super::r#foundation::r#collections::r#IVectorView<
                                super::r#IStorageItem,
                            >,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#get_items_async_default_start_and_count)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                super::super::r#foundation::r#collections::r#IVectorView<
                                    super::r#IStorageItem,
                                >,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_item_count_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_item_count_async()
                }
                pub fn r#folder(&self) -> ::winrt::Result<super::r#StorageFolder> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#folder()
                }
                pub fn r#contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#contents_changed(r#handler)
                }
                pub fn r#remove_contents_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_contents_changed(r#event_cookie)
                }
                pub fn r#options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#foundation::r#TypedEventHandler<
                                r#IStorageQueryResultBase,
                                ::winrt::Object,
                            >,
                        >,
                    >,
                >(
                    &self,
                    r#changed_handler: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#EventRegistrationToken>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#options_changed(r#changed_handler)
                }
                pub fn r#remove_options_changed<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#EventRegistrationToken>,
                    >,
                >(
                    &self,
                    r#event_cookie: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#remove_options_changed(r#event_cookie)
                }
                pub fn r#find_start_index_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::Object>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<u32>>
                {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#find_start_index_async(r#value)
                }
                pub fn r#get_current_query_options(&self) -> ::winrt::Result<r#QueryOptions> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#get_current_query_options()
                }
                pub fn r#apply_new_query_options<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#QueryOptions>>,
                >(
                    &self,
                    r#new_query_options: __0,
                ) -> ::winrt::Result<()> {
                    <r#IStorageQueryResultBase as ::std::convert::From<&Self>>::from(self)
                        .r#apply_new_query_options(r#new_query_options)
                }
            }
            impl ::winrt::RuntimeName for r#StorageItemQueryResult {
                const NAME: &'static str = "Windows.Storage.Search.StorageItemQueryResult";
            }
            unsafe impl ::winrt::ComInterface for r#StorageItemQueryResult {
                type VTable = abi_IStorageItemQueryResult;
                fn iid() -> ::winrt::Guid {
                    <r#IStorageItemQueryResult as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#StorageItemQueryResult {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Storage.Search.StorageItemQueryResult;{e8948079-9d58-47b8-b2b2-41b07f4795f9})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#StorageItemQueryResult {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#StorageItemQueryResult> for r#IStorageItemQueryResult {
                fn from(value: r#StorageItemQueryResult) -> r#IStorageItemQueryResult {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemQueryResult> for r#IStorageItemQueryResult {
                fn from(value: &r#StorageItemQueryResult) -> r#IStorageItemQueryResult {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#StorageItemQueryResult> for r#IStorageQueryResultBase {
                fn from(value: r#StorageItemQueryResult) -> r#IStorageQueryResultBase {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#StorageItemQueryResult> for r#IStorageQueryResultBase {
                fn from(value: &r#StorageItemQueryResult) -> r#IStorageQueryResultBase {
                    <r#StorageItemQueryResult as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#StorageItemQueryResult> for ::winrt::Object {
                fn from(value: r#StorageItemQueryResult) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#StorageItemQueryResult> for ::winrt::Object {
                fn from(value: &r#StorageItemQueryResult) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
        }
        pub mod r#streams {
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IBuffer {
                ptr: ::winrt::ComPtr<r#IBuffer>,
            }
            impl r#IBuffer {
                pub fn r#capacity(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#capacity)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#length(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#length)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_length(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_length)(this, r#value).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IBuffer {
                type VTable = abi_IBuffer;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821408,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for r#IBuffer {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IBuffer {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#capacity:
                    extern "system" fn(*const *const abi_IBuffer, *mut u32) -> ::winrt::ErrorCode,
                pub r#length:
                    extern "system" fn(*const *const abi_IBuffer, *mut u32) -> ::winrt::ErrorCode,
                pub r#set_length:
                    extern "system" fn(*const *const abi_IBuffer, u32) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IBuffer {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{905a0fe0-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IBuffer {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IBuffer> for ::winrt::Object {
                fn from(value: r#IBuffer) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IBuffer> for ::winrt::Object {
                fn from(value: &r#IBuffer) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IContentTypeProvider {
                ptr: ::winrt::ComPtr<r#IContentTypeProvider>,
            }
            impl r#IContentTypeProvider {
                pub fn r#content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#content_type)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IContentTypeProvider {
                type VTable = abi_IContentTypeProvider;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2547030181,
                        15257,
                        19945,
                        [136, 165, 225, 29, 47, 80, 199, 149],
                    )
                }
            }
            impl ::std::clone::Clone for r#IContentTypeProvider {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IContentTypeProvider {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#content_type: extern "system" fn(
                    *const *const abi_IContentTypeProvider,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IContentTypeProvider {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{97d098a5-3b99-4de9-88a5-e11d2f50c795}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IContentTypeProvider {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IContentTypeProvider> for ::winrt::Object {
                fn from(value: r#IContentTypeProvider) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IContentTypeProvider> for ::winrt::Object {
                fn from(value: &r#IContentTypeProvider) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IInputStream {
                ptr: ::winrt::ComPtr<r#IInputStream>,
            }
            impl r#IInputStream {
                pub fn r#read_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                    r#count: u32,
                    r#options: r#InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<r#IBuffer, u32>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperationWithProgress<
                            r#IBuffer,
                            u32,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#read_async)(
                            this,
                            r#buffer.into().abi(),
                            r#count,
                            ::winrt::RuntimeType::abi(&r#options),
                            <super::super::r#foundation::r#IAsyncOperationWithProgress<
                                r#IBuffer,
                                u32,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#close(&self) -> ::winrt::Result<()> {
                    <super::super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#close()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IInputStream {
                type VTable = abi_IInputStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821410,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for r#IInputStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IInputStream {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#read_async:
                    extern "system" fn(
                        *const *const abi_IInputStream,
                        <r#IBuffer as ::winrt::RuntimeType>::Abi,
                        u32,
                        <r#InputStreamOptions as ::winrt::RuntimeType>::Abi,
                        *mut <super::super::r#foundation::r#IAsyncOperationWithProgress<
                            r#IBuffer,
                            u32,
                        > as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IInputStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{905a0fe2-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IInputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IInputStream> for super::super::r#foundation::r#IClosable {
                fn from(value: r#IInputStream) -> super::super::r#foundation::r#IClosable {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IInputStream> for super::super::r#foundation::r#IClosable {
                fn from(value: &r#IInputStream) -> super::super::r#foundation::r#IClosable {
                    <r#IInputStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IInputStream> for ::winrt::Object {
                fn from(value: r#IInputStream) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IInputStream> for ::winrt::Object {
                fn from(value: &r#IInputStream) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IInputStreamReference {
                ptr: ::winrt::ComPtr<r#IInputStreamReference>,
            }
            impl r#IInputStreamReference {
                pub fn r#open_sequential_read_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<r#IInputStream>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#IInputStream,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#open_sequential_read_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < r#IInputStream > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IInputStreamReference {
                type VTable = abi_IInputStreamReference;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1133681944,
                        24265,
                        19290,
                        [145, 156, 66, 5, 176, 200, 4, 182],
                    )
                }
            }
            impl ::std::clone::Clone for r#IInputStreamReference {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IInputStreamReference where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#open_sequential_read_async : extern "system" fn ( * const * const abi_IInputStreamReference , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < r#IInputStream > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IInputStreamReference {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{43929d18-5ec9-4b5a-919c-4205b0c804b6}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IInputStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IInputStreamReference> for ::winrt::Object {
                fn from(value: r#IInputStreamReference) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IInputStreamReference> for ::winrt::Object {
                fn from(value: &r#IInputStreamReference) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IOutputStream {
                ptr: ::winrt::ComPtr<r#IOutputStream>,
            }
            impl r#IOutputStream {
                pub fn r#write_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<u32, u32>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperationWithProgress<
                            u32,
                            u32,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#write_async ) ( this , r#buffer . into ( ) . abi ( ) , < super :: super :: r#foundation :: r#IAsyncOperationWithProgress :: < u32 , u32 > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<bool>>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<bool> =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#flush_async ) ( this , < super :: super :: r#foundation :: r#IAsyncOperation :: < bool > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#close(&self) -> ::winrt::Result<()> {
                    <super::super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#close()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IOutputStream {
                type VTable = abi_IOutputStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821414,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for r#IOutputStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IOutputStream where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#write_async : extern "system" fn ( * const * const abi_IOutputStream , < r#IBuffer as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperationWithProgress :: < u32 , u32 > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#flush_async : extern "system" fn ( * const * const abi_IOutputStream , * mut < super :: super :: r#foundation :: r#IAsyncOperation :: < bool > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#IOutputStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{905a0fe6-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IOutputStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IOutputStream> for super::super::r#foundation::r#IClosable {
                fn from(value: r#IOutputStream) -> super::super::r#foundation::r#IClosable {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IOutputStream> for super::super::r#foundation::r#IClosable {
                fn from(value: &r#IOutputStream) -> super::super::r#foundation::r#IClosable {
                    <r#IOutputStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IOutputStream> for ::winrt::Object {
                fn from(value: r#IOutputStream) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IOutputStream> for ::winrt::Object {
                fn from(value: &r#IOutputStream) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IRandomAccessStream {
                ptr: ::winrt::ComPtr<r#IRandomAccessStream>,
            }
            impl r#IRandomAccessStream {
                pub fn r#size(&self) -> ::winrt::Result<u64> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u64 = ::std::mem::zeroed();
                        ((*(*(this))).r#size)(
                            this,
                            <u64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_size(&self, r#value: u64) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_size)(this, r#value).ok() }
                }
                pub fn r#get_input_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<r#IInputStream> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IInputStream = ::std::mem::zeroed();
                        ((*(*(this))).r#get_input_stream_at)(
                            this,
                            r#position,
                            <r#IInputStream as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_output_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<r#IOutputStream> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IOutputStream = ::std::mem::zeroed();
                        ((*(*(this))).r#get_output_stream_at)(
                            this,
                            r#position,
                            <r#IOutputStream as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#position(&self) -> ::winrt::Result<u64> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u64 = ::std::mem::zeroed();
                        ((*(*(this))).r#position)(
                            this,
                            <u64 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#seek(&self, r#position: u64) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#seek)(this, r#position).ok() }
                }
                pub fn r#clone_stream(&self) -> ::winrt::Result<r#IRandomAccessStream> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#IRandomAccessStream = ::std::mem::zeroed();
                        ((*(*(this))).r#clone_stream)(
                            this,
                            <r#IRandomAccessStream as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#can_read(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#can_read)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#can_write(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#can_write)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#close(&self) -> ::winrt::Result<()> {
                    <super::super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#close()
                }
                pub fn r#read_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                    r#count: u32,
                    r#options: r#InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<r#IBuffer, u32>,
                > {
                    <r#IInputStream as ::std::convert::From<&Self>>::from(self)
                        .r#read_async(r#buffer, r#count, r#options)
                }
                pub fn r#write_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<u32, u32>,
                > {
                    <r#IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .r#write_async(r#buffer)
                }
                pub fn r#flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<bool>>
                {
                    <r#IOutputStream as ::std::convert::From<&Self>>::from(self).r#flush_async()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IRandomAccessStream {
                type VTable = abi_IRandomAccessStream;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2421821409,
                        48211,
                        4575,
                        [140, 73, 0, 30, 79, 198, 134, 218],
                    )
                }
            }
            impl ::std::clone::Clone for r#IRandomAccessStream {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStream {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#size: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    *mut u64,
                ) -> ::winrt::ErrorCode,
                pub r#set_size: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    u64,
                ) -> ::winrt::ErrorCode,
                pub r#get_input_stream_at: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    u64,
                    *mut <r#IInputStream as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_output_stream_at: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    u64,
                    *mut <r#IOutputStream as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#position: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    *mut u64,
                ) -> ::winrt::ErrorCode,
                pub r#seek: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    u64,
                ) -> ::winrt::ErrorCode,
                pub r#clone_stream: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    *mut <r#IRandomAccessStream as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#can_read: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
                pub r#can_write: extern "system" fn(
                    *const *const abi_IRandomAccessStream,
                    *mut bool,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IRandomAccessStream {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{905a0fe1-bc53-11df-8c49-001e4fc686da}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IRandomAccessStream {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IRandomAccessStream> for super::super::r#foundation::r#IClosable {
                fn from(value: r#IRandomAccessStream) -> super::super::r#foundation::r#IClosable {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStream> for super::super::r#foundation::r#IClosable {
                fn from(value: &r#IRandomAccessStream) -> super::super::r#foundation::r#IClosable {
                    <r#IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStream> for r#IInputStream {
                fn from(value: r#IRandomAccessStream) -> r#IInputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStream> for r#IInputStream {
                fn from(value: &r#IRandomAccessStream) -> r#IInputStream {
                    <r#IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStream> for r#IOutputStream {
                fn from(value: r#IRandomAccessStream) -> r#IOutputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStream> for r#IOutputStream {
                fn from(value: &r#IRandomAccessStream) -> r#IOutputStream {
                    <r#IRandomAccessStream as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStream> for ::winrt::Object {
                fn from(value: r#IRandomAccessStream) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStream> for ::winrt::Object {
                fn from(value: &r#IRandomAccessStream) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IRandomAccessStreamReference {
                ptr: ::winrt::ComPtr<r#IRandomAccessStreamReference>,
            }
            impl r#IRandomAccessStreamReference {
                pub fn r#open_read_async(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperation<
                        r#IRandomAccessStreamWithContentType,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperation<
                            r#IRandomAccessStreamWithContentType,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#open_read_async)(
                            this,
                            <super::super::r#foundation::r#IAsyncOperation<
                                r#IRandomAccessStreamWithContentType,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#IRandomAccessStreamReference {
                type VTable = abi_IRandomAccessStreamReference;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        871248180,
                        7638,
                        20026,
                        [128, 103, 209, 193, 98, 232, 100, 43],
                    )
                }
            }
            impl ::std::clone::Clone for r#IRandomAccessStreamReference {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStreamReference {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#open_read_async: extern "system" fn(
                    *const *const abi_IRandomAccessStreamReference,
                    *mut <super::super::r#foundation::r#IAsyncOperation<
                        r#IRandomAccessStreamWithContentType,
                    > as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IRandomAccessStreamReference {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{33ee3134-1dd6-4e3a-8067-d1c162e8642b}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IRandomAccessStreamReference {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamReference> for ::winrt::Object {
                fn from(value: r#IRandomAccessStreamReference) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamReference> for ::winrt::Object {
                fn from(value: &r#IRandomAccessStreamReference) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#IRandomAccessStreamWithContentType {
                ptr: ::winrt::ComPtr<r#IRandomAccessStreamWithContentType>,
            }
            impl r#IRandomAccessStreamWithContentType {
                pub fn r#close(&self) -> ::winrt::Result<()> {
                    <super::super::r#foundation::r#IClosable as ::std::convert::From<&Self>>::from(
                        self,
                    )
                    .r#close()
                }
                pub fn r#content_type(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#IContentTypeProvider as ::std::convert::From<&Self>>::from(self)
                        .r#content_type()
                }
                pub fn r#read_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                    r#count: u32,
                    r#options: r#InputStreamOptions,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<r#IBuffer, u32>,
                > {
                    <r#IInputStream as ::std::convert::From<&Self>>::from(self)
                        .r#read_async(r#buffer, r#count, r#options)
                }
                pub fn r#write_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#IBuffer>>,
                >(
                    &self,
                    r#buffer: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<u32, u32>,
                > {
                    <r#IOutputStream as ::std::convert::From<&Self>>::from(self)
                        .r#write_async(r#buffer)
                }
                pub fn r#flush_async(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#IAsyncOperation<bool>>
                {
                    <r#IOutputStream as ::std::convert::From<&Self>>::from(self).r#flush_async()
                }
                pub fn r#size(&self) -> ::winrt::Result<u64> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self).r#size()
                }
                pub fn r#set_size(&self, r#value: u64) -> ::winrt::Result<()> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .r#set_size(r#value)
                }
                pub fn r#get_input_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<r#IInputStream> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .r#get_input_stream_at(r#position)
                }
                pub fn r#get_output_stream_at(
                    &self,
                    r#position: u64,
                ) -> ::winrt::Result<r#IOutputStream> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .r#get_output_stream_at(r#position)
                }
                pub fn r#position(&self) -> ::winrt::Result<u64> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self).r#position()
                }
                pub fn r#seek(&self, r#position: u64) -> ::winrt::Result<()> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .r#seek(r#position)
                }
                pub fn r#clone_stream(&self) -> ::winrt::Result<r#IRandomAccessStream> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self)
                        .r#clone_stream()
                }
                pub fn r#can_read(&self) -> ::winrt::Result<bool> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self).r#can_read()
                }
                pub fn r#can_write(&self) -> ::winrt::Result<bool> {
                    <r#IRandomAccessStream as ::std::convert::From<&Self>>::from(self).r#can_write()
                }
            }
            unsafe impl ::winrt::ComInterface for r#IRandomAccessStreamWithContentType {
                type VTable = abi_IRandomAccessStreamWithContentType;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3424995367,
                        19261,
                        17295,
                        [146, 50, 16, 199, 107, 199, 224, 56],
                    )
                }
            }
            impl ::std::clone::Clone for r#IRandomAccessStreamWithContentType {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_IRandomAccessStreamWithContentType {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#IRandomAccessStreamWithContentType {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{cc254827-4b3d-438f-9232-10c76bc7e038}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#IRandomAccessStreamWithContentType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType>
                for super::super::r#foundation::r#IClosable
            {
                fn from(
                    value: r#IRandomAccessStreamWithContentType,
                ) -> super::super::r#foundation::r#IClosable {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType>
                for super::super::r#foundation::r#IClosable
            {
                fn from(
                    value: &r#IRandomAccessStreamWithContentType,
                ) -> super::super::r#foundation::r#IClosable {
                    <r#IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType> for r#IContentTypeProvider {
                fn from(value: r#IRandomAccessStreamWithContentType) -> r#IContentTypeProvider {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType> for r#IContentTypeProvider {
                fn from(value: &r#IRandomAccessStreamWithContentType) -> r#IContentTypeProvider {
                    <r#IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType> for r#IInputStream {
                fn from(value: r#IRandomAccessStreamWithContentType) -> r#IInputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType> for r#IInputStream {
                fn from(value: &r#IRandomAccessStreamWithContentType) -> r#IInputStream {
                    <r#IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType> for r#IOutputStream {
                fn from(value: r#IRandomAccessStreamWithContentType) -> r#IOutputStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType> for r#IOutputStream {
                fn from(value: &r#IRandomAccessStreamWithContentType) -> r#IOutputStream {
                    <r#IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType> for r#IRandomAccessStream {
                fn from(value: r#IRandomAccessStreamWithContentType) -> r#IRandomAccessStream {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType> for r#IRandomAccessStream {
                fn from(value: &r#IRandomAccessStreamWithContentType) -> r#IRandomAccessStream {
                    <r#IRandomAccessStreamWithContentType as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#IRandomAccessStreamWithContentType> for ::winrt::Object {
                fn from(value: r#IRandomAccessStreamWithContentType) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#IRandomAccessStreamWithContentType> for ::winrt::Object {
                fn from(value: &r#IRandomAccessStreamWithContentType) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#InputStreamOptions {
                value: u32,
            }
            impl r#InputStreamOptions {
                #![allow(non_upper_case_globals)]
                pub const r#None: Self = Self { value: 0u32 };
                pub const r#Partial: Self = Self { value: 1u32 };
                pub const r#ReadAhead: Self = Self { value: 2u32 };
            }
            unsafe impl ::winrt::RuntimeType for r#InputStreamOptions {
                type Abi = u32;
                fn signature() -> String {
                    "enum(Windows.Storage.Streams.InputStreamOptions;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            impl ::std::ops::BitOr for r#InputStreamOptions {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self {
                        value: self.value | rhs.value,
                    }
                }
            }
            impl ::std::ops::BitAnd for r#InputStreamOptions {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self {
                        value: self.value & rhs.value,
                    }
                }
            }
        }
    }
    pub mod r#web {
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IUriToStreamResolver {
            ptr: ::winrt::ComPtr<r#IUriToStreamResolver>,
        }
        impl r#IUriToStreamResolver {
            pub fn r#uri_to_stream_async<
                'a,
                __0: ::std::convert::Into<::winrt::Param<'a, super::r#foundation::r#Uri>>,
            >(
                &self,
                r#uri: __0,
            ) -> ::winrt::Result<
                super::r#foundation::r#IAsyncOperation<super::r#storage::r#streams::r#IInputStream>,
            > {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: super::r#foundation::r#IAsyncOperation<
                        super::r#storage::r#streams::r#IInputStream,
                    > = ::std::mem::zeroed();
                    ((*(*(this))).r#uri_to_stream_async)(
                        this,
                        r#uri.into().abi(),
                        <super::r#foundation::r#IAsyncOperation<
                            super::r#storage::r#streams::r#IInputStream,
                        > as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IUriToStreamResolver {
            type VTable = abi_IUriToStreamResolver;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    2964039786,
                    39659,
                    19770,
                    [149, 144, 0, 62, 60, 167, 226, 144],
                )
            }
        }
        impl ::std::clone::Clone for r#IUriToStreamResolver {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IUriToStreamResolver {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#uri_to_stream_async: extern "system" fn(
                *const *const abi_IUriToStreamResolver,
                <super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                *mut <super::r#foundation::r#IAsyncOperation<
                    super::r#storage::r#streams::r#IInputStream,
                > as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IUriToStreamResolver {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{b0aba86a-9aeb-4d3a-9590-003e3ca7e290}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IUriToStreamResolver {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IUriToStreamResolver> for ::winrt::Object {
            fn from(value: r#IUriToStreamResolver) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IUriToStreamResolver> for ::winrt::Object {
            fn from(value: &r#IUriToStreamResolver) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        #[repr(transparent)]
        #[derive(Default, PartialEq)]
        pub struct r#IWebErrorStatics {
            ptr: ::winrt::ComPtr<r#IWebErrorStatics>,
        }
        impl r#IWebErrorStatics {
            pub fn r#get_status(&self, r#hresult: i32) -> ::winrt::Result<r#WebErrorStatus> {
                let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                if this.is_null() {
                    panic!("The `this` pointer was null when calling method");
                }
                unsafe {
                    let mut __ok: r#WebErrorStatus = ::std::mem::zeroed();
                    ((*(*(this))).r#get_status)(
                        this,
                        r#hresult,
                        <r#WebErrorStatus as ::winrt::RuntimeType>::set_abi(&mut __ok),
                    )
                    .and_then(|| __ok)
                }
            }
        }
        unsafe impl ::winrt::ComInterface for r#IWebErrorStatics {
            type VTable = abi_IWebErrorStatics;
            fn iid() -> ::winrt::Guid {
                ::winrt::Guid::from_values(
                    4267796326,
                    48935,
                    16484,
                    [135, 183, 101, 99, 187, 17, 206, 46],
                )
            }
        }
        impl ::std::clone::Clone for r#IWebErrorStatics {
            fn clone(&self) -> Self {
                Self {
                    ptr: self.ptr.clone(),
                }
            }
        }
        #[repr(C)]
        pub struct abi_IWebErrorStatics {
            pub unknown_query_interface: extern "system" fn(
                ::winrt::RawComPtr<::winrt::IUnknown>,
                &::winrt::Guid,
                *mut ::winrt::RawPtr,
            ) -> ::winrt::ErrorCode,
            pub unknown_add_ref: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub unknown_release: extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
            pub inspectable_iids: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut u32,
                *mut *mut ::winrt::Guid,
            ) -> ::winrt::ErrorCode,
            pub inspectable_type_name: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
            pub inspectable_trust_level: extern "system" fn(
                ::winrt::RawComPtr<::winrt::Object>,
                *mut i32,
            ) -> ::winrt::ErrorCode,
            pub r#get_status: extern "system" fn(
                *const *const abi_IWebErrorStatics,
                i32,
                *mut <r#WebErrorStatus as ::winrt::RuntimeType>::Abi,
            ) -> ::winrt::ErrorCode,
        }
        unsafe impl ::winrt::RuntimeType for r#IWebErrorStatics {
            type Abi = ::winrt::RawComPtr<Self>;
            fn signature() -> String {
                "{fe616766-bf27-4064-87b7-6563bb11ce2e}".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                self.ptr.set_abi()
            }
        }
        impl ::std::fmt::Debug for r#IWebErrorStatics {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
            }
        }
        impl ::std::convert::From<r#IWebErrorStatics> for ::winrt::Object {
            fn from(value: r#IWebErrorStatics) -> ::winrt::Object {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&r#IWebErrorStatics> for ::winrt::Object {
            fn from(value: &r#IWebErrorStatics) -> ::winrt::Object {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        pub struct r#WebError {}
        impl r#WebError {
            pub fn r#get_status(r#hresult: i32) -> ::winrt::Result<r#WebErrorStatus> {
                ::winrt::factory::<Self, r#IWebErrorStatics>()?.r#get_status(r#hresult)
            }
        }
        impl ::winrt::RuntimeName for r#WebError {
            const NAME: &'static str = "Windows.Web.WebError";
        }
        #[repr(transparent)]
        #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
        pub struct r#WebErrorStatus {
            value: i32,
        }
        impl r#WebErrorStatus {
            #![allow(non_upper_case_globals)]
            pub const r#Unknown: Self = Self { value: 0i32 };
            pub const r#CertificateCommonNameIsIncorrect: Self = Self { value: 1i32 };
            pub const r#CertificateExpired: Self = Self { value: 2i32 };
            pub const r#CertificateContainsErrors: Self = Self { value: 3i32 };
            pub const r#CertificateRevoked: Self = Self { value: 4i32 };
            pub const r#CertificateIsInvalid: Self = Self { value: 5i32 };
            pub const r#ServerUnreachable: Self = Self { value: 6i32 };
            pub const r#Timeout: Self = Self { value: 7i32 };
            pub const r#ErrorHttpInvalidServerResponse: Self = Self { value: 8i32 };
            pub const r#ConnectionAborted: Self = Self { value: 9i32 };
            pub const r#ConnectionReset: Self = Self { value: 10i32 };
            pub const r#Disconnected: Self = Self { value: 11i32 };
            pub const r#HttpToHttpsOnRedirection: Self = Self { value: 12i32 };
            pub const r#HttpsToHttpOnRedirection: Self = Self { value: 13i32 };
            pub const r#CannotConnect: Self = Self { value: 14i32 };
            pub const r#HostNameNotResolved: Self = Self { value: 15i32 };
            pub const r#OperationCanceled: Self = Self { value: 16i32 };
            pub const r#RedirectFailed: Self = Self { value: 17i32 };
            pub const r#UnexpectedStatusCode: Self = Self { value: 18i32 };
            pub const r#UnexpectedRedirection: Self = Self { value: 19i32 };
            pub const r#UnexpectedClientError: Self = Self { value: 20i32 };
            pub const r#UnexpectedServerError: Self = Self { value: 21i32 };
            pub const r#InsufficientRangeSupport: Self = Self { value: 22i32 };
            pub const r#MissingContentLengthSupport: Self = Self { value: 23i32 };
            pub const r#MultipleChoices: Self = Self { value: 300i32 };
            pub const r#MovedPermanently: Self = Self { value: 301i32 };
            pub const r#Found: Self = Self { value: 302i32 };
            pub const r#SeeOther: Self = Self { value: 303i32 };
            pub const r#NotModified: Self = Self { value: 304i32 };
            pub const r#UseProxy: Self = Self { value: 305i32 };
            pub const r#TemporaryRedirect: Self = Self { value: 307i32 };
            pub const r#BadRequest: Self = Self { value: 400i32 };
            pub const r#Unauthorized: Self = Self { value: 401i32 };
            pub const r#PaymentRequired: Self = Self { value: 402i32 };
            pub const r#Forbidden: Self = Self { value: 403i32 };
            pub const r#NotFound: Self = Self { value: 404i32 };
            pub const r#MethodNotAllowed: Self = Self { value: 405i32 };
            pub const r#NotAcceptable: Self = Self { value: 406i32 };
            pub const r#ProxyAuthenticationRequired: Self = Self { value: 407i32 };
            pub const r#RequestTimeout: Self = Self { value: 408i32 };
            pub const r#Conflict: Self = Self { value: 409i32 };
            pub const r#Gone: Self = Self { value: 410i32 };
            pub const r#LengthRequired: Self = Self { value: 411i32 };
            pub const r#PreconditionFailed: Self = Self { value: 412i32 };
            pub const r#RequestEntityTooLarge: Self = Self { value: 413i32 };
            pub const r#RequestUriTooLong: Self = Self { value: 414i32 };
            pub const r#UnsupportedMediaType: Self = Self { value: 415i32 };
            pub const r#RequestedRangeNotSatisfiable: Self = Self { value: 416i32 };
            pub const r#ExpectationFailed: Self = Self { value: 417i32 };
            pub const r#InternalServerError: Self = Self { value: 500i32 };
            pub const r#NotImplemented: Self = Self { value: 501i32 };
            pub const r#BadGateway: Self = Self { value: 502i32 };
            pub const r#ServiceUnavailable: Self = Self { value: 503i32 };
            pub const r#GatewayTimeout: Self = Self { value: 504i32 };
            pub const r#HttpVersionNotSupported: Self = Self { value: 505i32 };
        }
        unsafe impl ::winrt::RuntimeType for r#WebErrorStatus {
            type Abi = i32;
            fn signature() -> String {
                "enum(Windows.Web.WebErrorStatus;i4)".to_owned()
            }
            fn abi(&self) -> Self::Abi {
                self.value
            }
            fn set_abi(&mut self) -> *mut Self::Abi {
                &mut self.value
            }
        }
        pub mod r#syndication {
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationAttribute {
                ptr: ::winrt::ComPtr<r#ISyndicationAttribute>,
            }
            impl r#ISyndicationAttribute {
                pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#namespace)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_namespace)(this, r#value.into().abi()).ok() }
                }
                pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#value)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_value)(this, r#value.into().abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationAttribute {
                type VTable = abi_ISyndicationAttribute;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1911093609,
                        21102,
                        16385,
                        [154, 145, 232, 79, 131, 22, 26, 177],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationAttribute {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationAttribute {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#name: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_name: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#namespace: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_namespace: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#value: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_value: extern "system" fn(
                    *const *const abi_ISyndicationAttribute,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationAttribute {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{71e8f969-526e-4001-9a91-e84f83161ab1}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationAttribute {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationAttribute> for ::winrt::Object {
                fn from(value: r#ISyndicationAttribute) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationAttribute> for ::winrt::Object {
                fn from(value: &r#ISyndicationAttribute) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationAttributeFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationAttributeFactory>,
            }
            impl r#ISyndicationAttributeFactory {
                pub fn r#create_syndication_attribute<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#attribute_name: __0,
                    r#attribute_namespace: __1,
                    r#attribute_value: __2,
                ) -> ::winrt::Result<r#SyndicationAttribute> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationAttribute = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_attribute)(
                            this,
                            r#attribute_name.into().abi(),
                            r#attribute_namespace.into().abi(),
                            r#attribute_value.into().abi(),
                            <r#SyndicationAttribute as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationAttributeFactory {
                type VTable = abi_ISyndicationAttributeFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1649350041,
                        60734,
                        16911,
                        [190, 134, 100, 4, 20, 136, 110, 75],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationAttributeFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationAttributeFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_attribute: extern "system" fn(
                    *const *const abi_ISyndicationAttributeFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationAttribute as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationAttributeFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{624f1599-ed3e-420f-be86-640414886e4b}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationAttributeFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationAttributeFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationAttributeFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationAttributeFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationAttributeFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationCategory {
                ptr: ::winrt::ComPtr<r#ISyndicationCategory>,
            }
            impl r#ISyndicationCategory {
                pub fn r#label(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#label)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_label<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_label)(this, r#value.into().abi()).ok() }
                }
                pub fn r#scheme(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#scheme)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_scheme<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_scheme)(this, r#value.into().abi()).ok() }
                }
                pub fn r#term(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#term)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_term<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_term)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationCategory {
                type VTable = abi_ISyndicationCategory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2266325615,
                        3258,
                        19071,
                        [137, 255, 236, 181, 40, 20, 35, 182],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationCategory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationCategory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#label: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_label: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#scheme: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_scheme: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#term: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_term: extern "system" fn(
                    *const *const abi_ISyndicationCategory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationCategory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{8715626f-0cba-4a7f-89ff-ecb5281423b6}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationCategory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationCategory> for r#ISyndicationNode {
                fn from(value: r#ISyndicationCategory) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationCategory> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationCategory) -> r#ISyndicationNode {
                    <r#ISyndicationCategory as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationCategory> for ::winrt::Object {
                fn from(value: r#ISyndicationCategory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationCategory> for ::winrt::Object {
                fn from(value: &r#ISyndicationCategory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationCategoryFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationCategoryFactory>,
            }
            impl r#ISyndicationCategoryFactory {
                pub fn r#create_syndication_category<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#term: __0,
                ) -> ::winrt::Result<r#SyndicationCategory> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationCategory = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_category)(
                            this,
                            r#term.into().abi(),
                            <r#SyndicationCategory as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_category_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#term: __0,
                    r#scheme: __1,
                    r#label: __2,
                ) -> ::winrt::Result<r#SyndicationCategory> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationCategory = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_category_ex)(
                            this,
                            r#term.into().abi(),
                            r#scheme.into().abi(),
                            r#label.into().abi(),
                            <r#SyndicationCategory as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationCategoryFactory {
                type VTable = abi_ISyndicationCategoryFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2873262127,
                        18912,
                        17701,
                        [138, 178, 171, 69, 192, 37, 40, 255],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationCategoryFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationCategoryFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_category: extern "system" fn(
                    *const *const abi_ISyndicationCategoryFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationCategory as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_category_ex: extern "system" fn(
                    *const *const abi_ISyndicationCategoryFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationCategory as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationCategoryFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{ab42802f-49e0-4525-8ab2-ab45c02528ff}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationCategoryFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationCategoryFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationCategoryFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationCategoryFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationCategoryFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationClient {
                ptr: ::winrt::ComPtr<r#ISyndicationClient>,
            }
            impl r#ISyndicationClient {
                pub fn r#server_credential(
                    &self,
                ) -> ::winrt::Result<super::super::r#security::r#credentials::r#PasswordCredential>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok : super :: super :: r#security :: r#credentials :: r#PasswordCredential = :: std :: mem :: zeroed ( ) ;
                        ( ( * ( * ( this ) ) ) . r#server_credential ) ( this , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_server_credential<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_server_credential)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#proxy_credential(
                    &self,
                ) -> ::winrt::Result<super::super::r#security::r#credentials::r#PasswordCredential>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok : super :: super :: r#security :: r#credentials :: r#PasswordCredential = :: std :: mem :: zeroed ( ) ;
                        ( ( * ( * ( this ) ) ) . r#proxy_credential ) ( this , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_proxy_credential<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_proxy_credential)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#max_response_buffer_size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#max_response_buffer_size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_max_response_buffer_size(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_max_response_buffer_size)(this, r#value).ok() }
                }
                pub fn r#timeout(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#timeout)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_timeout(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_timeout)(this, r#value).ok() }
                }
                pub fn r#bypass_cache_on_retrieve(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#bypass_cache_on_retrieve)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_bypass_cache_on_retrieve(&self, r#value: bool) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_bypass_cache_on_retrieve)(this, r#value).ok() }
                }
                pub fn r#set_request_header<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#name: __0,
                    r#value: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_request_header)(
                            this,
                            r#name.into().abi(),
                            r#value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn r#retrieve_feed_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#uri: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<
                        r#SyndicationFeed,
                        r#RetrievalProgress,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperationWithProgress<
                            r#SyndicationFeed,
                            r#RetrievalProgress,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#retrieve_feed_async)(
                            this,
                            r#uri.into().abi(),
                            <super::super::r#foundation::r#IAsyncOperationWithProgress<
                                r#SyndicationFeed,
                                r#RetrievalProgress,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationClient {
                type VTable = abi_ISyndicationClient;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2652416439,
                        29257,
                        19269,
                        [178, 41, 125, 248, 149, 165, 161, 245],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationClient {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationClient where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#server_credential : extern "system" fn ( * const * const abi_ISyndicationClient , * mut < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_server_credential : extern "system" fn ( * const * const abi_ISyndicationClient , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#proxy_credential : extern "system" fn ( * const * const abi_ISyndicationClient , * mut < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_proxy_credential : extern "system" fn ( * const * const abi_ISyndicationClient , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#max_response_buffer_size : extern "system" fn ( * const * const abi_ISyndicationClient , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_max_response_buffer_size : extern "system" fn ( * const * const abi_ISyndicationClient , u32 , ) -> :: winrt :: ErrorCode , pub r#timeout : extern "system" fn ( * const * const abi_ISyndicationClient , * mut u32 , ) -> :: winrt :: ErrorCode , pub r#set_timeout : extern "system" fn ( * const * const abi_ISyndicationClient , u32 , ) -> :: winrt :: ErrorCode , pub r#bypass_cache_on_retrieve : extern "system" fn ( * const * const abi_ISyndicationClient , * mut bool , ) -> :: winrt :: ErrorCode , pub r#set_bypass_cache_on_retrieve : extern "system" fn ( * const * const abi_ISyndicationClient , bool , ) -> :: winrt :: ErrorCode , pub r#set_request_header : extern "system" fn ( * const * const abi_ISyndicationClient , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#retrieve_feed_async : extern "system" fn ( * const * const abi_ISyndicationClient , < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#foundation :: r#IAsyncOperationWithProgress :: < r#SyndicationFeed , r#RetrievalProgress > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationClient {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{9e18a9b7-7249-4b45-b229-7df895a5a1f5}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationClient {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationClient> for ::winrt::Object {
                fn from(value: r#ISyndicationClient) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationClient> for ::winrt::Object {
                fn from(value: &r#ISyndicationClient) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationClientFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationClientFactory>,
            }
            impl r#ISyndicationClientFactory {
                pub fn r#create_syndication_client<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    &self,
                    r#server_credential: __0,
                ) -> ::winrt::Result<r#SyndicationClient> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationClient = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_client)(
                            this,
                            r#server_credential.into().abi(),
                            <r#SyndicationClient as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationClientFactory {
                type VTable = abi_ISyndicationClientFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        784642860,
                        42907,
                        16660,
                        [178, 154, 5, 223, 251, 175, 185, 164],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationClientFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationClientFactory where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#create_syndication_client : extern "system" fn ( * const * const abi_ISyndicationClientFactory , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: Abi , * mut < r#SyndicationClient as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationClientFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{2ec4b32c-a79b-4114-b29a-05dffbafb9a4}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationClientFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationClientFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationClientFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationClientFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationClientFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationContent {
                ptr: ::winrt::ComPtr<r#ISyndicationContent>,
            }
            impl r#ISyndicationContent {
                pub fn r#source_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#source_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_source_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_source_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#text()
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_text(r#value)
                }
                pub fn r#type(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#type()
                }
                pub fn r#set_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_type(r#value)
                }
                pub fn r#xml(
                    &self,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#xml()
                }
                pub fn r#set_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_xml(r#value)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationContent {
                type VTable = abi_ISyndicationContent;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1178730238,
                        3669,
                        16592,
                        [184, 208, 106, 44, 203, 169, 252, 124],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationContent {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationContent {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#source_uri: extern "system" fn(
                    *const *const abi_ISyndicationContent,
                    *mut <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_source_uri: extern "system" fn(
                    *const *const abi_ISyndicationContent,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationContent {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{4641fefe-0e55-40d0-b8d0-6a2ccba9fc7c}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationContent {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationContent> for r#ISyndicationNode {
                fn from(value: r#ISyndicationContent) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationContent> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationContent) -> r#ISyndicationNode {
                    <r#ISyndicationContent as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationContent> for r#ISyndicationText {
                fn from(value: r#ISyndicationContent) -> r#ISyndicationText {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationContent> for r#ISyndicationText {
                fn from(value: &r#ISyndicationContent) -> r#ISyndicationText {
                    <r#ISyndicationContent as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationContent> for ::winrt::Object {
                fn from(value: r#ISyndicationContent) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationContent> for ::winrt::Object {
                fn from(value: &r#ISyndicationContent) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationContentFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationContentFactory>,
            }
            impl r#ISyndicationContentFactory {
                pub fn r#create_syndication_content<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#text: __0,
                    r#type: r#SyndicationTextType,
                ) -> ::winrt::Result<r#SyndicationContent> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationContent = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_content)(
                            this,
                            r#text.into().abi(),
                            ::winrt::RuntimeType::abi(&r#type),
                            <r#SyndicationContent as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_content_with_source_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#source_uri: __0,
                ) -> ::winrt::Result<r#SyndicationContent> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationContent = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_content_with_source_uri)(
                            this,
                            r#source_uri.into().abi(),
                            <r#SyndicationContent as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationContentFactory {
                type VTable = abi_ISyndicationContentFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1026538387,
                        38176,
                        16755,
                        [147, 136, 126, 45, 243, 36, 168, 160],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationContentFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationContentFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_content: extern "system" fn(
                    *const *const abi_ISyndicationContentFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <r#SyndicationTextType as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationContent as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_content_with_source_uri:
                    extern "system" fn(
                        *const *const abi_ISyndicationContentFactory,
                        <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                        *mut <r#SyndicationContent as ::winrt::RuntimeType>::Abi,
                    ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationContentFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{3d2fbb93-9520-4173-9388-7e2df324a8a0}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationContentFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationContentFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationContentFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationContentFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationContentFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationErrorStatics {
                ptr: ::winrt::ComPtr<r#ISyndicationErrorStatics>,
            }
            impl r#ISyndicationErrorStatics {
                pub fn r#get_status(
                    &self,
                    r#hresult: i32,
                ) -> ::winrt::Result<r#SyndicationErrorStatus> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationErrorStatus = ::std::mem::zeroed();
                        ((*(*(this))).r#get_status)(
                            this,
                            r#hresult,
                            <r#SyndicationErrorStatus as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationErrorStatics {
                type VTable = abi_ISyndicationErrorStatics;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        532357985,
                        17863,
                        18483,
                        [138, 160, 190, 95, 59, 88, 167, 244],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationErrorStatics {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationErrorStatics {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#get_status: extern "system" fn(
                    *const *const abi_ISyndicationErrorStatics,
                    i32,
                    *mut <r#SyndicationErrorStatus as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationErrorStatics {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{1fbb2361-45c7-4833-8aa0-be5f3b58a7f4}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationErrorStatics {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationErrorStatics> for ::winrt::Object {
                fn from(value: r#ISyndicationErrorStatics) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationErrorStatics> for ::winrt::Object {
                fn from(value: &r#ISyndicationErrorStatics) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationFeed {
                ptr: ::winrt::ComPtr<r#ISyndicationFeed>,
            }
            impl r#ISyndicationFeed {
                pub fn r#authors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#authors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#categories(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationCategory>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationCategory,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#categories)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationCategory,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#contributors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#contributors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#generator(&self) -> ::winrt::Result<r#SyndicationGenerator> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationGenerator = ::std::mem::zeroed();
                        ((*(*(this))).r#generator)(
                            this,
                            <r#SyndicationGenerator as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_generator<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationGenerator>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_generator)(this, r#value.into().abi()).ok() }
                }
                pub fn r#icon_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#icon_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_icon_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_icon_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#id)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_id<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_id)(this, r#value.into().abi()).ok() }
                }
                pub fn r#items(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationItem>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationItem,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#items ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#last_updated_time(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#last_updated_time ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_last_updated_time<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_last_updated_time)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#links(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationLink>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationLink,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#links ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#image_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#image_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_image_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_image_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rights(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#rights)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rights<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rights)(this, r#value.into().abi()).ok() }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#first_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#first_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#last_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#last_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#next_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#next_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#previous_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#previous_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#source_format(&self) -> ::winrt::Result<r#SyndicationFormat> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationFormat = ::std::mem::zeroed();
                        ((*(*(this))).r#source_format)(
                            this,
                            <r#SyndicationFormat as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#feed: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load)(this, r#feed.into().abi()).ok() }
                }
                pub fn r#load_from_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#feed_document: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#load_from_xml)(this, r#feed_document.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationFeed {
                type VTable = abi_ISyndicationFeed;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2147368146,
                        23398,
                        19810,
                        [132, 3, 27, 193, 13, 145, 13, 107],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationFeed {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationFeed where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#authors : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationPerson > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#categories : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationCategory > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#contributors : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationPerson > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#generator : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < r#SyndicationGenerator as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_generator : extern "system" fn ( * const * const abi_ISyndicationFeed , < r#SyndicationGenerator as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#icon_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_icon_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#id : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_id : extern "system" fn ( * const * const abi_ISyndicationFeed , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#items : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationItem > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#last_updated_time : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_last_updated_time : extern "system" fn ( * const * const abi_ISyndicationFeed , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#links : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#image_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_image_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#rights : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_rights : extern "system" fn ( * const * const abi_ISyndicationFeed , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#subtitle : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_subtitle : extern "system" fn ( * const * const abi_ISyndicationFeed , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_ISyndicationFeed , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#first_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#last_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#next_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#previous_uri : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#source_format : extern "system" fn ( * const * const abi_ISyndicationFeed , * mut < r#SyndicationFormat as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load : extern "system" fn ( * const * const abi_ISyndicationFeed , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_xml : extern "system" fn ( * const * const abi_ISyndicationFeed , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationFeed {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{7ffe3cd2-5b66-4d62-8403-1bc10d910d6b}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationFeed {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationFeed> for r#ISyndicationNode {
                fn from(value: r#ISyndicationFeed) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationFeed> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationFeed) -> r#ISyndicationNode {
                    <r#ISyndicationFeed as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationFeed> for ::winrt::Object {
                fn from(value: r#ISyndicationFeed) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationFeed> for ::winrt::Object {
                fn from(value: &r#ISyndicationFeed) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationFeedFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationFeedFactory>,
            }
            impl r#ISyndicationFeedFactory {
                pub fn r#create_syndication_feed<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#title: __0,
                    r#subtitle: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationFeed> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationFeed = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_feed)(
                            this,
                            r#title.into().abi(),
                            r#subtitle.into().abi(),
                            r#uri.into().abi(),
                            <r#SyndicationFeed as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationFeedFactory {
                type VTable = abi_ISyndicationFeedFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        591864370,
                        35817,
                        18615,
                        [137, 52, 98, 5, 19, 29, 147, 87],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationFeedFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationFeedFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_feed: extern "system" fn(
                    *const *const abi_ISyndicationFeedFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationFeed as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationFeedFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{23472232-8be9-48b7-8934-6205131d9357}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationFeedFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationFeedFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationFeedFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationFeedFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationFeedFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationGenerator {
                ptr: ::winrt::ComPtr<r#ISyndicationGenerator>,
            }
            impl r#ISyndicationGenerator {
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#text)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_text)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#version(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#version)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_version<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_version)(this, r#value.into().abi()).ok() }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationGenerator {
                type VTable = abi_ISyndicationGenerator;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2540221305,
                        64299,
                        20333,
                        [180, 28, 8, 138, 88, 104, 130, 92],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationGenerator {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationGenerator {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#text: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_text: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#uri: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    *mut <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_uri: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#version: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_version: extern "system" fn(
                    *const *const abi_ISyndicationGenerator,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationGenerator {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{9768b379-fb2b-4f6d-b41c-088a5868825c}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationGenerator {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationGenerator> for ::winrt::Object {
                fn from(value: r#ISyndicationGenerator) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationGenerator> for ::winrt::Object {
                fn from(value: &r#ISyndicationGenerator) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationGeneratorFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationGeneratorFactory>,
            }
            impl r#ISyndicationGeneratorFactory {
                pub fn r#create_syndication_generator<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#text: __0,
                ) -> ::winrt::Result<r#SyndicationGenerator> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationGenerator = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_generator)(
                            this,
                            r#text.into().abi(),
                            <r#SyndicationGenerator as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationGeneratorFactory {
                type VTable = abi_ISyndicationGeneratorFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        2738914275,
                        7718,
                        19900,
                        [186, 157, 26, 184, 75, 239, 249, 123],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationGeneratorFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationGeneratorFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_generator: extern "system" fn(
                    *const *const abi_ISyndicationGeneratorFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationGenerator as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationGeneratorFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{a34083e3-1e26-4dbc-ba9d-1ab84beff97b}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationGeneratorFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationGeneratorFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationGeneratorFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationGeneratorFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationGeneratorFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationItem {
                ptr: ::winrt::ComPtr<r#ISyndicationItem>,
            }
            impl r#ISyndicationItem {
                pub fn r#authors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#authors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#categories(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationCategory>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationCategory,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#categories)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationCategory,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#contributors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#contributors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#content(&self) -> ::winrt::Result<r#SyndicationContent> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationContent = ::std::mem::zeroed();
                        ((*(*(this))).r#content)(
                            this,
                            <r#SyndicationContent as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_content<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationContent>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_content)(this, r#value.into().abi()).ok() }
                }
                pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#id)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_id<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_id)(this, r#value.into().abi()).ok() }
                }
                pub fn r#last_updated_time(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#last_updated_time ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_last_updated_time<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_last_updated_time)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#links(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationLink>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationLink,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#links ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#published_date(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#published_date ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_published_date<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_published_date)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rights(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#rights)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rights<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rights)(this, r#value.into().abi()).ok() }
                }
                pub fn r#source(&self) -> ::winrt::Result<r#SyndicationFeed> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationFeed = ::std::mem::zeroed();
                        ((*(*(this))).r#source)(
                            this,
                            <r#SyndicationFeed as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_source<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationFeed>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_source)(this, r#value.into().abi()).ok() }
                }
                pub fn r#summary(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#summary)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_summary<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_summary)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#comments_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#comments_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_comments_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_comments_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#edit_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#edit_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#edit_media_uri(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#edit_media_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#etag(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#etag)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#item_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#item_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#item: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load)(this, r#item.into().abi()).ok() }
                }
                pub fn r#load_from_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#item_document: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#load_from_xml)(this, r#item_document.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationItem {
                type VTable = abi_ISyndicationItem;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1418573955,
                        50052,
                        17857,
                        [138, 232, 163, 120, 196, 236, 72, 108],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationItem {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationItem where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#authors : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationPerson > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#categories : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationCategory > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#contributors : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationPerson > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#content : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < r#SyndicationContent as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_content : extern "system" fn ( * const * const abi_ISyndicationItem , < r#SyndicationContent as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#id : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_id : extern "system" fn ( * const * const abi_ISyndicationItem , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#last_updated_time : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_last_updated_time : extern "system" fn ( * const * const abi_ISyndicationItem , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#links : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#published_date : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_published_date : extern "system" fn ( * const * const abi_ISyndicationItem , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#rights : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_rights : extern "system" fn ( * const * const abi_ISyndicationItem , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#source : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < r#SyndicationFeed as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_source : extern "system" fn ( * const * const abi_ISyndicationItem , < r#SyndicationFeed as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#summary : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_summary : extern "system" fn ( * const * const abi_ISyndicationItem , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#title : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_title : extern "system" fn ( * const * const abi_ISyndicationItem , < r#ISyndicationText as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#comments_uri : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_comments_uri : extern "system" fn ( * const * const abi_ISyndicationItem , < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#edit_uri : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#edit_media_uri : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#etag : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#item_uri : extern "system" fn ( * const * const abi_ISyndicationItem , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load : extern "system" fn ( * const * const abi_ISyndicationItem , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#load_from_xml : extern "system" fn ( * const * const abi_ISyndicationItem , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationItem {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{548db883-c384-45c1-8ae8-a378c4ec486c}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationItem {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationItem> for r#ISyndicationNode {
                fn from(value: r#ISyndicationItem) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationItem> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationItem) -> r#ISyndicationNode {
                    <r#ISyndicationItem as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationItem> for ::winrt::Object {
                fn from(value: r#ISyndicationItem) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationItem> for ::winrt::Object {
                fn from(value: &r#ISyndicationItem) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationItemFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationItemFactory>,
            }
            impl r#ISyndicationItemFactory {
                pub fn r#create_syndication_item<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, r#SyndicationContent>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#title: __0,
                    r#content: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationItem> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationItem = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_item)(
                            this,
                            r#title.into().abi(),
                            r#content.into().abi(),
                            r#uri.into().abi(),
                            <r#SyndicationItem as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationItemFactory {
                type VTable = abi_ISyndicationItemFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        622674767,
                        32184,
                        18554,
                        [133, 228, 16, 209, 145, 230, 110, 187],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationItemFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationItemFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_item: extern "system" fn(
                    *const *const abi_ISyndicationItemFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <r#SyndicationContent as ::winrt::RuntimeType>::Abi,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationItem as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationItemFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{251d434f-7db8-487a-85e4-10d191e66ebb}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationItemFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationItemFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationItemFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationItemFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationItemFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationLink {
                ptr: ::winrt::ComPtr<r#ISyndicationLink>,
            }
            impl r#ISyndicationLink {
                pub fn r#length(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#length)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_length(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_length)(this, r#value).ok() }
                }
                pub fn r#media_type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#media_type)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_media_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_media_type)(this, r#value.into().abi()).ok() }
                }
                pub fn r#relationship(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#relationship)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_relationship<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_relationship)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#resource_language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#resource_language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_resource_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_resource_language)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationLink {
                type VTable = abi_ISyndicationLink;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        659897021,
                        41230,
                        16821,
                        [134, 189, 151, 89, 8, 110, 176, 197],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationLink {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationLink {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#length: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut u32,
                ) -> ::winrt::ErrorCode,
                pub r#set_length: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    u32,
                ) -> ::winrt::ErrorCode,
                pub r#media_type: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_media_type: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#relationship: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_relationship: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#title: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_title: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#uri: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_uri: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#resource_language: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_resource_language: extern "system" fn(
                    *const *const abi_ISyndicationLink,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationLink {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{27553abd-a10e-41b5-86bd-9759086eb0c5}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationLink {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationLink> for r#ISyndicationNode {
                fn from(value: r#ISyndicationLink) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationLink> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationLink) -> r#ISyndicationNode {
                    <r#ISyndicationLink as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationLink> for ::winrt::Object {
                fn from(value: r#ISyndicationLink) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationLink> for ::winrt::Object {
                fn from(value: &r#ISyndicationLink) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationLinkFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationLinkFactory>,
            }
            impl r#ISyndicationLinkFactory {
                pub fn r#create_syndication_link<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#uri: __0,
                ) -> ::winrt::Result<r#SyndicationLink> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationLink = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_link)(
                            this,
                            r#uri.into().abi(),
                            <r#SyndicationLink as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_link_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __3: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#uri: __0,
                    r#relationship: __1,
                    r#title: __2,
                    r#media_type: __3,
                    r#length: u32,
                ) -> ::winrt::Result<r#SyndicationLink> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationLink = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_link_ex)(
                            this,
                            r#uri.into().abi(),
                            r#relationship.into().abi(),
                            r#title.into().abi(),
                            r#media_type.into().abi(),
                            r#length,
                            <r#SyndicationLink as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationLinkFactory {
                type VTable = abi_ISyndicationLinkFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1591239636,
                        21813,
                        18604,
                        [152, 212, 193, 144, 153, 80, 128, 179],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationLinkFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationLinkFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_link: extern "system" fn(
                    *const *const abi_ISyndicationLinkFactory,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationLink as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_link_ex: extern "system" fn(
                    *const *const abi_ISyndicationLinkFactory,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    u32,
                    *mut <r#SyndicationLink as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationLinkFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{5ed863d4-5535-48ac-98d4-c190995080b3}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationLinkFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationLinkFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationLinkFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationLinkFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationLinkFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationNode {
                ptr: ::winrt::ComPtr<r#ISyndicationNode>,
            }
            impl r#ISyndicationNode {
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_namespace)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_namespace)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_value)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_value)(this, r#value.into().abi()).ok() }
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_language)(this, r#value.into().abi()).ok() }
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#base_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_base_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationAttribute,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#attribute_extensions)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationAttribute,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#ISyndicationNode,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#element_extensions)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#ISyndicationNode,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#data::r#xml::r#dom::r#XmlDocument =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_xml_document ) ( this , :: winrt :: RuntimeType :: abi ( & r#format ) , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationNode {
                type VTable = abi_ISyndicationNode;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        1966927736,
                        20984,
                        17856,
                        [169, 245, 241, 113, 157, 236, 63, 178],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationNode {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationNode where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#node_name : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_node_name : extern "system" fn ( * const * const abi_ISyndicationNode , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#node_namespace : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_node_namespace : extern "system" fn ( * const * const abi_ISyndicationNode , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#node_value : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_node_value : extern "system" fn ( * const * const abi_ISyndicationNode , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#language : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_language : extern "system" fn ( * const * const abi_ISyndicationNode , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#base_uri : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_base_uri : extern "system" fn ( * const * const abi_ISyndicationNode , < super :: super :: r#foundation :: r#Uri as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#attribute_extensions : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationAttribute > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#element_extensions : extern "system" fn ( * const * const abi_ISyndicationNode , * mut < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#ISyndicationNode > as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#get_xml_document : extern "system" fn ( * const * const abi_ISyndicationNode , < r#SyndicationFormat as :: winrt :: RuntimeType > :: Abi , * mut < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationNode {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{753cef78-51f8-45c0-a9f5-f1719dec3fb2}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationNode {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationNode> for ::winrt::Object {
                fn from(value: r#ISyndicationNode) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationNode> for ::winrt::Object {
                fn from(value: &r#ISyndicationNode) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationNodeFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationNodeFactory>,
            }
            impl r#ISyndicationNodeFactory {
                pub fn r#create_syndication_node<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#node_name: __0,
                    r#node_namespace: __1,
                    r#node_value: __2,
                ) -> ::winrt::Result<r#SyndicationNode> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationNode = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_node)(
                            this,
                            r#node_name.into().abi(),
                            r#node_namespace.into().abi(),
                            r#node_value.into().abi(),
                            <r#SyndicationNode as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationNodeFactory {
                type VTable = abi_ISyndicationNodeFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        311435656,
                        19147,
                        18856,
                        [183, 119, 165, 235, 146, 225, 138, 121],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationNodeFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationNodeFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_node: extern "system" fn(
                    *const *const abi_ISyndicationNodeFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationNode as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationNodeFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{12902188-4acb-49a8-b777-a5eb92e18a79}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationNodeFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationNodeFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationNodeFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationNodeFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationNodeFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationPerson {
                ptr: ::winrt::ComPtr<r#ISyndicationPerson>,
            }
            impl r#ISyndicationPerson {
                pub fn r#email(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#email)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_email<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_email)(this, r#value.into().abi()).ok() }
                }
                pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationPerson {
                type VTable = abi_ISyndicationPerson;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        4196328922,
                        42950,
                        17687,
                        [160, 150, 1, 67, 250, 242, 147, 39],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationPerson {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationPerson {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#email: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_email: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#name: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_name: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#uri: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    *mut <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
                pub r#set_uri: extern "system" fn(
                    *const *const abi_ISyndicationPerson,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                ) -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationPerson {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{fa1ee5da-a7c6-4517-a096-0143faf29327}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationPerson {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationPerson> for r#ISyndicationNode {
                fn from(value: r#ISyndicationPerson) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationPerson> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationPerson) -> r#ISyndicationNode {
                    <r#ISyndicationPerson as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationPerson> for ::winrt::Object {
                fn from(value: r#ISyndicationPerson) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationPerson> for ::winrt::Object {
                fn from(value: &r#ISyndicationPerson) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationPersonFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationPersonFactory>,
            }
            impl r#ISyndicationPersonFactory {
                pub fn r#create_syndication_person<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#name: __0,
                ) -> ::winrt::Result<r#SyndicationPerson> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationPerson = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_person)(
                            this,
                            r#name.into().abi(),
                            <r#SyndicationPerson as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_person_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#name: __0,
                    r#email: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationPerson> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationPerson = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_person_ex)(
                            this,
                            r#name.into().abi(),
                            r#email.into().abi(),
                            r#uri.into().abi(),
                            <r#SyndicationPerson as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationPersonFactory {
                type VTable = abi_ISyndicationPersonFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3707013229,
                        8861,
                        19288,
                        [164, 155, 243, 210, 240, 245, 201, 159],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationPersonFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationPersonFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_person: extern "system" fn(
                    *const *const abi_ISyndicationPersonFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationPerson as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_person_ex: extern "system" fn(
                    *const *const abi_ISyndicationPersonFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationPerson as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationPersonFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{dcf4886d-229d-4b58-a49b-f3d2f0f5c99f}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationPersonFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationPersonFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationPersonFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationPersonFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationPersonFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationText {
                ptr: ::winrt::ComPtr<r#ISyndicationText>,
            }
            impl r#ISyndicationText {
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#text)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_text)(this, r#value.into().abi()).ok() }
                }
                pub fn r#type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#type)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_type)(this, r#value.into().abi()).ok() }
                }
                pub fn r#xml(
                    &self,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#data::r#xml::r#dom::r#XmlDocument =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#xml ) ( this , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_xml)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationText {
                type VTable = abi_ISyndicationText;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        3117178496,
                        12602,
                        16529,
                        [162, 166, 36, 62, 14, 233, 35, 249],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationText {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationText where { pub unknown_query_interface : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > , & :: winrt :: Guid , * mut :: winrt :: RawPtr ) -> :: winrt :: ErrorCode , pub unknown_add_ref : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub unknown_release : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: IUnknown > ) -> u32 , pub inspectable_iids : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut u32 , * mut * mut :: winrt :: Guid ) -> :: winrt :: ErrorCode , pub inspectable_type_name : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi ) -> :: winrt :: ErrorCode , pub inspectable_trust_level : extern "system" fn ( :: winrt :: RawComPtr < :: winrt :: Object > , * mut i32 ) -> :: winrt :: ErrorCode , pub r#text : extern "system" fn ( * const * const abi_ISyndicationText , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_text : extern "system" fn ( * const * const abi_ISyndicationText , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#type : extern "system" fn ( * const * const abi_ISyndicationText , * mut < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_type : extern "system" fn ( * const * const abi_ISyndicationText , < :: winrt :: HString as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#xml : extern "system" fn ( * const * const abi_ISyndicationText , * mut < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , pub r#set_xml : extern "system" fn ( * const * const abi_ISyndicationText , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: Abi , ) -> :: winrt :: ErrorCode , }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationText {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{b9cc5e80-313a-4091-a2a6-243e0ee923f9}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationText {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationText> for r#ISyndicationNode {
                fn from(value: r#ISyndicationText) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#ISyndicationText> for r#ISyndicationNode {
                fn from(value: &r#ISyndicationText) -> r#ISyndicationNode {
                    <r#ISyndicationText as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#ISyndicationText> for ::winrt::Object {
                fn from(value: r#ISyndicationText) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationText> for ::winrt::Object {
                fn from(value: &r#ISyndicationText) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, PartialEq)]
            pub struct r#ISyndicationTextFactory {
                ptr: ::winrt::ComPtr<r#ISyndicationTextFactory>,
            }
            impl r#ISyndicationTextFactory {
                pub fn r#create_syndication_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#text: __0,
                ) -> ::winrt::Result<r#SyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_text)(
                            this,
                            r#text.into().abi(),
                            <r#SyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_text_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#text: __0,
                    r#type: r#SyndicationTextType,
                ) -> ::winrt::Result<r#SyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#create_syndication_text_ex)(
                            this,
                            r#text.into().abi(),
                            ::winrt::RuntimeType::abi(&r#type),
                            <r#SyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
            }
            unsafe impl ::winrt::ComInterface for r#ISyndicationTextFactory {
                type VTable = abi_ISyndicationTextFactory;
                fn iid() -> ::winrt::Guid {
                    ::winrt::Guid::from_values(
                        4000531191,
                        4550,
                        19237,
                        [171, 98, 229, 150, 189, 22, 41, 70],
                    )
                }
            }
            impl ::std::clone::Clone for r#ISyndicationTextFactory {
                fn clone(&self) -> Self {
                    Self {
                        ptr: self.ptr.clone(),
                    }
                }
            }
            #[repr(C)]
            pub struct abi_ISyndicationTextFactory {
                pub unknown_query_interface: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::IUnknown>,
                    &::winrt::Guid,
                    *mut ::winrt::RawPtr,
                )
                    -> ::winrt::ErrorCode,
                pub unknown_add_ref:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub unknown_release:
                    extern "system" fn(::winrt::RawComPtr<::winrt::IUnknown>) -> u32,
                pub inspectable_iids: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut u32,
                    *mut *mut ::winrt::Guid,
                ) -> ::winrt::ErrorCode,
                pub inspectable_type_name: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut <::winrt::HString as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub inspectable_trust_level: extern "system" fn(
                    ::winrt::RawComPtr<::winrt::Object>,
                    *mut i32,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_text: extern "system" fn(
                    *const *const abi_ISyndicationTextFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationText as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
                pub r#create_syndication_text_ex: extern "system" fn(
                    *const *const abi_ISyndicationTextFactory,
                    <::winrt::HString as ::winrt::RuntimeType>::Abi,
                    <r#SyndicationTextType as ::winrt::RuntimeType>::Abi,
                    *mut <r#SyndicationText as ::winrt::RuntimeType>::Abi,
                )
                    -> ::winrt::ErrorCode,
            }
            unsafe impl ::winrt::RuntimeType for r#ISyndicationTextFactory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "{ee7342f7-11c6-4b25-ab62-e596bd162946}".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#ISyndicationTextFactory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#ISyndicationTextFactory> for ::winrt::Object {
                fn from(value: r#ISyndicationTextFactory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#ISyndicationTextFactory> for ::winrt::Object {
                fn from(value: &r#ISyndicationTextFactory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct r#RetrievalProgress {
                pub r#bytes_retrieved: u32,
                pub r#total_bytes_to_retrieve: u32,
            }
            unsafe impl ::winrt::RuntimeType for r#RetrievalProgress {
                type Abi = Self;
                fn signature() -> String {
                    "struct(Windows.Web.Syndication.RetrievalProgress;u4;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationAttribute {
                ptr: ::winrt::ComPtr<r#SyndicationAttribute>,
            }
            impl r#SyndicationAttribute {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#namespace)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_namespace)(this, r#value.into().abi()).ok() }
                }
                pub fn r#value(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#value)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_value)(this, r#value.into().abi()).ok() }
                }
                pub fn r#create_syndication_attribute<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#attribute_name: __0,
                    r#attribute_namespace: __1,
                    r#attribute_value: __2,
                ) -> ::winrt::Result<r#SyndicationAttribute> {
                    ::winrt::factory::<Self, r#ISyndicationAttributeFactory>()?
                        .r#create_syndication_attribute(
                            r#attribute_name,
                            r#attribute_namespace,
                            r#attribute_value,
                        )
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationAttribute {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationAttribute";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationAttribute {
                type VTable = abi_ISyndicationAttribute;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationAttribute as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationAttribute {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationAttribute;{71e8f969-526e-4001-9a91-e84f83161ab1})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationAttribute {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationAttribute> for r#ISyndicationAttribute {
                fn from(value: r#SyndicationAttribute) -> r#ISyndicationAttribute {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationAttribute> for r#ISyndicationAttribute {
                fn from(value: &r#SyndicationAttribute) -> r#ISyndicationAttribute {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationAttribute> for ::winrt::Object {
                fn from(value: r#SyndicationAttribute) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationAttribute> for ::winrt::Object {
                fn from(value: &r#SyndicationAttribute) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationCategory {
                ptr: ::winrt::ComPtr<r#SyndicationCategory>,
            }
            impl r#SyndicationCategory {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#label(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#label)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_label<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_label)(this, r#value.into().abi()).ok() }
                }
                pub fn r#scheme(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#scheme)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_scheme<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_scheme)(this, r#value.into().abi()).ok() }
                }
                pub fn r#term(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#term)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_term<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_term)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_category<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#term: __0,
                ) -> ::winrt::Result<r#SyndicationCategory> {
                    ::winrt::factory::<Self, r#ISyndicationCategoryFactory>()?
                        .r#create_syndication_category(r#term)
                }
                pub fn r#create_syndication_category_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#term: __0,
                    r#scheme: __1,
                    r#label: __2,
                ) -> ::winrt::Result<r#SyndicationCategory> {
                    ::winrt::factory::<Self, r#ISyndicationCategoryFactory>()?
                        .r#create_syndication_category_ex(r#term, r#scheme, r#label)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationCategory {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationCategory";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationCategory {
                type VTable = abi_ISyndicationCategory;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationCategory as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationCategory {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationCategory;{8715626f-0cba-4a7f-89ff-ecb5281423b6})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationCategory {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationCategory> for r#ISyndicationCategory {
                fn from(value: r#SyndicationCategory) -> r#ISyndicationCategory {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationCategory> for r#ISyndicationCategory {
                fn from(value: &r#SyndicationCategory) -> r#ISyndicationCategory {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationCategory> for r#ISyndicationNode {
                fn from(value: r#SyndicationCategory) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationCategory> for r#ISyndicationNode {
                fn from(value: &r#SyndicationCategory) -> r#ISyndicationNode {
                    <r#SyndicationCategory as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationCategory> for ::winrt::Object {
                fn from(value: r#SyndicationCategory) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationCategory> for ::winrt::Object {
                fn from(value: &r#SyndicationCategory) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationClient {
                ptr: ::winrt::ComPtr<r#SyndicationClient>,
            }
            impl r#SyndicationClient {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#server_credential(
                    &self,
                ) -> ::winrt::Result<super::super::r#security::r#credentials::r#PasswordCredential>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok : super :: super :: r#security :: r#credentials :: r#PasswordCredential = :: std :: mem :: zeroed ( ) ;
                        ( ( * ( * ( this ) ) ) . r#server_credential ) ( this , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_server_credential<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_server_credential)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#proxy_credential(
                    &self,
                ) -> ::winrt::Result<super::super::r#security::r#credentials::r#PasswordCredential>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok : super :: super :: r#security :: r#credentials :: r#PasswordCredential = :: std :: mem :: zeroed ( ) ;
                        ( ( * ( * ( this ) ) ) . r#proxy_credential ) ( this , < super :: super :: r#security :: r#credentials :: r#PasswordCredential as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_proxy_credential<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_proxy_credential)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#max_response_buffer_size(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#max_response_buffer_size)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_max_response_buffer_size(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_max_response_buffer_size)(this, r#value).ok() }
                }
                pub fn r#timeout(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#timeout)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_timeout(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_timeout)(this, r#value).ok() }
                }
                pub fn r#bypass_cache_on_retrieve(&self) -> ::winrt::Result<bool> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: bool = ::std::mem::zeroed();
                        ((*(*(this))).r#bypass_cache_on_retrieve)(
                            this,
                            <bool as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_bypass_cache_on_retrieve(&self, r#value: bool) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_bypass_cache_on_retrieve)(this, r#value).ok() }
                }
                pub fn r#set_request_header<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#name: __0,
                    r#value: __1,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_request_header)(
                            this,
                            r#name.into().abi(),
                            r#value.into().abi(),
                        )
                        .ok()
                    }
                }
                pub fn r#retrieve_feed_async<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#uri: __0,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#IAsyncOperationWithProgress<
                        r#SyndicationFeed,
                        r#RetrievalProgress,
                    >,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#IAsyncOperationWithProgress<
                            r#SyndicationFeed,
                            r#RetrievalProgress,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#retrieve_feed_async)(
                            this,
                            r#uri.into().abi(),
                            <super::super::r#foundation::r#IAsyncOperationWithProgress<
                                r#SyndicationFeed,
                                r#RetrievalProgress,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#create_syndication_client<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<
                            'a,
                            super::super::r#security::r#credentials::r#PasswordCredential,
                        >,
                    >,
                >(
                    r#server_credential: __0,
                ) -> ::winrt::Result<r#SyndicationClient> {
                    ::winrt::factory::<Self, r#ISyndicationClientFactory>()?
                        .r#create_syndication_client(r#server_credential)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationClient {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationClient";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationClient {
                type VTable = abi_ISyndicationClient;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationClient as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationClient {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationClient;{9e18a9b7-7249-4b45-b229-7df895a5a1f5})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationClient {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationClient> for r#ISyndicationClient {
                fn from(value: r#SyndicationClient) -> r#ISyndicationClient {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationClient> for r#ISyndicationClient {
                fn from(value: &r#SyndicationClient) -> r#ISyndicationClient {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationClient> for ::winrt::Object {
                fn from(value: r#SyndicationClient) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationClient> for ::winrt::Object {
                fn from(value: &r#SyndicationClient) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationContent {
                ptr: ::winrt::ComPtr<r#SyndicationContent>,
            }
            impl r#SyndicationContent {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#source_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#source_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_source_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_source_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#text()
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_text(r#value)
                }
                pub fn r#type(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#type()
                }
                pub fn r#set_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_type(r#value)
                }
                pub fn r#xml(
                    &self,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self).r#xml()
                }
                pub fn r#set_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationText as ::std::convert::From<&Self>>::from(self)
                        .r#set_xml(r#value)
                }
                pub fn r#create_syndication_content<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#text: __0,
                    r#type: r#SyndicationTextType,
                ) -> ::winrt::Result<r#SyndicationContent> {
                    ::winrt::factory::<Self, r#ISyndicationContentFactory>()?
                        .r#create_syndication_content(r#text, r#type)
                }
                pub fn r#create_syndication_content_with_source_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    r#source_uri: __0,
                ) -> ::winrt::Result<r#SyndicationContent> {
                    ::winrt::factory::<Self, r#ISyndicationContentFactory>()?
                        .r#create_syndication_content_with_source_uri(r#source_uri)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationContent {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationContent";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationContent {
                type VTable = abi_ISyndicationContent;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationContent as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationContent {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationContent;{4641fefe-0e55-40d0-b8d0-6a2ccba9fc7c})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationContent {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationContent> for r#ISyndicationContent {
                fn from(value: r#SyndicationContent) -> r#ISyndicationContent {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationContent> for r#ISyndicationContent {
                fn from(value: &r#SyndicationContent) -> r#ISyndicationContent {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationContent> for r#ISyndicationNode {
                fn from(value: r#SyndicationContent) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationContent> for r#ISyndicationNode {
                fn from(value: &r#SyndicationContent) -> r#ISyndicationNode {
                    <r#SyndicationContent as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationContent> for r#ISyndicationText {
                fn from(value: r#SyndicationContent) -> r#ISyndicationText {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationContent> for r#ISyndicationText {
                fn from(value: &r#SyndicationContent) -> r#ISyndicationText {
                    <r#SyndicationContent as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationContent> for ::winrt::Object {
                fn from(value: r#SyndicationContent) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationContent> for ::winrt::Object {
                fn from(value: &r#SyndicationContent) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            pub struct r#SyndicationError {}
            impl r#SyndicationError {
                pub fn r#get_status(r#hresult: i32) -> ::winrt::Result<r#SyndicationErrorStatus> {
                    ::winrt::factory::<Self, r#ISyndicationErrorStatics>()?.r#get_status(r#hresult)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationError {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationError";
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#SyndicationErrorStatus {
                value: i32,
            }
            impl r#SyndicationErrorStatus {
                #![allow(non_upper_case_globals)]
                pub const r#Unknown: Self = Self { value: 0i32 };
                pub const r#MissingRequiredElement: Self = Self { value: 1i32 };
                pub const r#MissingRequiredAttribute: Self = Self { value: 2i32 };
                pub const r#InvalidXml: Self = Self { value: 3i32 };
                pub const r#UnexpectedContent: Self = Self { value: 4i32 };
                pub const r#UnsupportedFormat: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationErrorStatus {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Web.Syndication.SyndicationErrorStatus;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationFeed {
                ptr: ::winrt::ComPtr<r#SyndicationFeed>,
            }
            impl r#SyndicationFeed {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#authors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#authors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#categories(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationCategory>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationCategory,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#categories)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationCategory,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#contributors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#contributors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#generator(&self) -> ::winrt::Result<r#SyndicationGenerator> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationGenerator = ::std::mem::zeroed();
                        ((*(*(this))).r#generator)(
                            this,
                            <r#SyndicationGenerator as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_generator<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationGenerator>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_generator)(this, r#value.into().abi()).ok() }
                }
                pub fn r#icon_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#icon_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_icon_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_icon_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#id)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_id<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_id)(this, r#value.into().abi()).ok() }
                }
                pub fn r#items(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationItem>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationItem,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#items ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationItem > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#last_updated_time(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#last_updated_time ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_last_updated_time<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_last_updated_time)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#links(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationLink>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationLink,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#links ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#image_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#image_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_image_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_image_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rights(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#rights)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rights<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rights)(this, r#value.into().abi()).ok() }
                }
                pub fn r#subtitle(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#subtitle)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_subtitle<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_subtitle)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#first_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#first_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#last_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#last_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#next_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#next_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#previous_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#previous_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#source_format(&self) -> ::winrt::Result<r#SyndicationFormat> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationFormat = ::std::mem::zeroed();
                        ((*(*(this))).r#source_format)(
                            this,
                            <r#SyndicationFormat as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#feed: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load)(this, r#feed.into().abi()).ok() }
                }
                pub fn r#load_from_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#feed_document: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#load_from_xml)(this, r#feed_document.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_feed<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    r#title: __0,
                    r#subtitle: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationFeed> {
                    ::winrt::factory::<Self, r#ISyndicationFeedFactory>()?
                        .r#create_syndication_feed(r#title, r#subtitle, r#uri)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationFeed {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationFeed";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationFeed {
                type VTable = abi_ISyndicationFeed;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationFeed as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationFeed {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationFeed;{7ffe3cd2-5b66-4d62-8403-1bc10d910d6b})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationFeed {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationFeed> for r#ISyndicationFeed {
                fn from(value: r#SyndicationFeed) -> r#ISyndicationFeed {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationFeed> for r#ISyndicationFeed {
                fn from(value: &r#SyndicationFeed) -> r#ISyndicationFeed {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationFeed> for r#ISyndicationNode {
                fn from(value: r#SyndicationFeed) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationFeed> for r#ISyndicationNode {
                fn from(value: &r#SyndicationFeed) -> r#ISyndicationNode {
                    <r#SyndicationFeed as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationFeed> for ::winrt::Object {
                fn from(value: r#SyndicationFeed) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationFeed> for ::winrt::Object {
                fn from(value: &r#SyndicationFeed) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#SyndicationFormat {
                value: i32,
            }
            impl r#SyndicationFormat {
                #![allow(non_upper_case_globals)]
                pub const r#Atom10: Self = Self { value: 0i32 };
                pub const r#Rss20: Self = Self { value: 1i32 };
                pub const r#Rss10: Self = Self { value: 2i32 };
                pub const r#Rss092: Self = Self { value: 3i32 };
                pub const r#Rss091: Self = Self { value: 4i32 };
                pub const r#Atom03: Self = Self { value: 5i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationFormat {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Web.Syndication.SyndicationFormat;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationGenerator {
                ptr: ::winrt::ComPtr<r#SyndicationGenerator>,
            }
            impl r#SyndicationGenerator {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#text)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_text)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#version(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#version)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_version<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_version)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_generator<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#text: __0,
                ) -> ::winrt::Result<r#SyndicationGenerator> {
                    ::winrt::factory::<Self, r#ISyndicationGeneratorFactory>()?
                        .r#create_syndication_generator(r#text)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationGenerator {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationGenerator";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationGenerator {
                type VTable = abi_ISyndicationGenerator;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationGenerator as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationGenerator {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationGenerator;{9768b379-fb2b-4f6d-b41c-088a5868825c})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationGenerator {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationGenerator> for r#ISyndicationGenerator {
                fn from(value: r#SyndicationGenerator) -> r#ISyndicationGenerator {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationGenerator> for r#ISyndicationGenerator {
                fn from(value: &r#SyndicationGenerator) -> r#ISyndicationGenerator {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationGenerator> for r#ISyndicationNode {
                fn from(value: r#SyndicationGenerator) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationGenerator> for r#ISyndicationNode {
                fn from(value: &r#SyndicationGenerator) -> r#ISyndicationNode {
                    <r#SyndicationGenerator as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationGenerator> for ::winrt::Object {
                fn from(value: r#SyndicationGenerator) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationGenerator> for ::winrt::Object {
                fn from(value: &r#SyndicationGenerator) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationItem {
                ptr: ::winrt::ComPtr<r#SyndicationItem>,
            }
            impl r#SyndicationItem {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#authors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#authors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#categories(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationCategory>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationCategory,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#categories)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationCategory,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#contributors(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationPerson>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationPerson,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#contributors)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationPerson,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#content(&self) -> ::winrt::Result<r#SyndicationContent> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationContent = ::std::mem::zeroed();
                        ((*(*(this))).r#content)(
                            this,
                            <r#SyndicationContent as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_content<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationContent>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_content)(this, r#value.into().abi()).ok() }
                }
                pub fn r#id(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#id)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_id<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_id)(this, r#value.into().abi()).ok() }
                }
                pub fn r#last_updated_time(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#last_updated_time ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_last_updated_time<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_last_updated_time)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#links(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationLink>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationLink,
                        > = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#links ) ( this , < super :: super :: r#foundation :: r#collections :: r#IVector :: < r#SyndicationLink > as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#published_date(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#DateTime> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#DateTime = ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#published_date ) ( this , < super :: super :: r#foundation :: r#DateTime as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_published_date<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#foundation::r#DateTime>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_published_date)(this, r#value.into().abi()).ok() }
                }
                pub fn r#rights(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#rights)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_rights<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_rights)(this, r#value.into().abi()).ok() }
                }
                pub fn r#source(&self) -> ::winrt::Result<r#SyndicationFeed> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#SyndicationFeed = ::std::mem::zeroed();
                        ((*(*(this))).r#source)(
                            this,
                            <r#SyndicationFeed as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_source<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#SyndicationFeed>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_source)(this, r#value.into().abi()).ok() }
                }
                pub fn r#summary(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#summary)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_summary<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_summary)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<r#ISyndicationText> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: r#ISyndicationText = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <r#ISyndicationText as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, r#ISyndicationText>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#comments_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#comments_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_comments_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_comments_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#edit_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#edit_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#edit_media_uri(
                    &self,
                ) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#edit_media_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#etag(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#etag)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#item_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#item_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#load<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#item: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#load)(this, r#item.into().abi()).ok() }
                }
                pub fn r#load_from_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#item_document: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#load_from_xml)(this, r#item_document.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_item<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, r#SyndicationContent>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    r#title: __0,
                    r#content: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationItem> {
                    ::winrt::factory::<Self, r#ISyndicationItemFactory>()?
                        .r#create_syndication_item(r#title, r#content, r#uri)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationItem {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationItem";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationItem {
                type VTable = abi_ISyndicationItem;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationItem as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationItem {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationItem;{548db883-c384-45c1-8ae8-a378c4ec486c})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationItem {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationItem> for r#ISyndicationItem {
                fn from(value: r#SyndicationItem) -> r#ISyndicationItem {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationItem> for r#ISyndicationItem {
                fn from(value: &r#SyndicationItem) -> r#ISyndicationItem {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationItem> for r#ISyndicationNode {
                fn from(value: r#SyndicationItem) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationItem> for r#ISyndicationNode {
                fn from(value: &r#SyndicationItem) -> r#ISyndicationNode {
                    <r#SyndicationItem as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationItem> for ::winrt::Object {
                fn from(value: r#SyndicationItem) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationItem> for ::winrt::Object {
                fn from(value: &r#SyndicationItem) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationLink {
                ptr: ::winrt::ComPtr<r#SyndicationLink>,
            }
            impl r#SyndicationLink {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#length(&self) -> ::winrt::Result<u32> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: u32 = ::std::mem::zeroed();
                        ((*(*(this))).r#length)(
                            this,
                            <u32 as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_length(&self, r#value: u32) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_length)(this, r#value).ok() }
                }
                pub fn r#media_type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#media_type)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_media_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_media_type)(this, r#value.into().abi()).ok() }
                }
                pub fn r#relationship(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#relationship)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_relationship<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_relationship)(this, r#value.into().abi()).ok() }
                }
                pub fn r#title(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#title)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_title<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_title)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#resource_language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#resource_language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_resource_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        ((*(*(this))).r#set_resource_language)(this, r#value.into().abi()).ok()
                    }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_link<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    r#uri: __0,
                ) -> ::winrt::Result<r#SyndicationLink> {
                    ::winrt::factory::<Self, r#ISyndicationLinkFactory>()?
                        .r#create_syndication_link(r#uri)
                }
                pub fn r#create_syndication_link_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __3: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#uri: __0,
                    r#relationship: __1,
                    r#title: __2,
                    r#media_type: __3,
                    r#length: u32,
                ) -> ::winrt::Result<r#SyndicationLink> {
                    ::winrt::factory::<Self, r#ISyndicationLinkFactory>()?
                        .r#create_syndication_link_ex(
                            r#uri,
                            r#relationship,
                            r#title,
                            r#media_type,
                            r#length,
                        )
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationLink {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationLink";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationLink {
                type VTable = abi_ISyndicationLink;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationLink as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationLink {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationLink;{27553abd-a10e-41b5-86bd-9759086eb0c5})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationLink {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationLink> for r#ISyndicationLink {
                fn from(value: r#SyndicationLink) -> r#ISyndicationLink {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationLink> for r#ISyndicationLink {
                fn from(value: &r#SyndicationLink) -> r#ISyndicationLink {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationLink> for r#ISyndicationNode {
                fn from(value: r#SyndicationLink) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationLink> for r#ISyndicationNode {
                fn from(value: &r#SyndicationLink) -> r#ISyndicationNode {
                    <r#SyndicationLink as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationLink> for ::winrt::Object {
                fn from(value: r#SyndicationLink) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationLink> for ::winrt::Object {
                fn from(value: &r#SyndicationLink) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationNode {
                ptr: ::winrt::ComPtr<r#SyndicationNode>,
            }
            impl r#SyndicationNode {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_namespace)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_namespace)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#node_value)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_node_value)(this, r#value.into().abi()).ok() }
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#language)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_language)(this, r#value.into().abi()).ok() }
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#base_uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_base_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#SyndicationAttribute,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#attribute_extensions)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#SyndicationAttribute,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#collections::r#IVector<
                            r#ISyndicationNode,
                        > = ::std::mem::zeroed();
                        ((*(*(this))).r#element_extensions)(
                            this,
                            <super::super::r#foundation::r#collections::r#IVector<
                                r#ISyndicationNode,
                            > as ::winrt::RuntimeType>::set_abi(
                                &mut __ok
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#data::r#xml::r#dom::r#XmlDocument =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#get_xml_document ) ( this , :: winrt :: RuntimeType :: abi ( & r#format ) , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#create_syndication_node<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#node_name: __0,
                    r#node_namespace: __1,
                    r#node_value: __2,
                ) -> ::winrt::Result<r#SyndicationNode> {
                    ::winrt::factory::<Self, r#ISyndicationNodeFactory>()?
                        .r#create_syndication_node(r#node_name, r#node_namespace, r#node_value)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationNode {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationNode";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationNode {
                type VTable = abi_ISyndicationNode;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationNode as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationNode {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationNode;{753cef78-51f8-45c0-a9f5-f1719dec3fb2})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationNode {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationNode> for r#ISyndicationNode {
                fn from(value: r#SyndicationNode) -> r#ISyndicationNode {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationNode> for r#ISyndicationNode {
                fn from(value: &r#SyndicationNode) -> r#ISyndicationNode {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationNode> for ::winrt::Object {
                fn from(value: r#SyndicationNode) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationNode> for ::winrt::Object {
                fn from(value: &r#SyndicationNode) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationPerson {
                ptr: ::winrt::ComPtr<r#SyndicationPerson>,
            }
            impl r#SyndicationPerson {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#email(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#email)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_email<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_email)(this, r#value.into().abi()).ok() }
                }
                pub fn r#name(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#name)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_name)(this, r#value.into().abi()).ok() }
                }
                pub fn r#uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#foundation::r#Uri = ::std::mem::zeroed();
                        ((*(*(this))).r#uri)(
                            this,
                            <super::super::r#foundation::r#Uri as ::winrt::RuntimeType>::set_abi(
                                &mut __ok,
                            ),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_uri)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_person<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#name: __0,
                ) -> ::winrt::Result<r#SyndicationPerson> {
                    ::winrt::factory::<Self, r#ISyndicationPersonFactory>()?
                        .r#create_syndication_person(r#name)
                }
                pub fn r#create_syndication_person_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __1: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                    __2: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    r#name: __0,
                    r#email: __1,
                    r#uri: __2,
                ) -> ::winrt::Result<r#SyndicationPerson> {
                    ::winrt::factory::<Self, r#ISyndicationPersonFactory>()?
                        .r#create_syndication_person_ex(r#name, r#email, r#uri)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationPerson {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationPerson";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationPerson {
                type VTable = abi_ISyndicationPerson;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationPerson as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationPerson {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationPerson;{fa1ee5da-a7c6-4517-a096-0143faf29327})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationPerson {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationPerson> for r#ISyndicationPerson {
                fn from(value: r#SyndicationPerson) -> r#ISyndicationPerson {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationPerson> for r#ISyndicationPerson {
                fn from(value: &r#SyndicationPerson) -> r#ISyndicationPerson {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationPerson> for r#ISyndicationNode {
                fn from(value: r#SyndicationPerson) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationPerson> for r#ISyndicationNode {
                fn from(value: &r#SyndicationPerson) -> r#ISyndicationNode {
                    <r#SyndicationPerson as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationPerson> for ::winrt::Object {
                fn from(value: r#SyndicationPerson) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationPerson> for ::winrt::Object {
                fn from(value: &r#SyndicationPerson) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Default, Clone, PartialEq)]
            pub struct r#SyndicationText {
                ptr: ::winrt::ComPtr<r#SyndicationText>,
            }
            impl r#SyndicationText {
                pub fn new() -> ::winrt::Result<Self> {
                    ::winrt::factory::<Self, ::winrt::IActivationFactory>()?
                        .activate_instance::<Self>()
                }
                pub fn r#text(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#text)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_text)(this, r#value.into().abi()).ok() }
                }
                pub fn r#type(&self) -> ::winrt::Result<::winrt::HString> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: ::winrt::HString = ::std::mem::zeroed();
                        ((*(*(this))).r#type)(
                            this,
                            <::winrt::HString as ::winrt::RuntimeType>::set_abi(&mut __ok),
                        )
                        .and_then(|| __ok)
                    }
                }
                pub fn r#set_type<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_type)(this, r#value.into().abi()).ok() }
                }
                pub fn r#xml(
                    &self,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe {
                        let mut __ok: super::super::r#data::r#xml::r#dom::r#XmlDocument =
                            ::std::mem::zeroed();
                        ( ( * ( * ( this ) ) ) . r#xml ) ( this , < super :: super :: r#data :: r#xml :: r#dom :: r#XmlDocument as :: winrt :: RuntimeType > :: set_abi ( & mut __ok ) ) . and_then ( || __ok )
                    }
                }
                pub fn r#set_xml<
                    'a,
                    __0: ::std::convert::Into<
                        ::winrt::Param<'a, super::super::r#data::r#xml::r#dom::r#XmlDocument>,
                    >,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    let this = <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr);
                    if this.is_null() {
                        panic!("The `this` pointer was null when calling method");
                    }
                    unsafe { ((*(*(this))).r#set_xml)(this, r#value.into().abi()).ok() }
                }
                pub fn r#node_name(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_name()
                }
                pub fn r#set_node_name<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_name(r#value)
                }
                pub fn r#node_namespace(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#node_namespace()
                }
                pub fn r#set_node_namespace<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_namespace(r#value)
                }
                pub fn r#node_value(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#node_value()
                }
                pub fn r#set_node_value<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_node_value(r#value)
                }
                pub fn r#language(&self) -> ::winrt::Result<::winrt::HString> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#language()
                }
                pub fn r#set_language<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_language(r#value)
                }
                pub fn r#base_uri(&self) -> ::winrt::Result<super::super::r#foundation::r#Uri> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self).r#base_uri()
                }
                pub fn r#set_base_uri<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, super::super::r#foundation::r#Uri>>,
                >(
                    &self,
                    r#value: __0,
                ) -> ::winrt::Result<()> {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#set_base_uri(r#value)
                }
                pub fn r#attribute_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#SyndicationAttribute>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#attribute_extensions()
                }
                pub fn r#element_extensions(
                    &self,
                ) -> ::winrt::Result<
                    super::super::r#foundation::r#collections::r#IVector<r#ISyndicationNode>,
                > {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#element_extensions()
                }
                pub fn r#get_xml_document(
                    &self,
                    r#format: r#SyndicationFormat,
                ) -> ::winrt::Result<super::super::r#data::r#xml::r#dom::r#XmlDocument>
                {
                    <r#ISyndicationNode as ::std::convert::From<&Self>>::from(self)
                        .r#get_xml_document(r#format)
                }
                pub fn r#create_syndication_text<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#text: __0,
                ) -> ::winrt::Result<r#SyndicationText> {
                    ::winrt::factory::<Self, r#ISyndicationTextFactory>()?
                        .r#create_syndication_text(r#text)
                }
                pub fn r#create_syndication_text_ex<
                    'a,
                    __0: ::std::convert::Into<::winrt::Param<'a, ::winrt::HString>>,
                >(
                    r#text: __0,
                    r#type: r#SyndicationTextType,
                ) -> ::winrt::Result<r#SyndicationText> {
                    ::winrt::factory::<Self, r#ISyndicationTextFactory>()?
                        .r#create_syndication_text_ex(r#text, r#type)
                }
            }
            impl ::winrt::RuntimeName for r#SyndicationText {
                const NAME: &'static str = "Windows.Web.Syndication.SyndicationText";
            }
            unsafe impl ::winrt::ComInterface for r#SyndicationText {
                type VTable = abi_ISyndicationText;
                fn iid() -> ::winrt::Guid {
                    <r#ISyndicationText as ::winrt::ComInterface>::iid()
                }
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationText {
                type Abi = ::winrt::RawComPtr<Self>;
                fn signature() -> String {
                    "rc(Windows.Web.Syndication.SyndicationText;{b9cc5e80-313a-4091-a2a6-243e0ee923f9})" . to_owned ( )
                }
                fn abi(&self) -> Self::Abi {
                    <::winrt::ComPtr<Self> as ::winrt::ComInterface>::as_raw(&self.ptr)
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self.ptr.set_abi()
                }
            }
            impl ::std::fmt::Debug for r#SyndicationText {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    write!(f, "{:?}", <Self as ::winrt::RuntimeType>::abi(self))
                }
            }
            impl ::std::convert::From<r#SyndicationText> for r#ISyndicationText {
                fn from(value: r#SyndicationText) -> r#ISyndicationText {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationText> for r#ISyndicationText {
                fn from(value: &r#SyndicationText) -> r#ISyndicationText {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl ::std::convert::From<r#SyndicationText> for r#ISyndicationNode {
                fn from(value: r#SyndicationText) -> r#ISyndicationNode {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&r#SyndicationText> for r#ISyndicationNode {
                fn from(value: &r#SyndicationText) -> r#ISyndicationNode {
                    <r#SyndicationText as ::winrt::ComInterface>::query(value)
                }
            }
            impl ::std::convert::From<r#SyndicationText> for ::winrt::Object {
                fn from(value: r#SyndicationText) -> ::winrt::Object {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&r#SyndicationText> for ::winrt::Object {
                fn from(value: &r#SyndicationText) -> ::winrt::Object {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            #[repr(transparent)]
            #[derive(Copy, Clone, Default, Debug, Eq, PartialEq)]
            pub struct r#SyndicationTextType {
                value: i32,
            }
            impl r#SyndicationTextType {
                #![allow(non_upper_case_globals)]
                pub const r#Text: Self = Self { value: 0i32 };
                pub const r#Html: Self = Self { value: 1i32 };
                pub const r#Xhtml: Self = Self { value: 2i32 };
            }
            unsafe impl ::winrt::RuntimeType for r#SyndicationTextType {
                type Abi = i32;
                fn signature() -> String {
                    "enum(Windows.Web.Syndication.SyndicationTextType;i4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.value
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    &mut self.value
                }
            }
            #[repr(C)]
            #[derive(Clone, Default, Debug, PartialEq)]
            pub struct r#TransferProgress {
                pub r#bytes_sent: u32,
                pub r#total_bytes_to_send: u32,
                pub r#bytes_retrieved: u32,
                pub r#total_bytes_to_retrieve: u32,
            }
            unsafe impl ::winrt::RuntimeType for r#TransferProgress {
                type Abi = Self;
                fn signature() -> String {
                    "struct(Windows.Web.Syndication.TransferProgress;u4;u4;u4;u4)".to_owned()
                }
                fn abi(&self) -> Self::Abi {
                    self.clone()
                }
                fn set_abi(&mut self) -> *mut Self::Abi {
                    self as *mut Self::Abi
                }
            }
        }
    }
}
